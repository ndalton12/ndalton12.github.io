{"version":3,"file":"component---src-pages-index-jsx-bdebad1025cda8408910.js","mappings":"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","sources":["webpack://ndalton-website/./node_modules/extend/index.js","webpack://ndalton-website/./src/components/section/index.jsx","webpack://ndalton-website/./src/components/summary-item/index.jsx","webpack://ndalton-website/./node_modules/react-markdown/node_modules/unist-util-stringify-position/lib/index.js","webpack://ndalton-website/./node_modules/react-markdown/node_modules/vfile-message/lib/index.js","webpack://ndalton-website/./node_modules/react-markdown/node_modules/vfile/lib/minpath.browser.js","webpack://ndalton-website/./node_modules/react-markdown/node_modules/vfile/lib/minproc.browser.js","webpack://ndalton-website/./node_modules/react-markdown/node_modules/vfile/lib/minurl.shared.js","webpack://ndalton-website/./node_modules/react-markdown/node_modules/vfile/lib/minurl.browser.js","webpack://ndalton-website/./node_modules/react-markdown/node_modules/vfile/lib/index.js","webpack://ndalton-website/./node_modules/react-markdown/node_modules/bail/index.js","webpack://ndalton-website/./node_modules/react-markdown/node_modules/is-plain-obj/index.js","webpack://ndalton-website/./node_modules/react-markdown/node_modules/trough/index.js","webpack://ndalton-website/./node_modules/react-markdown/node_modules/unified/lib/index.js","webpack://ndalton-website/./node_modules/react-markdown/node_modules/mdast-util-to-string/lib/index.js","webpack://ndalton-website/./node_modules/react-markdown/node_modules/micromark-util-chunked/index.js","webpack://ndalton-website/./node_modules/react-markdown/node_modules/micromark-util-combine-extensions/index.js","webpack://ndalton-website/./node_modules/react-markdown/node_modules/micromark-util-character/lib/unicode-punctuation-regex.js","webpack://ndalton-website/./node_modules/react-markdown/node_modules/micromark-util-character/index.js","webpack://ndalton-website/./node_modules/react-markdown/node_modules/micromark-factory-space/index.js","webpack://ndalton-website/./node_modules/react-markdown/node_modules/micromark/lib/initialize/content.js","webpack://ndalton-website/./node_modules/react-markdown/node_modules/micromark/lib/initialize/document.js","webpack://ndalton-website/./node_modules/react-markdown/node_modules/micromark-core-commonmark/lib/blank-line.js","webpack://ndalton-website/./node_modules/react-markdown/node_modules/micromark-util-subtokenize/index.js","webpack://ndalton-website/./node_modules/react-markdown/node_modules/micromark-core-commonmark/lib/content.js","webpack://ndalton-website/./node_modules/react-markdown/node_modules/micromark/lib/initialize/flow.js","webpack://ndalton-website/./node_modules/react-markdown/node_modules/micromark/lib/initialize/text.js","webpack://ndalton-website/./node_modules/react-markdown/node_modules/micromark-util-resolve-all/index.js","webpack://ndalton-website/./node_modules/react-markdown/node_modules/micromark/lib/create-tokenizer.js","webpack://ndalton-website/./node_modules/react-markdown/node_modules/micromark-core-commonmark/lib/thematic-break.js","webpack://ndalton-website/./node_modules/react-markdown/node_modules/micromark-core-commonmark/lib/list.js","webpack://ndalton-website/./node_modules/react-markdown/node_modules/micromark-core-commonmark/lib/block-quote.js","webpack://ndalton-website/./node_modules/react-markdown/node_modules/micromark-factory-destination/index.js","webpack://ndalton-website/./node_modules/react-markdown/node_modules/micromark-factory-label/index.js","webpack://ndalton-website/./node_modules/react-markdown/node_modules/micromark-factory-title/index.js","webpack://ndalton-website/./node_modules/react-markdown/node_modules/micromark-factory-whitespace/index.js","webpack://ndalton-website/./node_modules/react-markdown/node_modules/micromark-util-normalize-identifier/index.js","webpack://ndalton-website/./node_modules/react-markdown/node_modules/micromark-core-commonmark/lib/definition.js","webpack://ndalton-website/./node_modules/react-markdown/node_modules/micromark-core-commonmark/lib/code-indented.js","webpack://ndalton-website/./node_modules/react-markdown/node_modules/micromark-core-commonmark/lib/heading-atx.js","webpack://ndalton-website/./node_modules/react-markdown/node_modules/micromark-core-commonmark/lib/setext-underline.js","webpack://ndalton-website/./node_modules/react-markdown/node_modules/micromark-util-html-tag-name/index.js","webpack://ndalton-website/./node_modules/react-markdown/node_modules/micromark-core-commonmark/lib/html-flow.js","webpack://ndalton-website/./node_modules/react-markdown/node_modules/micromark-core-commonmark/lib/code-fenced.js","webpack://ndalton-website/./node_modules/decode-named-character-reference/index.dom.js","webpack://ndalton-website/./node_modules/react-markdown/node_modules/micromark-core-commonmark/lib/character-reference.js","webpack://ndalton-website/./node_modules/react-markdown/node_modules/micromark-core-commonmark/lib/character-escape.js","webpack://ndalton-website/./node_modules/react-markdown/node_modules/micromark-core-commonmark/lib/line-ending.js","webpack://ndalton-website/./node_modules/react-markdown/node_modules/micromark-core-commonmark/lib/label-end.js","webpack://ndalton-website/./node_modules/react-markdown/node_modules/micromark-core-commonmark/lib/label-start-image.js","webpack://ndalton-website/./node_modules/react-markdown/node_modules/micromark-util-classify-character/index.js","webpack://ndalton-website/./node_modules/react-markdown/node_modules/micromark-core-commonmark/lib/attention.js","webpack://ndalton-website/./node_modules/react-markdown/node_modules/micromark-core-commonmark/lib/autolink.js","webpack://ndalton-website/./node_modules/react-markdown/node_modules/micromark-core-commonmark/lib/html-text.js","webpack://ndalton-website/./node_modules/react-markdown/node_modules/micromark-core-commonmark/lib/label-start-link.js","webpack://ndalton-website/./node_modules/react-markdown/node_modules/micromark-core-commonmark/lib/hard-break-escape.js","webpack://ndalton-website/./node_modules/react-markdown/node_modules/micromark-core-commonmark/lib/code-text.js","webpack://ndalton-website/./node_modules/react-markdown/node_modules/micromark/lib/constructs.js","webpack://ndalton-website/./node_modules/react-markdown/node_modules/micromark/lib/parse.js","webpack://ndalton-website/./node_modules/react-markdown/node_modules/micromark/lib/preprocess.js","webpack://ndalton-website/./node_modules/react-markdown/node_modules/micromark-util-decode-numeric-character-reference/index.js","webpack://ndalton-website/./node_modules/react-markdown/node_modules/micromark-util-decode-string/index.js","webpack://ndalton-website/./node_modules/react-markdown/node_modules/mdast-util-from-markdown/lib/index.js","webpack://ndalton-website/./node_modules/react-markdown/node_modules/micromark/lib/postprocess.js","webpack://ndalton-website/./node_modules/react-markdown/node_modules/remark-parse/lib/index.js","webpack://ndalton-website/./node_modules/remark-rehype/node_modules/micromark-util-character/index.js","webpack://ndalton-website/./node_modules/remark-rehype/node_modules/micromark-util-character/lib/unicode-punctuation-regex.js","webpack://ndalton-website/./node_modules/remark-rehype/node_modules/micromark-util-sanitize-uri/index.js","webpack://ndalton-website/./node_modules/remark-rehype/node_modules/unist-util-is/lib/index.js","webpack://ndalton-website/./node_modules/remark-rehype/node_modules/unist-util-visit-parents/lib/index.js","webpack://ndalton-website/./node_modules/remark-rehype/node_modules/unist-util-visit/lib/index.js","webpack://ndalton-website/./node_modules/remark-rehype/node_modules/unist-util-position/lib/index.js","webpack://ndalton-website/./node_modules/remark-rehype/node_modules/mdast-util-definitions/lib/index.js","webpack://ndalton-website/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/footnote-reference.js","webpack://ndalton-website/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/revert.js","webpack://ndalton-website/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/list-item.js","webpack://ndalton-website/./node_modules/trim-lines/index.js","webpack://ndalton-website/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/index.js","webpack://ndalton-website/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/blockquote.js","webpack://ndalton-website/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/break.js","webpack://ndalton-website/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/code.js","webpack://ndalton-website/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/delete.js","webpack://ndalton-website/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/emphasis.js","webpack://ndalton-website/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/footnote.js","webpack://ndalton-website/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/heading.js","webpack://ndalton-website/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/html.js","webpack://ndalton-website/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/image-reference.js","webpack://ndalton-website/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/image.js","webpack://ndalton-website/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/inline-code.js","webpack://ndalton-website/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/link-reference.js","webpack://ndalton-website/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/link.js","webpack://ndalton-website/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/list.js","webpack://ndalton-website/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/paragraph.js","webpack://ndalton-website/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/root.js","webpack://ndalton-website/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/strong.js","webpack://ndalton-website/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/table.js","webpack://ndalton-website/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/table-cell.js","webpack://ndalton-website/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/table-row.js","webpack://ndalton-website/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/text.js","webpack://ndalton-website/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/thematic-break.js","webpack://ndalton-website/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/state.js","webpack://ndalton-website/./node_modules/remark-rehype/node_modules/unist-util-generated/lib/index.js","webpack://ndalton-website/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/index.js","webpack://ndalton-website/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/footer.js","webpack://ndalton-website/./node_modules/remark-rehype/lib/index.js","webpack://ndalton-website/./node_modules/react-markdown/node_modules/property-information/lib/util/schema.js","webpack://ndalton-website/./node_modules/react-markdown/node_modules/property-information/lib/util/merge.js","webpack://ndalton-website/./node_modules/react-markdown/node_modules/property-information/lib/normalize.js","webpack://ndalton-website/./node_modules/react-markdown/node_modules/property-information/lib/util/info.js","webpack://ndalton-website/./node_modules/react-markdown/node_modules/property-information/lib/util/types.js","webpack://ndalton-website/./node_modules/react-markdown/node_modules/property-information/lib/util/defined-info.js","webpack://ndalton-website/./node_modules/react-markdown/node_modules/property-information/lib/util/create.js","webpack://ndalton-website/./node_modules/react-markdown/node_modules/property-information/lib/xlink.js","webpack://ndalton-website/./node_modules/react-markdown/node_modules/property-information/lib/xml.js","webpack://ndalton-website/./node_modules/react-markdown/node_modules/property-information/lib/util/case-sensitive-transform.js","webpack://ndalton-website/./node_modules/react-markdown/node_modules/property-information/lib/util/case-insensitive-transform.js","webpack://ndalton-website/./node_modules/react-markdown/node_modules/property-information/lib/xmlns.js","webpack://ndalton-website/./node_modules/react-markdown/node_modules/property-information/lib/aria.js","webpack://ndalton-website/./node_modules/react-markdown/node_modules/property-information/lib/html.js","webpack://ndalton-website/./node_modules/react-markdown/node_modules/property-information/lib/svg.js","webpack://ndalton-website/./node_modules/react-markdown/node_modules/property-information/index.js","webpack://ndalton-website/./node_modules/react-markdown/node_modules/unist-util-is/lib/index.js","webpack://ndalton-website/./node_modules/react-markdown/node_modules/unist-util-visit-parents/lib/index.js","webpack://ndalton-website/./node_modules/react-markdown/node_modules/unist-util-visit/lib/index.js","webpack://ndalton-website/./node_modules/react-markdown/lib/rehype-filter.js","webpack://ndalton-website/./node_modules/react-markdown/node_modules/hast-util-whitespace/index.js","webpack://ndalton-website/./node_modules/react-markdown/node_modules/property-information/lib/find.js","webpack://ndalton-website/./node_modules/react-markdown/node_modules/property-information/lib/hast-to-react.js","webpack://ndalton-website/./node_modules/style-to-object/index.mjs","webpack://ndalton-website/./node_modules/react-markdown/lib/uri-transformer.js","webpack://ndalton-website/./node_modules/react-markdown/lib/ast-to-react.js","webpack://ndalton-website/./node_modules/react-markdown/node_modules/comma-separated-tokens/index.js","webpack://ndalton-website/./node_modules/react-markdown/node_modules/space-separated-tokens/index.js","webpack://ndalton-website/./node_modules/react-markdown/lib/react-markdown.js","webpack://ndalton-website/./node_modules/mdast-util-gfm-autolink-literal/node_modules/ccount/index.js","webpack://ndalton-website/./node_modules/micromark-util-character/index.js","webpack://ndalton-website/./node_modules/mdast-util-find-and-replace/node_modules/unist-util-is/lib/index.js","webpack://ndalton-website/./node_modules/mdast-util-find-and-replace/node_modules/unist-util-visit-parents/lib/index.js","webpack://ndalton-website/./node_modules/mdast-util-find-and-replace/lib/index.js","webpack://ndalton-website/./node_modules/mdast-util-find-and-replace/node_modules/escape-string-regexp/index.js","webpack://ndalton-website/./node_modules/mdast-util-gfm-autolink-literal/lib/index.js","webpack://ndalton-website/./node_modules/micromark-util-normalize-identifier/index.js","webpack://ndalton-website/./node_modules/mdast-util-gfm-footnote/lib/index.js","webpack://ndalton-website/./node_modules/mdast-util-gfm-strikethrough/lib/index.js","webpack://ndalton-website/./node_modules/markdown-table/index.js","webpack://ndalton-website/./node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/handle/blockquote.js","webpack://ndalton-website/./node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/util/pattern-in-scope.js","webpack://ndalton-website/./node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/handle/break.js","webpack://ndalton-website/./node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/handle/code.js","webpack://ndalton-website/./node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/util/check-quote.js","webpack://ndalton-website/./node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/handle/emphasis.js","webpack://ndalton-website/./node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/util/check-emphasis.js","webpack://ndalton-website/./node_modules/mdast-util-gfm-table/node_modules/unist-util-is/lib/index.js","webpack://ndalton-website/./node_modules/mdast-util-gfm-table/node_modules/unist-util-visit-parents/lib/index.js","webpack://ndalton-website/./node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-string/lib/index.js","webpack://ndalton-website/./node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/util/format-heading-as-setext.js","webpack://ndalton-website/./node_modules/mdast-util-gfm-table/node_modules/unist-util-visit/lib/index.js","webpack://ndalton-website/./node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/handle/html.js","webpack://ndalton-website/./node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/handle/image.js","webpack://ndalton-website/./node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/handle/image-reference.js","webpack://ndalton-website/./node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/handle/inline-code.js","webpack://ndalton-website/./node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/util/format-link-as-autolink.js","webpack://ndalton-website/./node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/handle/link.js","webpack://ndalton-website/./node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/handle/link-reference.js","webpack://ndalton-website/./node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/util/check-bullet.js","webpack://ndalton-website/./node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/util/check-rule.js","webpack://ndalton-website/./node_modules/mdast-util-phrasing/node_modules/unist-util-is/lib/index.js","webpack://ndalton-website/./node_modules/mdast-util-phrasing/lib/index.js","webpack://ndalton-website/./node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/handle/strong.js","webpack://ndalton-website/./node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/util/check-strong.js","webpack://ndalton-website/./node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/handle/index.js","webpack://ndalton-website/./node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/util/check-fence.js","webpack://ndalton-website/./node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/util/format-code-as-indented.js","webpack://ndalton-website/./node_modules/mdast-util-gfm-table/node_modules/longest-streak/index.js","webpack://ndalton-website/./node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/handle/definition.js","webpack://ndalton-website/./node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/handle/heading.js","webpack://ndalton-website/./node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/handle/list.js","webpack://ndalton-website/./node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/util/check-bullet-ordered.js","webpack://ndalton-website/./node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/util/check-bullet-other.js","webpack://ndalton-website/./node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/handle/list-item.js","webpack://ndalton-website/./node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/util/check-list-item-indent.js","webpack://ndalton-website/./node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/handle/paragraph.js","webpack://ndalton-website/./node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/handle/root.js","webpack://ndalton-website/./node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/handle/text.js","webpack://ndalton-website/./node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/handle/thematic-break.js","webpack://ndalton-website/./node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/util/check-rule-repetition.js","webpack://ndalton-website/./node_modules/mdast-util-gfm-table/lib/index.js","webpack://ndalton-website/./node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/handle/blockquote.js","webpack://ndalton-website/./node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/util/pattern-in-scope.js","webpack://ndalton-website/./node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/handle/break.js","webpack://ndalton-website/./node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/handle/code.js","webpack://ndalton-website/./node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/util/check-quote.js","webpack://ndalton-website/./node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/handle/emphasis.js","webpack://ndalton-website/./node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/util/check-emphasis.js","webpack://ndalton-website/./node_modules/mdast-util-gfm-task-list-item/node_modules/unist-util-is/lib/index.js","webpack://ndalton-website/./node_modules/mdast-util-gfm-task-list-item/node_modules/unist-util-visit-parents/lib/index.js","webpack://ndalton-website/./node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-string/lib/index.js","webpack://ndalton-website/./node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/util/format-heading-as-setext.js","webpack://ndalton-website/./node_modules/mdast-util-gfm-task-list-item/node_modules/unist-util-visit/lib/index.js","webpack://ndalton-website/./node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/handle/html.js","webpack://ndalton-website/./node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/handle/image.js","webpack://ndalton-website/./node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/handle/image-reference.js","webpack://ndalton-website/./node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/handle/inline-code.js","webpack://ndalton-website/./node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/util/format-link-as-autolink.js","webpack://ndalton-website/./node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/handle/link.js","webpack://ndalton-website/./node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/handle/link-reference.js","webpack://ndalton-website/./node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/util/check-bullet.js","webpack://ndalton-website/./node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/util/check-rule.js","webpack://ndalton-website/./node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/handle/strong.js","webpack://ndalton-website/./node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/util/check-strong.js","webpack://ndalton-website/./node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/handle/index.js","webpack://ndalton-website/./node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/util/check-fence.js","webpack://ndalton-website/./node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/util/format-code-as-indented.js","webpack://ndalton-website/./node_modules/mdast-util-gfm-task-list-item/node_modules/longest-streak/index.js","webpack://ndalton-website/./node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/handle/definition.js","webpack://ndalton-website/./node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/handle/heading.js","webpack://ndalton-website/./node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/handle/list.js","webpack://ndalton-website/./node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/util/check-bullet-ordered.js","webpack://ndalton-website/./node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/util/check-bullet-other.js","webpack://ndalton-website/./node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/handle/list-item.js","webpack://ndalton-website/./node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/util/check-list-item-indent.js","webpack://ndalton-website/./node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/handle/paragraph.js","webpack://ndalton-website/./node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/handle/root.js","webpack://ndalton-website/./node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/handle/text.js","webpack://ndalton-website/./node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/handle/thematic-break.js","webpack://ndalton-website/./node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/util/check-rule-repetition.js","webpack://ndalton-website/./node_modules/mdast-util-gfm-task-list-item/lib/index.js","webpack://ndalton-website/./node_modules/micromark-util-chunked/index.js","webpack://ndalton-website/./node_modules/micromark-util-combine-extensions/index.js","webpack://ndalton-website/./node_modules/micromark-extension-gfm-autolink-literal/lib/syntax.js","webpack://ndalton-website/./node_modules/micromark-factory-space/index.js","webpack://ndalton-website/./node_modules/micromark-core-commonmark/lib/blank-line.js","webpack://ndalton-website/./node_modules/micromark-extension-gfm-footnote/lib/syntax.js","webpack://ndalton-website/./node_modules/micromark-util-classify-character/index.js","webpack://ndalton-website/./node_modules/micromark-util-resolve-all/index.js","webpack://ndalton-website/./node_modules/micromark-extension-gfm-strikethrough/lib/syntax.js","webpack://ndalton-website/./node_modules/micromark-extension-gfm-table/lib/edit-map.js","webpack://ndalton-website/./node_modules/micromark-extension-gfm-table/lib/infer.js","webpack://ndalton-website/./node_modules/micromark-extension-gfm-table/lib/syntax.js","webpack://ndalton-website/./node_modules/micromark-extension-gfm-task-list-item/lib/syntax.js","webpack://ndalton-website/./node_modules/micromark-extension-gfm/index.js","webpack://ndalton-website/./node_modules/remark-gfm/lib/index.js","webpack://ndalton-website/./node_modules/mdast-util-gfm/lib/index.js","webpack://ndalton-website/./src/components/section-about/index.jsx","webpack://ndalton-website/./src/components/section-blog/index.jsx","webpack://ndalton-website/./src/components/section-experience/index.jsx","webpack://ndalton-website/./src/components/section-projects/index.jsx","webpack://ndalton-website/./src/components/section-skills/index.jsx","webpack://ndalton-website/./src/pages/index.jsx","webpack://ndalton-website/./node_modules/inline-style-parser/index.js","webpack://ndalton-website/./node_modules/is-buffer/index.js","webpack://ndalton-website/./node_modules/react-markdown/node_modules/react-is/cjs/react-is.production.min.js","webpack://ndalton-website/./node_modules/react-markdown/node_modules/react-is/index.js","webpack://ndalton-website/./node_modules/style-to-object/index.js"],"sourcesContent":["'use strict';\n\nvar hasOwn = Object.prototype.hasOwnProperty;\nvar toStr = Object.prototype.toString;\nvar defineProperty = Object.defineProperty;\nvar gOPD = Object.getOwnPropertyDescriptor;\n\nvar isArray = function isArray(arr) {\n\tif (typeof Array.isArray === 'function') {\n\t\treturn Array.isArray(arr);\n\t}\n\n\treturn toStr.call(arr) === '[object Array]';\n};\n\nvar isPlainObject = function isPlainObject(obj) {\n\tif (!obj || toStr.call(obj) !== '[object Object]') {\n\t\treturn false;\n\t}\n\n\tvar hasOwnConstructor = hasOwn.call(obj, 'constructor');\n\tvar hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');\n\t// Not own constructor property must be Object\n\tif (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {\n\t\treturn false;\n\t}\n\n\t// Own properties are enumerated firstly, so to speed up,\n\t// if last one is own, then all properties are own.\n\tvar key;\n\tfor (key in obj) { /**/ }\n\n\treturn typeof key === 'undefined' || hasOwn.call(obj, key);\n};\n\n// If name is '__proto__', and Object.defineProperty is available, define __proto__ as an own property on target\nvar setProperty = function setProperty(target, options) {\n\tif (defineProperty && options.name === '__proto__') {\n\t\tdefineProperty(target, options.name, {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: true,\n\t\t\tvalue: options.newValue,\n\t\t\twritable: true\n\t\t});\n\t} else {\n\t\ttarget[options.name] = options.newValue;\n\t}\n};\n\n// Return undefined instead of __proto__ if '__proto__' is not an own property\nvar getProperty = function getProperty(obj, name) {\n\tif (name === '__proto__') {\n\t\tif (!hasOwn.call(obj, name)) {\n\t\t\treturn void 0;\n\t\t} else if (gOPD) {\n\t\t\t// In early versions of node, obj['__proto__'] is buggy when obj has\n\t\t\t// __proto__ as an own property. Object.getOwnPropertyDescriptor() works.\n\t\t\treturn gOPD(obj, name).value;\n\t\t}\n\t}\n\n\treturn obj[name];\n};\n\nmodule.exports = function extend() {\n\tvar options, name, src, copy, copyIsArray, clone;\n\tvar target = arguments[0];\n\tvar i = 1;\n\tvar length = arguments.length;\n\tvar deep = false;\n\n\t// Handle a deep copy situation\n\tif (typeof target === 'boolean') {\n\t\tdeep = target;\n\t\ttarget = arguments[1] || {};\n\t\t// skip the boolean and the target\n\t\ti = 2;\n\t}\n\tif (target == null || (typeof target !== 'object' && typeof target !== 'function')) {\n\t\ttarget = {};\n\t}\n\n\tfor (; i < length; ++i) {\n\t\toptions = arguments[i];\n\t\t// Only deal with non-null/undefined values\n\t\tif (options != null) {\n\t\t\t// Extend the base object\n\t\t\tfor (name in options) {\n\t\t\t\tsrc = getProperty(target, name);\n\t\t\t\tcopy = getProperty(options, name);\n\n\t\t\t\t// Prevent never-ending loop\n\t\t\t\tif (target !== copy) {\n\t\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\t\tif (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {\n\t\t\t\t\t\tif (copyIsArray) {\n\t\t\t\t\t\t\tcopyIsArray = false;\n\t\t\t\t\t\t\tclone = src && isArray(src) ? src : [];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tclone = src && isPlainObject(src) ? src : {};\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: extend(deep, clone, copy) });\n\n\t\t\t\t\t// Don't bring in undefined values\n\t\t\t\t\t} else if (typeof copy !== 'undefined') {\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: copy });\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Return the modified object\n\treturn target;\n};\n","import React from 'react';\n\nconst classes = {\n  wrapper: 'block pt-12 md:flex',\n  title: 'pb-6 md:w-full md:max-w-150 md:p-0',\n  heading:\n    'font-xs font-light tracking-widest text-sm text-gray-600 leading-normal uppercase',\n  content: 'flex-none text-lg text-gray-600 font-light md:flex-1 md:pl-20',\n};\n\nconst Section = ({ title, children }) => {\n  return (\n    <div className={classes.wrapper}>\n      <div className={classes.title}>\n        <h2 className={classes.heading}>{title}</h2>\n      </div>\n      <div className={classes.content}>{children}</div>\n    </div>\n  );\n};\n\nexport default Section;\n","import { Link } from 'gatsby';\nimport React from 'react';\n\nconst classes = {\n  wrapper: 'mb-6',\n  name: 'font-semibold text-gray-900 pb-1',\n  description: 'text-md text-gray-600 font-light',\n};\n\nconst SummaryItem = ({ name, description, link = false, internal = false }) => {\n  let linkContent;\n  if (internal) {\n    linkContent = <Link to={link}>{name}</Link>;\n  } else {\n    linkContent = <a href={link}>{name}</a>;\n  }\n\n  return (\n    <div className={classes.wrapper}>\n      <h3\n        className={`${classes.name} ${\n          link ? 'hover:underline hover:text-black' : ''\n        }`}\n      >\n        {link ? linkContent : name}\n      </h3>\n      <p className={classes.description}>{description}</p>\n    </div>\n  );\n};\n\nexport default SummaryItem;\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n */\n\n/**\n * Serialize the positional info of a point, position (start and end points),\n * or node.\n *\n * @param {Node | NodeLike | Position | PositionLike | Point | PointLike | null | undefined} [value]\n *   Node, position, or point.\n * @returns {string}\n *   Pretty printed positional info of a node (`string`).\n *\n *   In the format of a range `ls:cs-le:ce` (when given `node` or `position`)\n *   or a point `l:c` (when given `point`), where `l` stands for line, `c` for\n *   column, `s` for `start`, and `e` for end.\n *   An empty string (`''`) is returned if the given value is neither `node`,\n *   `position`, nor `point`.\n */\nexport function stringifyPosition(value) {\n  // Nothing.\n  if (!value || typeof value !== 'object') {\n    return ''\n  }\n\n  // Node.\n  if ('position' in value || 'type' in value) {\n    return position(value.position)\n  }\n\n  // Position.\n  if ('start' in value || 'end' in value) {\n    return position(value)\n  }\n\n  // Point.\n  if ('line' in value || 'column' in value) {\n    return point(value)\n  }\n\n  // ?\n  return ''\n}\n\n/**\n * @param {Point | PointLike | null | undefined} point\n * @returns {string}\n */\nfunction point(point) {\n  return index(point && point.line) + ':' + index(point && point.column)\n}\n\n/**\n * @param {Position | PositionLike | null | undefined} pos\n * @returns {string}\n */\nfunction position(pos) {\n  return point(pos && pos.start) + '-' + point(pos && pos.end)\n}\n\n/**\n * @param {number | null | undefined} value\n * @returns {number}\n */\nfunction index(value) {\n  return value && typeof value === 'number' ? value : 1\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Position} Position\n * @typedef {import('unist').Point} Point\n * @typedef {object & {type: string, position?: Position | undefined}} NodeLike\n */\n\nimport {stringifyPosition} from 'unist-util-stringify-position'\n\n/**\n * Message.\n */\nexport class VFileMessage extends Error {\n  /**\n   * Create a message for `reason` at `place` from `origin`.\n   *\n   * When an error is passed in as `reason`, the `stack` is copied.\n   *\n   * @param {string | Error | VFileMessage} reason\n   *   Reason for message, uses the stack and message of the error if given.\n   *\n   *   > 👉 **Note**: you should use markdown.\n   * @param {Node | NodeLike | Position | Point | null | undefined} [place]\n   *   Place in file where the message occurred.\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns\n   *   Instance of `VFileMessage`.\n   */\n  // To do: next major: expose `undefined` everywhere instead of `null`.\n  constructor(reason, place, origin) {\n    /** @type {[string | null, string | null]} */\n    const parts = [null, null]\n    /** @type {Position} */\n    let position = {\n      // @ts-expect-error: we always follows the structure of `position`.\n      start: {line: null, column: null},\n      // @ts-expect-error: \"\n      end: {line: null, column: null}\n    }\n\n    super()\n\n    if (typeof place === 'string') {\n      origin = place\n      place = undefined\n    }\n\n    if (typeof origin === 'string') {\n      const index = origin.indexOf(':')\n\n      if (index === -1) {\n        parts[1] = origin\n      } else {\n        parts[0] = origin.slice(0, index)\n        parts[1] = origin.slice(index + 1)\n      }\n    }\n\n    if (place) {\n      // Node.\n      if ('type' in place || 'position' in place) {\n        if (place.position) {\n          // To do: next major: deep clone.\n          // @ts-expect-error: looks like a position.\n          position = place.position\n        }\n      }\n      // Position.\n      else if ('start' in place || 'end' in place) {\n        // @ts-expect-error: looks like a position.\n        // To do: next major: deep clone.\n        position = place\n      }\n      // Point.\n      else if ('line' in place || 'column' in place) {\n        // To do: next major: deep clone.\n        position.start = place\n      }\n    }\n\n    // Fields from `Error`.\n    /**\n     * Serialized positional info of error.\n     *\n     * On normal errors, this would be something like `ParseError`, buit in\n     * `VFile` messages we use this space to show where an error happened.\n     */\n    this.name = stringifyPosition(place) || '1:1'\n\n    /**\n     * Reason for message.\n     *\n     * @type {string}\n     */\n    this.message = typeof reason === 'object' ? reason.message : reason\n\n    /**\n     * Stack of message.\n     *\n     * This is used by normal errors to show where something happened in\n     * programming code, irrelevant for `VFile` messages,\n     *\n     * @type {string}\n     */\n    this.stack = ''\n\n    if (typeof reason === 'object' && reason.stack) {\n      this.stack = reason.stack\n    }\n\n    /**\n     * Reason for message.\n     *\n     * > 👉 **Note**: you should use markdown.\n     *\n     * @type {string}\n     */\n    this.reason = this.message\n\n    /* eslint-disable no-unused-expressions */\n    /**\n     * State of problem.\n     *\n     * * `true` — marks associated file as no longer processable (error)\n     * * `false` — necessitates a (potential) change (warning)\n     * * `null | undefined` — for things that might not need changing (info)\n     *\n     * @type {boolean | null | undefined}\n     */\n    this.fatal\n\n    /**\n     * Starting line of error.\n     *\n     * @type {number | null}\n     */\n    this.line = position.start.line\n\n    /**\n     * Starting column of error.\n     *\n     * @type {number | null}\n     */\n    this.column = position.start.column\n\n    /**\n     * Full unist position.\n     *\n     * @type {Position | null}\n     */\n    this.position = position\n\n    /**\n     * Namespace of message (example: `'my-package'`).\n     *\n     * @type {string | null}\n     */\n    this.source = parts[0]\n\n    /**\n     * Category of message (example: `'my-rule'`).\n     *\n     * @type {string | null}\n     */\n    this.ruleId = parts[1]\n\n    /**\n     * Path of a file (used throughout the `VFile` ecosystem).\n     *\n     * @type {string | null}\n     */\n    this.file\n\n    // The following fields are “well known”.\n    // Not standard.\n    // Feel free to add other non-standard fields to your messages.\n\n    /**\n     * Specify the source value that’s being reported, which is deemed\n     * incorrect.\n     *\n     * @type {string | null}\n     */\n    this.actual\n\n    /**\n     * Suggest acceptable values that can be used instead of `actual`.\n     *\n     * @type {Array<string> | null}\n     */\n    this.expected\n\n    /**\n     * Link to docs for the message.\n     *\n     * > 👉 **Note**: this must be an absolute URL that can be passed as `x`\n     * > to `new URL(x)`.\n     *\n     * @type {string | null}\n     */\n    this.url\n\n    /**\n     * Long form description of the message (you should use markdown).\n     *\n     * @type {string | null}\n     */\n    this.note\n    /* eslint-enable no-unused-expressions */\n  }\n}\n\nVFileMessage.prototype.file = ''\nVFileMessage.prototype.name = ''\nVFileMessage.prototype.reason = ''\nVFileMessage.prototype.message = ''\nVFileMessage.prototype.stack = ''\nVFileMessage.prototype.fatal = null\nVFileMessage.prototype.column = null\nVFileMessage.prototype.line = null\nVFileMessage.prototype.source = null\nVFileMessage.prototype.ruleId = null\nVFileMessage.prototype.position = null\n","// A derivative work based on:\n// <https://github.com/browserify/path-browserify>.\n// Which is licensed:\n//\n// MIT License\n//\n// Copyright (c) 2013 James Halliday\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy of\n// this software and associated documentation files (the \"Software\"), to deal in\n// the Software without restriction, including without limitation the rights to\n// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\n// the Software, and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n// FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n// IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n// A derivative work based on:\n//\n// Parts of that are extracted from Node’s internal `path` module:\n// <https://github.com/nodejs/node/blob/master/lib/path.js>.\n// Which is licensed:\n//\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nexport const path = {basename, dirname, extname, join, sep: '/'}\n\n/* eslint-disable max-depth, complexity */\n\n/**\n * Get the basename from a path.\n *\n * @param {string} path\n *   File path.\n * @param {string | undefined} [ext]\n *   Extension to strip.\n * @returns {string}\n *   Stem or basename.\n */\nfunction basename(path, ext) {\n  if (ext !== undefined && typeof ext !== 'string') {\n    throw new TypeError('\"ext\" argument must be a string')\n  }\n\n  assertPath(path)\n  let start = 0\n  let end = -1\n  let index = path.length\n  /** @type {boolean | undefined} */\n  let seenNonSlash\n\n  if (ext === undefined || ext.length === 0 || ext.length > path.length) {\n    while (index--) {\n      if (path.charCodeAt(index) === 47 /* `/` */) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now.\n        if (seenNonSlash) {\n          start = index + 1\n          break\n        }\n      } else if (end < 0) {\n        // We saw the first non-path separator, mark this as the end of our\n        // path component.\n        seenNonSlash = true\n        end = index + 1\n      }\n    }\n\n    return end < 0 ? '' : path.slice(start, end)\n  }\n\n  if (ext === path) {\n    return ''\n  }\n\n  let firstNonSlashEnd = -1\n  let extIndex = ext.length - 1\n\n  while (index--) {\n    if (path.charCodeAt(index) === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (seenNonSlash) {\n        start = index + 1\n        break\n      }\n    } else {\n      if (firstNonSlashEnd < 0) {\n        // We saw the first non-path separator, remember this index in case\n        // we need it if the extension ends up not matching.\n        seenNonSlash = true\n        firstNonSlashEnd = index + 1\n      }\n\n      if (extIndex > -1) {\n        // Try to match the explicit extension.\n        if (path.charCodeAt(index) === ext.charCodeAt(extIndex--)) {\n          if (extIndex < 0) {\n            // We matched the extension, so mark this as the end of our path\n            // component\n            end = index\n          }\n        } else {\n          // Extension does not match, so our result is the entire path\n          // component\n          extIndex = -1\n          end = firstNonSlashEnd\n        }\n      }\n    }\n  }\n\n  if (start === end) {\n    end = firstNonSlashEnd\n  } else if (end < 0) {\n    end = path.length\n  }\n\n  return path.slice(start, end)\n}\n\n/**\n * Get the dirname from a path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   File path.\n */\nfunction dirname(path) {\n  assertPath(path)\n\n  if (path.length === 0) {\n    return '.'\n  }\n\n  let end = -1\n  let index = path.length\n  /** @type {boolean | undefined} */\n  let unmatchedSlash\n\n  // Prefix `--` is important to not run on `0`.\n  while (--index) {\n    if (path.charCodeAt(index) === 47 /* `/` */) {\n      if (unmatchedSlash) {\n        end = index\n        break\n      }\n    } else if (!unmatchedSlash) {\n      // We saw the first non-path separator\n      unmatchedSlash = true\n    }\n  }\n\n  return end < 0\n    ? path.charCodeAt(0) === 47 /* `/` */\n      ? '/'\n      : '.'\n    : end === 1 && path.charCodeAt(0) === 47 /* `/` */\n    ? '//'\n    : path.slice(0, end)\n}\n\n/**\n * Get an extname from a path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   Extname.\n */\nfunction extname(path) {\n  assertPath(path)\n\n  let index = path.length\n\n  let end = -1\n  let startPart = 0\n  let startDot = -1\n  // Track the state of characters (if any) we see before our first dot and\n  // after any path separator we find.\n  let preDotState = 0\n  /** @type {boolean | undefined} */\n  let unmatchedSlash\n\n  while (index--) {\n    const code = path.charCodeAt(index)\n\n    if (code === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (unmatchedSlash) {\n        startPart = index + 1\n        break\n      }\n\n      continue\n    }\n\n    if (end < 0) {\n      // We saw the first non-path separator, mark this as the end of our\n      // extension.\n      unmatchedSlash = true\n      end = index + 1\n    }\n\n    if (code === 46 /* `.` */) {\n      // If this is our first dot, mark it as the start of our extension.\n      if (startDot < 0) {\n        startDot = index\n      } else if (preDotState !== 1) {\n        preDotState = 1\n      }\n    } else if (startDot > -1) {\n      // We saw a non-dot and non-path separator before our dot, so we should\n      // have a good chance at having a non-empty extension.\n      preDotState = -1\n    }\n  }\n\n  if (\n    startDot < 0 ||\n    end < 0 ||\n    // We saw a non-dot character immediately before the dot.\n    preDotState === 0 ||\n    // The (right-most) trimmed path component is exactly `..`.\n    (preDotState === 1 && startDot === end - 1 && startDot === startPart + 1)\n  ) {\n    return ''\n  }\n\n  return path.slice(startDot, end)\n}\n\n/**\n * Join segments from a path.\n *\n * @param {Array<string>} segments\n *   Path segments.\n * @returns {string}\n *   File path.\n */\nfunction join(...segments) {\n  let index = -1\n  /** @type {string | undefined} */\n  let joined\n\n  while (++index < segments.length) {\n    assertPath(segments[index])\n\n    if (segments[index]) {\n      joined =\n        joined === undefined ? segments[index] : joined + '/' + segments[index]\n    }\n  }\n\n  return joined === undefined ? '.' : normalize(joined)\n}\n\n/**\n * Normalize a basic file path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   File path.\n */\n// Note: `normalize` is not exposed as `path.normalize`, so some code is\n// manually removed from it.\nfunction normalize(path) {\n  assertPath(path)\n\n  const absolute = path.charCodeAt(0) === 47 /* `/` */\n\n  // Normalize the path according to POSIX rules.\n  let value = normalizeString(path, !absolute)\n\n  if (value.length === 0 && !absolute) {\n    value = '.'\n  }\n\n  if (value.length > 0 && path.charCodeAt(path.length - 1) === 47 /* / */) {\n    value += '/'\n  }\n\n  return absolute ? '/' + value : value\n}\n\n/**\n * Resolve `.` and `..` elements in a path with directory names.\n *\n * @param {string} path\n *   File path.\n * @param {boolean} allowAboveRoot\n *   Whether `..` can move above root.\n * @returns {string}\n *   File path.\n */\nfunction normalizeString(path, allowAboveRoot) {\n  let result = ''\n  let lastSegmentLength = 0\n  let lastSlash = -1\n  let dots = 0\n  let index = -1\n  /** @type {number | undefined} */\n  let code\n  /** @type {number} */\n  let lastSlashIndex\n\n  while (++index <= path.length) {\n    if (index < path.length) {\n      code = path.charCodeAt(index)\n    } else if (code === 47 /* `/` */) {\n      break\n    } else {\n      code = 47 /* `/` */\n    }\n\n    if (code === 47 /* `/` */) {\n      if (lastSlash === index - 1 || dots === 1) {\n        // Empty.\n      } else if (lastSlash !== index - 1 && dots === 2) {\n        if (\n          result.length < 2 ||\n          lastSegmentLength !== 2 ||\n          result.charCodeAt(result.length - 1) !== 46 /* `.` */ ||\n          result.charCodeAt(result.length - 2) !== 46 /* `.` */\n        ) {\n          if (result.length > 2) {\n            lastSlashIndex = result.lastIndexOf('/')\n\n            if (lastSlashIndex !== result.length - 1) {\n              if (lastSlashIndex < 0) {\n                result = ''\n                lastSegmentLength = 0\n              } else {\n                result = result.slice(0, lastSlashIndex)\n                lastSegmentLength = result.length - 1 - result.lastIndexOf('/')\n              }\n\n              lastSlash = index\n              dots = 0\n              continue\n            }\n          } else if (result.length > 0) {\n            result = ''\n            lastSegmentLength = 0\n            lastSlash = index\n            dots = 0\n            continue\n          }\n        }\n\n        if (allowAboveRoot) {\n          result = result.length > 0 ? result + '/..' : '..'\n          lastSegmentLength = 2\n        }\n      } else {\n        if (result.length > 0) {\n          result += '/' + path.slice(lastSlash + 1, index)\n        } else {\n          result = path.slice(lastSlash + 1, index)\n        }\n\n        lastSegmentLength = index - lastSlash - 1\n      }\n\n      lastSlash = index\n      dots = 0\n    } else if (code === 46 /* `.` */ && dots > -1) {\n      dots++\n    } else {\n      dots = -1\n    }\n  }\n\n  return result\n}\n\n/**\n * Make sure `path` is a string.\n *\n * @param {string} path\n *   File path.\n * @returns {asserts path is string}\n *   Nothing.\n */\nfunction assertPath(path) {\n  if (typeof path !== 'string') {\n    throw new TypeError(\n      'Path must be a string. Received ' + JSON.stringify(path)\n    )\n  }\n}\n\n/* eslint-enable max-depth, complexity */\n","// Somewhat based on:\n// <https://github.com/defunctzombie/node-process/blob/master/browser.js>.\n// But I don’t think one tiny line of code can be copyrighted. 😅\nexport const proc = {cwd}\n\nfunction cwd() {\n  return '/'\n}\n","/**\n * @typedef URL\n * @property {string} hash\n * @property {string} host\n * @property {string} hostname\n * @property {string} href\n * @property {string} origin\n * @property {string} password\n * @property {string} pathname\n * @property {string} port\n * @property {string} protocol\n * @property {string} search\n * @property {any} searchParams\n * @property {string} username\n * @property {() => string} toString\n * @property {() => string} toJSON\n */\n\n/**\n * Check if `fileUrlOrPath` looks like a URL.\n *\n * @param {unknown} fileUrlOrPath\n *   File path or URL.\n * @returns {fileUrlOrPath is URL}\n *   Whether it’s a URL.\n */\n// From: <https://github.com/nodejs/node/blob/fcf8ba4/lib/internal/url.js#L1501>\nexport function isUrl(fileUrlOrPath) {\n  return (\n    fileUrlOrPath !== null &&\n    typeof fileUrlOrPath === 'object' &&\n    // @ts-expect-error: indexable.\n    fileUrlOrPath.href &&\n    // @ts-expect-error: indexable.\n    fileUrlOrPath.origin\n  )\n}\n","/// <reference lib=\"dom\" />\n\nimport {isUrl} from './minurl.shared.js'\n\n// See: <https://github.com/nodejs/node/blob/fcf8ba4/lib/internal/url.js>\n\n/**\n * @param {string | URL} path\n *   File URL.\n * @returns {string}\n *   File URL.\n */\nexport function urlToPath(path) {\n  if (typeof path === 'string') {\n    path = new URL(path)\n  } else if (!isUrl(path)) {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError(\n      'The \"path\" argument must be of type string or an instance of URL. Received `' +\n        path +\n        '`'\n    )\n    error.code = 'ERR_INVALID_ARG_TYPE'\n    throw error\n  }\n\n  if (path.protocol !== 'file:') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError('The URL must be of scheme file')\n    error.code = 'ERR_INVALID_URL_SCHEME'\n    throw error\n  }\n\n  return getPathFromURLPosix(path)\n}\n\n/**\n * Get a path from a POSIX URL.\n *\n * @param {URL} url\n *   URL.\n * @returns {string}\n *   File path.\n */\nfunction getPathFromURLPosix(url) {\n  if (url.hostname !== '') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError(\n      'File URL host must be \"localhost\" or empty on darwin'\n    )\n    error.code = 'ERR_INVALID_FILE_URL_HOST'\n    throw error\n  }\n\n  const pathname = url.pathname\n  let index = -1\n\n  while (++index < pathname.length) {\n    if (\n      pathname.charCodeAt(index) === 37 /* `%` */ &&\n      pathname.charCodeAt(index + 1) === 50 /* `2` */\n    ) {\n      const third = pathname.charCodeAt(index + 2)\n      if (third === 70 /* `F` */ || third === 102 /* `f` */) {\n        /** @type {NodeJS.ErrnoException} */\n        const error = new TypeError(\n          'File URL path must not include encoded / characters'\n        )\n        error.code = 'ERR_INVALID_FILE_URL_PATH'\n        throw error\n      }\n    }\n  }\n\n  return decodeURIComponent(pathname)\n}\n\nexport {isUrl} from './minurl.shared.js'\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Position} Position\n * @typedef {import('unist').Point} Point\n * @typedef {import('./minurl.shared.js').URL} URL\n * @typedef {import('../index.js').Data} Data\n * @typedef {import('../index.js').Value} Value\n */\n\n/**\n * @typedef {Record<string, unknown> & {type: string, position?: Position | undefined}} NodeLike\n *\n * @typedef {'ascii' | 'utf8' | 'utf-8' | 'utf16le' | 'ucs2' | 'ucs-2' | 'base64' | 'base64url' | 'latin1' | 'binary' | 'hex'} BufferEncoding\n *   Encodings supported by the buffer class.\n *\n *   This is a copy of the types from Node, copied to prevent Node globals from\n *   being needed.\n *   Copied from: <https://github.com/DefinitelyTyped/DefinitelyTyped/blob/90a4ec8/types/node/buffer.d.ts#L170>\n *\n * @typedef {Options | URL | Value | VFile} Compatible\n *   Things that can be passed to the constructor.\n *\n * @typedef VFileCoreOptions\n *   Set multiple values.\n * @property {Value | null | undefined} [value]\n *   Set `value`.\n * @property {string | null | undefined} [cwd]\n *   Set `cwd`.\n * @property {Array<string> | null | undefined} [history]\n *   Set `history`.\n * @property {URL | string | null | undefined} [path]\n *   Set `path`.\n * @property {string | null | undefined} [basename]\n *   Set `basename`.\n * @property {string | null | undefined} [stem]\n *   Set `stem`.\n * @property {string | null | undefined} [extname]\n *   Set `extname`.\n * @property {string | null | undefined} [dirname]\n *   Set `dirname`.\n * @property {Data | null | undefined} [data]\n *   Set `data`.\n *\n * @typedef Map\n *   Raw source map.\n *\n *   See:\n *   <https://github.com/mozilla/source-map/blob/58819f0/source-map.d.ts#L15-L23>.\n * @property {number} version\n *   Which version of the source map spec this map is following.\n * @property {Array<string>} sources\n *   An array of URLs to the original source files.\n * @property {Array<string>} names\n *   An array of identifiers which can be referenced by individual mappings.\n * @property {string | undefined} [sourceRoot]\n *   The URL root from which all sources are relative.\n * @property {Array<string> | undefined} [sourcesContent]\n *   An array of contents of the original source files.\n * @property {string} mappings\n *   A string of base64 VLQs which contain the actual mappings.\n * @property {string} file\n *   The generated file this source map is associated with.\n *\n * @typedef {{[key: string]: unknown} & VFileCoreOptions} Options\n *   Configuration.\n *\n *   A bunch of keys that will be shallow copied over to the new file.\n *\n * @typedef {Record<string, unknown>} ReporterSettings\n *   Configuration for reporters.\n */\n\n/**\n * @template {ReporterSettings} Settings\n *   Options type.\n * @callback Reporter\n *   Type for a reporter.\n * @param {Array<VFile>} files\n *   Files to report.\n * @param {Settings} options\n *   Configuration.\n * @returns {string}\n *   Report.\n */\n\nimport bufferLike from 'is-buffer'\nimport {VFileMessage} from 'vfile-message'\nimport {path} from './minpath.js'\nimport {proc} from './minproc.js'\nimport {urlToPath, isUrl} from './minurl.js'\n\n/**\n * Order of setting (least specific to most), we need this because otherwise\n * `{stem: 'a', path: '~/b.js'}` would throw, as a path is needed before a\n * stem can be set.\n *\n * @type {Array<'basename' | 'dirname' | 'extname' | 'history' | 'path' | 'stem'>}\n */\nconst order = ['history', 'path', 'basename', 'stem', 'extname', 'dirname']\n\nexport class VFile {\n  /**\n   * Create a new virtual file.\n   *\n   * `options` is treated as:\n   *\n   * *   `string` or `Buffer` — `{value: options}`\n   * *   `URL` — `{path: options}`\n   * *   `VFile` — shallow copies its data over to the new file\n   * *   `object` — all fields are shallow copied over to the new file\n   *\n   * Path related fields are set in the following order (least specific to\n   * most specific): `history`, `path`, `basename`, `stem`, `extname`,\n   * `dirname`.\n   *\n   * You cannot set `dirname` or `extname` without setting either `history`,\n   * `path`, `basename`, or `stem` too.\n   *\n   * @param {Compatible | null | undefined} [value]\n   *   File value.\n   * @returns\n   *   New instance.\n   */\n  constructor(value) {\n    /** @type {Options | VFile} */\n    let options\n\n    if (!value) {\n      options = {}\n    } else if (typeof value === 'string' || buffer(value)) {\n      options = {value}\n    } else if (isUrl(value)) {\n      options = {path: value}\n    } else {\n      options = value\n    }\n\n    /**\n     * Place to store custom information (default: `{}`).\n     *\n     * It’s OK to store custom data directly on the file but moving it to\n     * `data` is recommended.\n     *\n     * @type {Data}\n     */\n    this.data = {}\n\n    /**\n     * List of messages associated with the file.\n     *\n     * @type {Array<VFileMessage>}\n     */\n    this.messages = []\n\n    /**\n     * List of filepaths the file moved between.\n     *\n     * The first is the original path and the last is the current path.\n     *\n     * @type {Array<string>}\n     */\n    this.history = []\n\n    /**\n     * Base of `path` (default: `process.cwd()` or `'/'` in browsers).\n     *\n     * @type {string}\n     */\n    this.cwd = proc.cwd()\n\n    /* eslint-disable no-unused-expressions */\n    /**\n     * Raw value.\n     *\n     * @type {Value}\n     */\n    this.value\n\n    // The below are non-standard, they are “well-known”.\n    // As in, used in several tools.\n\n    /**\n     * Whether a file was saved to disk.\n     *\n     * This is used by vfile reporters.\n     *\n     * @type {boolean}\n     */\n    this.stored\n\n    /**\n     * Custom, non-string, compiled, representation.\n     *\n     * This is used by unified to store non-string results.\n     * One example is when turning markdown into React nodes.\n     *\n     * @type {unknown}\n     */\n    this.result\n\n    /**\n     * Source map.\n     *\n     * This type is equivalent to the `RawSourceMap` type from the `source-map`\n     * module.\n     *\n     * @type {Map | null | undefined}\n     */\n    this.map\n    /* eslint-enable no-unused-expressions */\n\n    // Set path related properties in the correct order.\n    let index = -1\n\n    while (++index < order.length) {\n      const prop = order[index]\n\n      // Note: we specifically use `in` instead of `hasOwnProperty` to accept\n      // `vfile`s too.\n      if (\n        prop in options &&\n        options[prop] !== undefined &&\n        options[prop] !== null\n      ) {\n        // @ts-expect-error: TS doesn’t understand basic reality.\n        this[prop] = prop === 'history' ? [...options[prop]] : options[prop]\n      }\n    }\n\n    /** @type {string} */\n    let prop\n\n    // Set non-path related properties.\n    for (prop in options) {\n      // @ts-expect-error: fine to set other things.\n      if (!order.includes(prop)) {\n        // @ts-expect-error: fine to set other things.\n        this[prop] = options[prop]\n      }\n    }\n  }\n\n  /**\n   * Get the full path (example: `'~/index.min.js'`).\n   *\n   * @returns {string}\n   */\n  get path() {\n    return this.history[this.history.length - 1]\n  }\n\n  /**\n   * Set the full path (example: `'~/index.min.js'`).\n   *\n   * Cannot be nullified.\n   * You can set a file URL (a `URL` object with a `file:` protocol) which will\n   * be turned into a path with `url.fileURLToPath`.\n   *\n   * @param {string | URL} path\n   */\n  set path(path) {\n    if (isUrl(path)) {\n      path = urlToPath(path)\n    }\n\n    assertNonEmpty(path, 'path')\n\n    if (this.path !== path) {\n      this.history.push(path)\n    }\n  }\n\n  /**\n   * Get the parent path (example: `'~'`).\n   */\n  get dirname() {\n    return typeof this.path === 'string' ? path.dirname(this.path) : undefined\n  }\n\n  /**\n   * Set the parent path (example: `'~'`).\n   *\n   * Cannot be set if there’s no `path` yet.\n   */\n  set dirname(dirname) {\n    assertPath(this.basename, 'dirname')\n    this.path = path.join(dirname || '', this.basename)\n  }\n\n  /**\n   * Get the basename (including extname) (example: `'index.min.js'`).\n   */\n  get basename() {\n    return typeof this.path === 'string' ? path.basename(this.path) : undefined\n  }\n\n  /**\n   * Set basename (including extname) (`'index.min.js'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   */\n  set basename(basename) {\n    assertNonEmpty(basename, 'basename')\n    assertPart(basename, 'basename')\n    this.path = path.join(this.dirname || '', basename)\n  }\n\n  /**\n   * Get the extname (including dot) (example: `'.js'`).\n   */\n  get extname() {\n    return typeof this.path === 'string' ? path.extname(this.path) : undefined\n  }\n\n  /**\n   * Set the extname (including dot) (example: `'.js'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be set if there’s no `path` yet.\n   */\n  set extname(extname) {\n    assertPart(extname, 'extname')\n    assertPath(this.dirname, 'extname')\n\n    if (extname) {\n      if (extname.charCodeAt(0) !== 46 /* `.` */) {\n        throw new Error('`extname` must start with `.`')\n      }\n\n      if (extname.includes('.', 1)) {\n        throw new Error('`extname` cannot contain multiple dots')\n      }\n    }\n\n    this.path = path.join(this.dirname, this.stem + (extname || ''))\n  }\n\n  /**\n   * Get the stem (basename w/o extname) (example: `'index.min'`).\n   */\n  get stem() {\n    return typeof this.path === 'string'\n      ? path.basename(this.path, this.extname)\n      : undefined\n  }\n\n  /**\n   * Set the stem (basename w/o extname) (example: `'index.min'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   */\n  set stem(stem) {\n    assertNonEmpty(stem, 'stem')\n    assertPart(stem, 'stem')\n    this.path = path.join(this.dirname || '', stem + (this.extname || ''))\n  }\n\n  /**\n   * Serialize the file.\n   *\n   * @param {BufferEncoding | null | undefined} [encoding='utf8']\n   *   Character encoding to understand `value` as when it’s a `Buffer`\n   *   (default: `'utf8'`).\n   * @returns {string}\n   *   Serialized file.\n   */\n  toString(encoding) {\n    return (this.value || '').toString(encoding || undefined)\n  }\n\n  /**\n   * Create a warning message associated with the file.\n   *\n   * Its `fatal` is set to `false` and `file` is set to the current file path.\n   * Its added to `file.messages`.\n   *\n   * @param {string | Error | VFileMessage} reason\n   *   Reason for message, uses the stack and message of the error if given.\n   * @param {Node | NodeLike | Position | Point | null | undefined} [place]\n   *   Place in file where the message occurred.\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  message(reason, place, origin) {\n    const message = new VFileMessage(reason, place, origin)\n\n    if (this.path) {\n      message.name = this.path + ':' + message.name\n      message.file = this.path\n    }\n\n    message.fatal = false\n\n    this.messages.push(message)\n\n    return message\n  }\n\n  /**\n   * Create an info message associated with the file.\n   *\n   * Its `fatal` is set to `null` and `file` is set to the current file path.\n   * Its added to `file.messages`.\n   *\n   * @param {string | Error | VFileMessage} reason\n   *   Reason for message, uses the stack and message of the error if given.\n   * @param {Node | NodeLike | Position | Point | null | undefined} [place]\n   *   Place in file where the message occurred.\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  info(reason, place, origin) {\n    const message = this.message(reason, place, origin)\n\n    message.fatal = null\n\n    return message\n  }\n\n  /**\n   * Create a fatal error associated with the file.\n   *\n   * Its `fatal` is set to `true` and `file` is set to the current file path.\n   * Its added to `file.messages`.\n   *\n   * > 👉 **Note**: a fatal error means that a file is no longer processable.\n   *\n   * @param {string | Error | VFileMessage} reason\n   *   Reason for message, uses the stack and message of the error if given.\n   * @param {Node | NodeLike | Position | Point | null | undefined} [place]\n   *   Place in file where the message occurred.\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {never}\n   *   Message.\n   * @throws {VFileMessage}\n   *   Message.\n   */\n  fail(reason, place, origin) {\n    const message = this.message(reason, place, origin)\n\n    message.fatal = true\n\n    throw message\n  }\n}\n\n/**\n * Assert that `part` is not a path (as in, does not contain `path.sep`).\n *\n * @param {string | null | undefined} part\n *   File path part.\n * @param {string} name\n *   Part name.\n * @returns {void}\n *   Nothing.\n */\nfunction assertPart(part, name) {\n  if (part && part.includes(path.sep)) {\n    throw new Error(\n      '`' + name + '` cannot be a path: did not expect `' + path.sep + '`'\n    )\n  }\n}\n\n/**\n * Assert that `part` is not empty.\n *\n * @param {string | undefined} part\n *   Thing.\n * @param {string} name\n *   Part name.\n * @returns {asserts part is string}\n *   Nothing.\n */\nfunction assertNonEmpty(part, name) {\n  if (!part) {\n    throw new Error('`' + name + '` cannot be empty')\n  }\n}\n\n/**\n * Assert `path` exists.\n *\n * @param {string | undefined} path\n *   Path.\n * @param {string} name\n *   Dependency name.\n * @returns {asserts path is string}\n *   Nothing.\n */\nfunction assertPath(path, name) {\n  if (!path) {\n    throw new Error('Setting `' + name + '` requires `path` to be set too')\n  }\n}\n\n/**\n * Assert `value` is a buffer.\n *\n * @param {unknown} value\n *   thing.\n * @returns {value is Buffer}\n *   Whether `value` is a Node.js buffer.\n */\nfunction buffer(value) {\n  return bufferLike(value)\n}\n","/**\n * Throw a given error.\n *\n * @param {Error|null|undefined} [error]\n *   Maybe error.\n * @returns {asserts error is null|undefined}\n */\nexport function bail(error) {\n  if (error) {\n    throw error\n  }\n}\n","export default function isPlainObject(value) {\n\tif (typeof value !== 'object' || value === null) {\n\t\treturn false;\n\t}\n\n\tconst prototype = Object.getPrototypeOf(value);\n\treturn (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in value) && !(Symbol.iterator in value);\n}\n","/**\n * @typedef {(error?: Error|null|undefined, ...output: Array<any>) => void} Callback\n * @typedef {(...input: Array<any>) => any} Middleware\n *\n * @typedef {(...input: Array<any>) => void} Run\n *   Call all middleware.\n * @typedef {(fn: Middleware) => Pipeline} Use\n *   Add `fn` (middleware) to the list.\n * @typedef {{run: Run, use: Use}} Pipeline\n *   Middleware.\n */\n\n/**\n * Create new middleware.\n *\n * @returns {Pipeline}\n */\nexport function trough() {\n  /** @type {Array<Middleware>} */\n  const fns = []\n  /** @type {Pipeline} */\n  const pipeline = {run, use}\n\n  return pipeline\n\n  /** @type {Run} */\n  function run(...values) {\n    let middlewareIndex = -1\n    /** @type {Callback} */\n    const callback = values.pop()\n\n    if (typeof callback !== 'function') {\n      throw new TypeError('Expected function as last argument, not ' + callback)\n    }\n\n    next(null, ...values)\n\n    /**\n     * Run the next `fn`, or we’re done.\n     *\n     * @param {Error|null|undefined} error\n     * @param {Array<any>} output\n     */\n    function next(error, ...output) {\n      const fn = fns[++middlewareIndex]\n      let index = -1\n\n      if (error) {\n        callback(error)\n        return\n      }\n\n      // Copy non-nullish input into values.\n      while (++index < values.length) {\n        if (output[index] === null || output[index] === undefined) {\n          output[index] = values[index]\n        }\n      }\n\n      // Save the newly created `output` for the next call.\n      values = output\n\n      // Next or done.\n      if (fn) {\n        wrap(fn, next)(...output)\n      } else {\n        callback(null, ...output)\n      }\n    }\n  }\n\n  /** @type {Use} */\n  function use(middelware) {\n    if (typeof middelware !== 'function') {\n      throw new TypeError(\n        'Expected `middelware` to be a function, not ' + middelware\n      )\n    }\n\n    fns.push(middelware)\n    return pipeline\n  }\n}\n\n/**\n * Wrap `middleware`.\n * Can be sync or async; return a promise, receive a callback, or return new\n * values and errors.\n *\n * @param {Middleware} middleware\n * @param {Callback} callback\n */\nexport function wrap(middleware, callback) {\n  /** @type {boolean} */\n  let called\n\n  return wrapped\n\n  /**\n   * Call `middleware`.\n   * @this {any}\n   * @param {Array<any>} parameters\n   * @returns {void}\n   */\n  function wrapped(...parameters) {\n    const fnExpectsCallback = middleware.length > parameters.length\n    /** @type {any} */\n    let result\n\n    if (fnExpectsCallback) {\n      parameters.push(done)\n    }\n\n    try {\n      result = middleware.apply(this, parameters)\n    } catch (error) {\n      const exception = /** @type {Error} */ (error)\n\n      // Well, this is quite the pickle.\n      // `middleware` received a callback and called it synchronously, but that\n      // threw an error.\n      // The only thing left to do is to throw the thing instead.\n      if (fnExpectsCallback && called) {\n        throw exception\n      }\n\n      return done(exception)\n    }\n\n    if (!fnExpectsCallback) {\n      if (result instanceof Promise) {\n        result.then(then, done)\n      } else if (result instanceof Error) {\n        done(result)\n      } else {\n        then(result)\n      }\n    }\n  }\n\n  /**\n   * Call `callback`, only once.\n   * @type {Callback}\n   */\n  function done(error, ...output) {\n    if (!called) {\n      called = true\n      callback(error, ...output)\n    }\n  }\n\n  /**\n   * Call `done` with one value.\n   *\n   * @param {any} [value]\n   */\n  function then(value) {\n    done(null, value)\n  }\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('vfile').VFileCompatible} VFileCompatible\n * @typedef {import('vfile').VFileValue} VFileValue\n * @typedef {import('..').Processor} Processor\n * @typedef {import('..').Plugin} Plugin\n * @typedef {import('..').Preset} Preset\n * @typedef {import('..').Pluggable} Pluggable\n * @typedef {import('..').PluggableList} PluggableList\n * @typedef {import('..').Transformer} Transformer\n * @typedef {import('..').Parser} Parser\n * @typedef {import('..').Compiler} Compiler\n * @typedef {import('..').RunCallback} RunCallback\n * @typedef {import('..').ProcessCallback} ProcessCallback\n *\n * @typedef Context\n * @property {Node} tree\n * @property {VFile} file\n */\n\nimport {bail} from 'bail'\nimport isBuffer from 'is-buffer'\nimport extend from 'extend'\nimport isPlainObj from 'is-plain-obj'\nimport {trough} from 'trough'\nimport {VFile} from 'vfile'\n\n// Expose a frozen processor.\nexport const unified = base().freeze()\n\nconst own = {}.hasOwnProperty\n\n// Function to create the first processor.\n/**\n * @returns {Processor}\n */\nfunction base() {\n  const transformers = trough()\n  /** @type {Processor['attachers']} */\n  const attachers = []\n  /** @type {Record<string, unknown>} */\n  let namespace = {}\n  /** @type {boolean|undefined} */\n  let frozen\n  let freezeIndex = -1\n\n  // Data management.\n  // @ts-expect-error: overloads are handled.\n  processor.data = data\n  processor.Parser = undefined\n  processor.Compiler = undefined\n\n  // Lock.\n  processor.freeze = freeze\n\n  // Plugins.\n  processor.attachers = attachers\n  // @ts-expect-error: overloads are handled.\n  processor.use = use\n\n  // API.\n  processor.parse = parse\n  processor.stringify = stringify\n  // @ts-expect-error: overloads are handled.\n  processor.run = run\n  processor.runSync = runSync\n  // @ts-expect-error: overloads are handled.\n  processor.process = process\n  processor.processSync = processSync\n\n  // Expose.\n  return processor\n\n  // Create a new processor based on the processor in the current scope.\n  /** @type {Processor} */\n  function processor() {\n    const destination = base()\n    let index = -1\n\n    while (++index < attachers.length) {\n      destination.use(...attachers[index])\n    }\n\n    destination.data(extend(true, {}, namespace))\n\n    return destination\n  }\n\n  /**\n   * @param {string|Record<string, unknown>} [key]\n   * @param {unknown} [value]\n   * @returns {unknown}\n   */\n  function data(key, value) {\n    if (typeof key === 'string') {\n      // Set `key`.\n      if (arguments.length === 2) {\n        assertUnfrozen('data', frozen)\n        namespace[key] = value\n        return processor\n      }\n\n      // Get `key`.\n      return (own.call(namespace, key) && namespace[key]) || null\n    }\n\n    // Set space.\n    if (key) {\n      assertUnfrozen('data', frozen)\n      namespace = key\n      return processor\n    }\n\n    // Get space.\n    return namespace\n  }\n\n  /** @type {Processor['freeze']} */\n  function freeze() {\n    if (frozen) {\n      return processor\n    }\n\n    while (++freezeIndex < attachers.length) {\n      const [attacher, ...options] = attachers[freezeIndex]\n\n      if (options[0] === false) {\n        continue\n      }\n\n      if (options[0] === true) {\n        options[0] = undefined\n      }\n\n      /** @type {Transformer|void} */\n      const transformer = attacher.call(processor, ...options)\n\n      if (typeof transformer === 'function') {\n        transformers.use(transformer)\n      }\n    }\n\n    frozen = true\n    freezeIndex = Number.POSITIVE_INFINITY\n\n    return processor\n  }\n\n  /**\n   * @param {Pluggable|null|undefined} [value]\n   * @param {...unknown} options\n   * @returns {Processor}\n   */\n  function use(value, ...options) {\n    /** @type {Record<string, unknown>|undefined} */\n    let settings\n\n    assertUnfrozen('use', frozen)\n\n    if (value === null || value === undefined) {\n      // Empty.\n    } else if (typeof value === 'function') {\n      addPlugin(value, ...options)\n    } else if (typeof value === 'object') {\n      if (Array.isArray(value)) {\n        addList(value)\n      } else {\n        addPreset(value)\n      }\n    } else {\n      throw new TypeError('Expected usable value, not `' + value + '`')\n    }\n\n    if (settings) {\n      namespace.settings = Object.assign(namespace.settings || {}, settings)\n    }\n\n    return processor\n\n    /**\n     * @param {import('..').Pluggable<unknown[]>} value\n     * @returns {void}\n     */\n    function add(value) {\n      if (typeof value === 'function') {\n        addPlugin(value)\n      } else if (typeof value === 'object') {\n        if (Array.isArray(value)) {\n          const [plugin, ...options] = value\n          addPlugin(plugin, ...options)\n        } else {\n          addPreset(value)\n        }\n      } else {\n        throw new TypeError('Expected usable value, not `' + value + '`')\n      }\n    }\n\n    /**\n     * @param {Preset} result\n     * @returns {void}\n     */\n    function addPreset(result) {\n      addList(result.plugins)\n\n      if (result.settings) {\n        settings = Object.assign(settings || {}, result.settings)\n      }\n    }\n\n    /**\n     * @param {PluggableList|null|undefined} [plugins]\n     * @returns {void}\n     */\n    function addList(plugins) {\n      let index = -1\n\n      if (plugins === null || plugins === undefined) {\n        // Empty.\n      } else if (Array.isArray(plugins)) {\n        while (++index < plugins.length) {\n          const thing = plugins[index]\n          add(thing)\n        }\n      } else {\n        throw new TypeError('Expected a list of plugins, not `' + plugins + '`')\n      }\n    }\n\n    /**\n     * @param {Plugin} plugin\n     * @param {...unknown} [value]\n     * @returns {void}\n     */\n    function addPlugin(plugin, value) {\n      let index = -1\n      /** @type {Processor['attachers'][number]|undefined} */\n      let entry\n\n      while (++index < attachers.length) {\n        if (attachers[index][0] === plugin) {\n          entry = attachers[index]\n          break\n        }\n      }\n\n      if (entry) {\n        if (isPlainObj(entry[1]) && isPlainObj(value)) {\n          value = extend(true, entry[1], value)\n        }\n\n        entry[1] = value\n      } else {\n        // @ts-expect-error: fine.\n        attachers.push([...arguments])\n      }\n    }\n  }\n\n  /** @type {Processor['parse']} */\n  function parse(doc) {\n    processor.freeze()\n    const file = vfile(doc)\n    const Parser = processor.Parser\n    assertParser('parse', Parser)\n\n    if (newable(Parser, 'parse')) {\n      // @ts-expect-error: `newable` checks this.\n      return new Parser(String(file), file).parse()\n    }\n\n    // @ts-expect-error: `newable` checks this.\n    return Parser(String(file), file) // eslint-disable-line new-cap\n  }\n\n  /** @type {Processor['stringify']} */\n  function stringify(node, doc) {\n    processor.freeze()\n    const file = vfile(doc)\n    const Compiler = processor.Compiler\n    assertCompiler('stringify', Compiler)\n    assertNode(node)\n\n    if (newable(Compiler, 'compile')) {\n      // @ts-expect-error: `newable` checks this.\n      return new Compiler(node, file).compile()\n    }\n\n    // @ts-expect-error: `newable` checks this.\n    return Compiler(node, file) // eslint-disable-line new-cap\n  }\n\n  /**\n   * @param {Node} node\n   * @param {VFileCompatible|RunCallback} [doc]\n   * @param {RunCallback} [callback]\n   * @returns {Promise<Node>|void}\n   */\n  function run(node, doc, callback) {\n    assertNode(node)\n    processor.freeze()\n\n    if (!callback && typeof doc === 'function') {\n      callback = doc\n      doc = undefined\n    }\n\n    if (!callback) {\n      return new Promise(executor)\n    }\n\n    executor(null, callback)\n\n    /**\n     * @param {null|((node: Node) => void)} resolve\n     * @param {(error: Error) => void} reject\n     * @returns {void}\n     */\n    function executor(resolve, reject) {\n      // @ts-expect-error: `doc` can’t be a callback anymore, we checked.\n      transformers.run(node, vfile(doc), done)\n\n      /**\n       * @param {Error|null} error\n       * @param {Node} tree\n       * @param {VFile} file\n       * @returns {void}\n       */\n      function done(error, tree, file) {\n        tree = tree || node\n        if (error) {\n          reject(error)\n        } else if (resolve) {\n          resolve(tree)\n        } else {\n          // @ts-expect-error: `callback` is defined if `resolve` is not.\n          callback(null, tree, file)\n        }\n      }\n    }\n  }\n\n  /** @type {Processor['runSync']} */\n  function runSync(node, file) {\n    /** @type {Node|undefined} */\n    let result\n    /** @type {boolean|undefined} */\n    let complete\n\n    processor.run(node, file, done)\n\n    assertDone('runSync', 'run', complete)\n\n    // @ts-expect-error: we either bailed on an error or have a tree.\n    return result\n\n    /**\n     * @param {Error|null} [error]\n     * @param {Node} [tree]\n     * @returns {void}\n     */\n    function done(error, tree) {\n      bail(error)\n      result = tree\n      complete = true\n    }\n  }\n\n  /**\n   * @param {VFileCompatible} doc\n   * @param {ProcessCallback} [callback]\n   * @returns {Promise<VFile>|undefined}\n   */\n  function process(doc, callback) {\n    processor.freeze()\n    assertParser('process', processor.Parser)\n    assertCompiler('process', processor.Compiler)\n\n    if (!callback) {\n      return new Promise(executor)\n    }\n\n    executor(null, callback)\n\n    /**\n     * @param {null|((file: VFile) => void)} resolve\n     * @param {(error?: Error|null|undefined) => void} reject\n     * @returns {void}\n     */\n    function executor(resolve, reject) {\n      const file = vfile(doc)\n\n      processor.run(processor.parse(file), file, (error, tree, file) => {\n        if (error || !tree || !file) {\n          done(error)\n        } else {\n          /** @type {unknown} */\n          const result = processor.stringify(tree, file)\n\n          if (result === undefined || result === null) {\n            // Empty.\n          } else if (looksLikeAVFileValue(result)) {\n            file.value = result\n          } else {\n            file.result = result\n          }\n\n          done(error, file)\n        }\n      })\n\n      /**\n       * @param {Error|null|undefined} [error]\n       * @param {VFile|undefined} [file]\n       * @returns {void}\n       */\n      function done(error, file) {\n        if (error || !file) {\n          reject(error)\n        } else if (resolve) {\n          resolve(file)\n        } else {\n          // @ts-expect-error: `callback` is defined if `resolve` is not.\n          callback(null, file)\n        }\n      }\n    }\n  }\n\n  /** @type {Processor['processSync']} */\n  function processSync(doc) {\n    /** @type {boolean|undefined} */\n    let complete\n\n    processor.freeze()\n    assertParser('processSync', processor.Parser)\n    assertCompiler('processSync', processor.Compiler)\n\n    const file = vfile(doc)\n\n    processor.process(file, done)\n\n    assertDone('processSync', 'process', complete)\n\n    return file\n\n    /**\n     * @param {Error|null|undefined} [error]\n     * @returns {void}\n     */\n    function done(error) {\n      complete = true\n      bail(error)\n    }\n  }\n}\n\n/**\n * Check if `value` is a constructor.\n *\n * @param {unknown} value\n * @param {string} name\n * @returns {boolean}\n */\nfunction newable(value, name) {\n  return (\n    typeof value === 'function' &&\n    // Prototypes do exist.\n    // type-coverage:ignore-next-line\n    value.prototype &&\n    // A function with keys in its prototype is probably a constructor.\n    // Classes’ prototype methods are not enumerable, so we check if some value\n    // exists in the prototype.\n    // type-coverage:ignore-next-line\n    (keys(value.prototype) || name in value.prototype)\n  )\n}\n\n/**\n * Check if `value` is an object with keys.\n *\n * @param {Record<string, unknown>} value\n * @returns {boolean}\n */\nfunction keys(value) {\n  /** @type {string} */\n  let key\n\n  for (key in value) {\n    if (own.call(value, key)) {\n      return true\n    }\n  }\n\n  return false\n}\n\n/**\n * Assert a parser is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Parser}\n */\nfunction assertParser(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `Parser`')\n  }\n}\n\n/**\n * Assert a compiler is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Compiler}\n */\nfunction assertCompiler(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `Compiler`')\n  }\n}\n\n/**\n * Assert the processor is not frozen.\n *\n * @param {string} name\n * @param {unknown} frozen\n * @returns {asserts frozen is false}\n */\nfunction assertUnfrozen(name, frozen) {\n  if (frozen) {\n    throw new Error(\n      'Cannot call `' +\n        name +\n        '` on a frozen processor.\\nCreate a new processor first, by calling it: use `processor()` instead of `processor`.'\n    )\n  }\n}\n\n/**\n * Assert `node` is a unist node.\n *\n * @param {unknown} node\n * @returns {asserts node is Node}\n */\nfunction assertNode(node) {\n  // `isPlainObj` unfortunately uses `any` instead of `unknown`.\n  // type-coverage:ignore-next-line\n  if (!isPlainObj(node) || typeof node.type !== 'string') {\n    throw new TypeError('Expected node, got `' + node + '`')\n    // Fine.\n  }\n}\n\n/**\n * Assert that `complete` is `true`.\n *\n * @param {string} name\n * @param {string} asyncName\n * @param {unknown} complete\n * @returns {asserts complete is true}\n */\nfunction assertDone(name, asyncName, complete) {\n  if (!complete) {\n    throw new Error(\n      '`' + name + '` finished async. Use `' + asyncName + '` instead'\n    )\n  }\n}\n\n/**\n * @param {VFileCompatible} [value]\n * @returns {VFile}\n */\nfunction vfile(value) {\n  return looksLikeAVFile(value) ? value : new VFile(value)\n}\n\n/**\n * @param {VFileCompatible} [value]\n * @returns {value is VFile}\n */\nfunction looksLikeAVFile(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'message' in value &&\n      'messages' in value\n  )\n}\n\n/**\n * @param {unknown} [value]\n * @returns {value is VFileValue}\n */\nfunction looksLikeAVFileValue(value) {\n  return typeof value === 'string' || isBuffer(value)\n}\n","/**\n * @typedef {import('mdast').Root|import('mdast').Content} Node\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [includeImageAlt=true]\n *   Whether to use `alt` for `image`s.\n * @property {boolean | null | undefined} [includeHtml=true]\n *   Whether to use `value` of HTML.\n */\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Get the text content of a node or list of nodes.\n *\n * Prefers the node’s plain-text fields, otherwise serializes its children,\n * and if the given value is an array, serialize the nodes in it.\n *\n * @param {unknown} value\n *   Thing to serialize, typically `Node`.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {string}\n *   Serialized `value`.\n */\nexport function toString(value, options) {\n  const settings = options || emptyOptions\n  const includeImageAlt =\n    typeof settings.includeImageAlt === 'boolean'\n      ? settings.includeImageAlt\n      : true\n  const includeHtml =\n    typeof settings.includeHtml === 'boolean' ? settings.includeHtml : true\n\n  return one(value, includeImageAlt, includeHtml)\n}\n\n/**\n * One node or several nodes.\n *\n * @param {unknown} value\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized node.\n */\nfunction one(value, includeImageAlt, includeHtml) {\n  if (node(value)) {\n    if ('value' in value) {\n      return value.type === 'html' && !includeHtml ? '' : value.value\n    }\n\n    if (includeImageAlt && 'alt' in value && value.alt) {\n      return value.alt\n    }\n\n    if ('children' in value) {\n      return all(value.children, includeImageAlt, includeHtml)\n    }\n  }\n\n  if (Array.isArray(value)) {\n    return all(value, includeImageAlt, includeHtml)\n  }\n\n  return ''\n}\n\n/**\n * Serialize a list of nodes.\n *\n * @param {Array<unknown>} values\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized nodes.\n */\nfunction all(values, includeImageAlt, includeHtml) {\n  /** @type {Array<string>} */\n  const result = []\n  let index = -1\n\n  while (++index < values.length) {\n    result[index] = one(values[index], includeImageAlt, includeHtml)\n  }\n\n  return result.join('')\n}\n\n/**\n * Check if `value` looks like a node.\n *\n * @param {unknown} value\n *   Thing.\n * @returns {value is Node}\n *   Whether `value` is a node.\n */\nfunction node(value) {\n  return Boolean(value && typeof value === 'object')\n}\n","/**\n * Like `Array#splice`, but smarter for giant arrays.\n *\n * `Array#splice` takes all items to be inserted as individual argument which\n * causes a stack overflow in V8 when trying to insert 100k items for instance.\n *\n * Otherwise, this does not return the removed items, and takes `items` as an\n * array instead of rest parameters.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {number} start\n *   Index to remove/insert at (can be negative).\n * @param {number} remove\n *   Number of items to remove.\n * @param {Array<T>} items\n *   Items to inject into `list`.\n * @returns {void}\n *   Nothing.\n */\nexport function splice(list, start, remove, items) {\n  const end = list.length\n  let chunkStart = 0\n  /** @type {Array<unknown>} */\n  let parameters\n\n  // Make start between zero and `end` (included).\n  if (start < 0) {\n    start = -start > end ? 0 : end + start\n  } else {\n    start = start > end ? end : start\n  }\n  remove = remove > 0 ? remove : 0\n\n  // No need to chunk the items if there’s only a couple (10k) items.\n  if (items.length < 10000) {\n    parameters = Array.from(items)\n    parameters.unshift(start, remove)\n    // @ts-expect-error Hush, it’s fine.\n    list.splice(...parameters)\n  } else {\n    // Delete `remove` items starting from `start`\n    if (remove) list.splice(start, remove)\n\n    // Insert the items in chunks to not cause stack overflows.\n    while (chunkStart < items.length) {\n      parameters = items.slice(chunkStart, chunkStart + 10000)\n      parameters.unshift(start, 0)\n      // @ts-expect-error Hush, it’s fine.\n      list.splice(...parameters)\n      chunkStart += 10000\n      start += 10000\n    }\n  }\n}\n\n/**\n * Append `items` (an array) at the end of `list` (another array).\n * When `list` was empty, returns `items` instead.\n *\n * This prevents a potentially expensive operation when `list` is empty,\n * and adds items in batches to prevent V8 from hanging.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {Array<T>} items\n *   Items to add to `list`.\n * @returns {Array<T>}\n *   Either `list` or `items`.\n */\nexport function push(list, items) {\n  if (list.length > 0) {\n    splice(list, list.length, 0, items)\n    return list\n  }\n  return items\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Handles} Handles\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n * @typedef {import('micromark-util-types').NormalizedExtension} NormalizedExtension\n */\n\nimport {splice} from 'micromark-util-chunked'\n\nconst hasOwnProperty = {}.hasOwnProperty\n\n/**\n * Combine multiple syntax extensions into one.\n *\n * @param {Array<Extension>} extensions\n *   List of syntax extensions.\n * @returns {NormalizedExtension}\n *   A single combined extension.\n */\nexport function combineExtensions(extensions) {\n  /** @type {NormalizedExtension} */\n  const all = {}\n  let index = -1\n\n  while (++index < extensions.length) {\n    syntaxExtension(all, extensions[index])\n  }\n\n  return all\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {NormalizedExtension} all\n *   Extension to merge into.\n * @param {Extension} extension\n *   Extension to merge.\n * @returns {void}\n */\nfunction syntaxExtension(all, extension) {\n  /** @type {keyof Extension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    /** @type {Record<string, unknown>} */\n    const left = maybe || (all[hook] = {})\n    /** @type {Record<string, unknown> | undefined} */\n    const right = extension[hook]\n    /** @type {string} */\n    let code\n\n    if (right) {\n      for (code in right) {\n        if (!hasOwnProperty.call(left, code)) left[code] = []\n        const value = right[code]\n        constructs(\n          // @ts-expect-error Looks like a list.\n          left[code],\n          Array.isArray(value) ? value : value ? [value] : []\n        )\n      }\n    }\n  }\n}\n\n/**\n * Merge `list` into `existing` (both lists of constructs).\n * Mutates `existing`.\n *\n * @param {Array<unknown>} existing\n * @param {Array<unknown>} list\n * @returns {void}\n */\nfunction constructs(existing, list) {\n  let index = -1\n  /** @type {Array<unknown>} */\n  const before = []\n\n  while (++index < list.length) {\n    // @ts-expect-error Looks like an object.\n    ;(list[index].add === 'after' ? existing : before).push(list[index])\n  }\n\n  splice(existing, 0, 0, before)\n}\n\n/**\n * Combine multiple HTML extensions into one.\n *\n * @param {Array<HtmlExtension>} htmlExtensions\n *   List of HTML extensions.\n * @returns {HtmlExtension}\n *   A single combined HTML extension.\n */\nexport function combineHtmlExtensions(htmlExtensions) {\n  /** @type {HtmlExtension} */\n  const handlers = {}\n  let index = -1\n\n  while (++index < htmlExtensions.length) {\n    htmlExtension(handlers, htmlExtensions[index])\n  }\n\n  return handlers\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {HtmlExtension} all\n *   Extension to merge into.\n * @param {HtmlExtension} extension\n *   Extension to merge.\n * @returns {void}\n */\nfunction htmlExtension(all, extension) {\n  /** @type {keyof HtmlExtension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    const left = maybe || (all[hook] = {})\n    const right = extension[hook]\n    /** @type {keyof Handles} */\n    let type\n\n    if (right) {\n      for (type in right) {\n        // @ts-expect-error assume document vs regular handler are managed correctly.\n        left[type] = right[type]\n      }\n    }\n  }\n}\n","// This module is generated by `script/`.\n//\n// CommonMark handles attention (emphasis, strong) markers based on what comes\n// before or after them.\n// One such difference is if those characters are Unicode punctuation.\n// This script is generated from the Unicode data.\n\n/**\n * Regular expression that matches a unicode punctuation character.\n */\nexport const unicodePunctuationRegex =\n  /[!-\\/:-@\\[-`\\{-~\\xA1\\xA7\\xAB\\xB6\\xB7\\xBB\\xBF\\u037E\\u0387\\u055A-\\u055F\\u0589\\u058A\\u05BE\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0609\\u060A\\u060C\\u060D\\u061B\\u061D-\\u061F\\u066A-\\u066D\\u06D4\\u0700-\\u070D\\u07F7-\\u07F9\\u0830-\\u083E\\u085E\\u0964\\u0965\\u0970\\u09FD\\u0A76\\u0AF0\\u0C77\\u0C84\\u0DF4\\u0E4F\\u0E5A\\u0E5B\\u0F04-\\u0F12\\u0F14\\u0F3A-\\u0F3D\\u0F85\\u0FD0-\\u0FD4\\u0FD9\\u0FDA\\u104A-\\u104F\\u10FB\\u1360-\\u1368\\u1400\\u166E\\u169B\\u169C\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DA\\u1800-\\u180A\\u1944\\u1945\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B5A-\\u1B60\\u1B7D\\u1B7E\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u2010-\\u2027\\u2030-\\u2043\\u2045-\\u2051\\u2053-\\u205E\\u207D\\u207E\\u208D\\u208E\\u2308-\\u230B\\u2329\\u232A\\u2768-\\u2775\\u27C5\\u27C6\\u27E6-\\u27EF\\u2983-\\u2998\\u29D8-\\u29DB\\u29FC\\u29FD\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00-\\u2E2E\\u2E30-\\u2E4F\\u2E52-\\u2E5D\\u3001-\\u3003\\u3008-\\u3011\\u3014-\\u301F\\u3030\\u303D\\u30A0\\u30FB\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA8FC\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAADE\\uAADF\\uAAF0\\uAAF1\\uABEB\\uFD3E\\uFD3F\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE61\\uFE63\\uFE68\\uFE6A\\uFE6B\\uFF01-\\uFF03\\uFF05-\\uFF0A\\uFF0C-\\uFF0F\\uFF1A\\uFF1B\\uFF1F\\uFF20\\uFF3B-\\uFF3D\\uFF3F\\uFF5B\\uFF5D\\uFF5F-\\uFF65]/\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\n\nimport {unicodePunctuationRegex} from './lib/unicode-punctuation-regex.js'\n\n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiAlpha = regexCheck(/[A-Za-z]/)\n\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/)\n\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/)\n\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < 32 || code === 127)\n  )\n}\n\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiDigit = regexCheck(/\\d/)\n\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/)\n\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/)\n\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEnding(code) {\n  return code !== null && code < -2\n}\n\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEndingOrSpace(code) {\n  return code !== null && (code < 0 || code === 32)\n}\n\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownSpace(code) {\n  return code === -2 || code === -1 || code === 32\n}\n\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodePunctuation = regexCheck(unicodePunctuationRegex)\n\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodeWhitespace = regexCheck(/\\s/)\n\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n * @returns {(code: Code) => boolean}\n */\nfunction regexCheck(regex) {\n  return check\n\n  /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code\n   *   Character code.\n   * @returns {boolean}\n   *   Whether the character code matches the bound regex.\n   */\n  function check(code) {\n    return code !== null && regex.test(String.fromCharCode(code))\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {markdownSpace} from 'micromark-util-character'\n\n// To do: implement `spaceOrTab`, `spaceOrTabMinMax`, `spaceOrTabWithOptions`.\n\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   spaces in markdown are often optional, in which case this factory can be\n *     used and `ok` will be switched to whether spaces were found or not\n * *   one line ending or space can be detected with `markdownSpace(code)` right\n *     before using `factorySpace`\n *\n * ###### Examples\n *\n * Where `␉` represents a tab (plus how much it expands) and `␠` represents a\n * single space.\n *\n * ```markdown\n * ␉\n * ␠␠␠␠\n * ␉␠\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {TokenType} type\n *   Type (`' \\t'`).\n * @param {number | undefined} [max=Infinity]\n *   Max (exclusive).\n * @returns\n *   Start state.\n */\nexport function factorySpace(effects, ok, type, max) {\n  const limit = max ? max - 1 : Number.POSITIVE_INFINITY\n  let size = 0\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownSpace(code)) {\n      effects.enter(type)\n      return prefix(code)\n    }\n    return ok(code)\n  }\n\n  /** @type {State} */\n  function prefix(code) {\n    if (markdownSpace(code) && size++ < limit) {\n      effects.consume(code)\n      return prefix\n    }\n    effects.exit(type)\n    return ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {InitialConstruct} */\nexport const content = {\n  tokenize: initializeContent\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeContent(effects) {\n  const contentStart = effects.attempt(\n    this.parser.constructs.contentInitial,\n    afterContentStartConstruct,\n    paragraphInitial\n  )\n  /** @type {Token} */\n  let previous\n  return contentStart\n\n  /** @type {State} */\n  function afterContentStartConstruct(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, contentStart, 'linePrefix')\n  }\n\n  /** @type {State} */\n  function paragraphInitial(code) {\n    effects.enter('paragraph')\n    return lineStart(code)\n  }\n\n  /** @type {State} */\n  function lineStart(code) {\n    const token = effects.enter('chunkText', {\n      contentType: 'text',\n      previous\n    })\n    if (previous) {\n      previous.next = token\n    }\n    previous = token\n    return data(code)\n  }\n\n  /** @type {State} */\n  function data(code) {\n    if (code === null) {\n      effects.exit('chunkText')\n      effects.exit('paragraph')\n      effects.consume(code)\n      return\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code)\n      effects.exit('chunkText')\n      return lineStart\n    }\n\n    // Data.\n    effects.consume(code)\n    return data\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ContainerState} ContainerState\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\n/**\n * @typedef {[Construct, ContainerState]} StackItem\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {splice} from 'micromark-util-chunked'\n/** @type {InitialConstruct} */\nexport const document = {\n  tokenize: initializeDocument\n}\n\n/** @type {Construct} */\nconst containerConstruct = {\n  tokenize: tokenizeContainer\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeDocument(effects) {\n  const self = this\n  /** @type {Array<StackItem>} */\n  const stack = []\n  let continued = 0\n  /** @type {TokenizeContext | undefined} */\n  let childFlow\n  /** @type {Token | undefined} */\n  let childToken\n  /** @type {number} */\n  let lineStartOffset\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    // First we iterate through the open blocks, starting with the root\n    // document, and descending through last children down to the last open\n    // block.\n    // Each block imposes a condition that the line must satisfy if the block is\n    // to remain open.\n    // For example, a block quote requires a `>` character.\n    // A paragraph requires a non-blank line.\n    // In this phase we may match all or just some of the open blocks.\n    // But we cannot close unmatched blocks yet, because we may have a lazy\n    // continuation line.\n    if (continued < stack.length) {\n      const item = stack[continued]\n      self.containerState = item[1]\n      return effects.attempt(\n        item[0].continuation,\n        documentContinue,\n        checkNewContainers\n      )(code)\n    }\n\n    // Done.\n    return checkNewContainers(code)\n  }\n\n  /** @type {State} */\n  function documentContinue(code) {\n    continued++\n\n    // Note: this field is called `_closeFlow` but it also closes containers.\n    // Perhaps a good idea to rename it but it’s already used in the wild by\n    // extensions.\n    if (self.containerState._closeFlow) {\n      self.containerState._closeFlow = undefined\n      if (childFlow) {\n        closeFlow()\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when dealing with lazy lines in `writeToChild`.\n      const indexBeforeExits = self.events.length\n      let indexBeforeFlow = indexBeforeExits\n      /** @type {Point | undefined} */\n      let point\n\n      // Find the flow chunk.\n      while (indexBeforeFlow--) {\n        if (\n          self.events[indexBeforeFlow][0] === 'exit' &&\n          self.events[indexBeforeFlow][1].type === 'chunkFlow'\n        ) {\n          point = self.events[indexBeforeFlow][1].end\n          break\n        }\n      }\n      exitContainers(continued)\n\n      // Fix positions.\n      let index = indexBeforeExits\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point)\n        index++\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(\n        self.events,\n        indexBeforeFlow + 1,\n        0,\n        self.events.slice(indexBeforeExits)\n      )\n\n      // Discard the duplicate exits.\n      self.events.length = index\n      return checkNewContainers(code)\n    }\n    return start(code)\n  }\n\n  /** @type {State} */\n  function checkNewContainers(code) {\n    // Next, after consuming the continuation markers for existing blocks, we\n    // look for new block starts (e.g. `>` for a block quote).\n    // If we encounter a new block start, we close any blocks unmatched in\n    // step 1 before creating the new block as a child of the last matched\n    // block.\n    if (continued === stack.length) {\n      // No need to `check` whether there’s a container, of `exitContainers`\n      // would be moot.\n      // We can instead immediately `attempt` to parse one.\n      if (!childFlow) {\n        return documentContinued(code)\n      }\n\n      // If we have concrete content, such as block HTML or fenced code,\n      // we can’t have containers “pierce” into them, so we can immediately\n      // start.\n      if (childFlow.currentConstruct && childFlow.currentConstruct.concrete) {\n        return flowStart(code)\n      }\n\n      // If we do have flow, it could still be a blank line,\n      // but we’d be interrupting it w/ a new container if there’s a current\n      // construct.\n      // To do: next major: remove `_gfmTableDynamicInterruptHack` (no longer\n      // needed in micromark-extension-gfm-table@1.0.6).\n      self.interrupt = Boolean(\n        childFlow.currentConstruct && !childFlow._gfmTableDynamicInterruptHack\n      )\n    }\n\n    // Check if there is a new container.\n    self.containerState = {}\n    return effects.check(\n      containerConstruct,\n      thereIsANewContainer,\n      thereIsNoNewContainer\n    )(code)\n  }\n\n  /** @type {State} */\n  function thereIsANewContainer(code) {\n    if (childFlow) closeFlow()\n    exitContainers(continued)\n    return documentContinued(code)\n  }\n\n  /** @type {State} */\n  function thereIsNoNewContainer(code) {\n    self.parser.lazy[self.now().line] = continued !== stack.length\n    lineStartOffset = self.now().offset\n    return flowStart(code)\n  }\n\n  /** @type {State} */\n  function documentContinued(code) {\n    // Try new containers.\n    self.containerState = {}\n    return effects.attempt(\n      containerConstruct,\n      containerContinue,\n      flowStart\n    )(code)\n  }\n\n  /** @type {State} */\n  function containerContinue(code) {\n    continued++\n    stack.push([self.currentConstruct, self.containerState])\n    // Try another.\n    return documentContinued(code)\n  }\n\n  /** @type {State} */\n  function flowStart(code) {\n    if (code === null) {\n      if (childFlow) closeFlow()\n      exitContainers(0)\n      effects.consume(code)\n      return\n    }\n    childFlow = childFlow || self.parser.flow(self.now())\n    effects.enter('chunkFlow', {\n      contentType: 'flow',\n      previous: childToken,\n      _tokenizer: childFlow\n    })\n    return flowContinue(code)\n  }\n\n  /** @type {State} */\n  function flowContinue(code) {\n    if (code === null) {\n      writeToChild(effects.exit('chunkFlow'), true)\n      exitContainers(0)\n      effects.consume(code)\n      return\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code)\n      writeToChild(effects.exit('chunkFlow'))\n      // Get ready for the next line.\n      continued = 0\n      self.interrupt = undefined\n      return start\n    }\n    effects.consume(code)\n    return flowContinue\n  }\n\n  /**\n   * @param {Token} token\n   * @param {boolean | undefined} [eof]\n   * @returns {void}\n   */\n  function writeToChild(token, eof) {\n    const stream = self.sliceStream(token)\n    if (eof) stream.push(null)\n    token.previous = childToken\n    if (childToken) childToken.next = token\n    childToken = token\n    childFlow.defineSkip(token.start)\n    childFlow.write(stream)\n\n    // Alright, so we just added a lazy line:\n    //\n    // ```markdown\n    // > a\n    // b.\n    //\n    // Or:\n    //\n    // > ~~~c\n    // d\n    //\n    // Or:\n    //\n    // > | e |\n    // f\n    // ```\n    //\n    // The construct in the second example (fenced code) does not accept lazy\n    // lines, so it marked itself as done at the end of its first line, and\n    // then the content construct parses `d`.\n    // Most constructs in markdown match on the first line: if the first line\n    // forms a construct, a non-lazy line can’t “unmake” it.\n    //\n    // The construct in the third example is potentially a GFM table, and\n    // those are *weird*.\n    // It *could* be a table, from the first line, if the following line\n    // matches a condition.\n    // In this case, that second line is lazy, which “unmakes” the first line\n    // and turns the whole into one content block.\n    //\n    // We’ve now parsed the non-lazy and the lazy line, and can figure out\n    // whether the lazy line started a new flow block.\n    // If it did, we exit the current containers between the two flow blocks.\n    if (self.parser.lazy[token.start.line]) {\n      let index = childFlow.events.length\n      while (index--) {\n        if (\n          // The token starts before the line ending…\n          childFlow.events[index][1].start.offset < lineStartOffset &&\n          // …and either is not ended yet…\n          (!childFlow.events[index][1].end ||\n            // …or ends after it.\n            childFlow.events[index][1].end.offset > lineStartOffset)\n        ) {\n          // Exit: there’s still something open, which means it’s a lazy line\n          // part of something.\n          return\n        }\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when closing flow in `documentContinue`.\n      const indexBeforeExits = self.events.length\n      let indexBeforeFlow = indexBeforeExits\n      /** @type {boolean | undefined} */\n      let seen\n      /** @type {Point | undefined} */\n      let point\n\n      // Find the previous chunk (the one before the lazy line).\n      while (indexBeforeFlow--) {\n        if (\n          self.events[indexBeforeFlow][0] === 'exit' &&\n          self.events[indexBeforeFlow][1].type === 'chunkFlow'\n        ) {\n          if (seen) {\n            point = self.events[indexBeforeFlow][1].end\n            break\n          }\n          seen = true\n        }\n      }\n      exitContainers(continued)\n\n      // Fix positions.\n      index = indexBeforeExits\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point)\n        index++\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(\n        self.events,\n        indexBeforeFlow + 1,\n        0,\n        self.events.slice(indexBeforeExits)\n      )\n\n      // Discard the duplicate exits.\n      self.events.length = index\n    }\n  }\n\n  /**\n   * @param {number} size\n   * @returns {void}\n   */\n  function exitContainers(size) {\n    let index = stack.length\n\n    // Exit open containers.\n    while (index-- > size) {\n      const entry = stack[index]\n      self.containerState = entry[1]\n      entry[0].exit.call(self, effects)\n    }\n    stack.length = size\n  }\n  function closeFlow() {\n    childFlow.write([null])\n    childToken = undefined\n    childFlow = undefined\n    self.containerState._closeFlow = undefined\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContainer(effects, ok, nok) {\n  // Always populated by defaults.\n\n  return factorySpace(\n    effects,\n    effects.attempt(this.parser.constructs.document, ok, nok),\n    'linePrefix',\n    this.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4\n  )\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const blankLine = {\n  tokenize: tokenizeBlankLine,\n  partial: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLine(effects, ok, nok) {\n  return start\n\n  /**\n   * Start of blank line.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *     ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    return markdownSpace(code)\n      ? factorySpace(effects, after, 'linePrefix')(code)\n      : after(code)\n  }\n\n  /**\n   * At eof/eol, after optional whitespace.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *       ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Token} Token\n */\n\nimport {splice} from 'micromark-util-chunked'\n/**\n * Tokenize subcontent.\n *\n * @param {Array<Event>} events\n *   List of events.\n * @returns {boolean}\n *   Whether subtokens were found.\n */\nexport function subtokenize(events) {\n  /** @type {Record<string, number>} */\n  const jumps = {}\n  let index = -1\n  /** @type {Event} */\n  let event\n  /** @type {number | undefined} */\n  let lineIndex\n  /** @type {number} */\n  let otherIndex\n  /** @type {Event} */\n  let otherEvent\n  /** @type {Array<Event>} */\n  let parameters\n  /** @type {Array<Event>} */\n  let subevents\n  /** @type {boolean | undefined} */\n  let more\n  while (++index < events.length) {\n    while (index in jumps) {\n      index = jumps[index]\n    }\n    event = events[index]\n\n    // Add a hook for the GFM tasklist extension, which needs to know if text\n    // is in the first content of a list item.\n    if (\n      index &&\n      event[1].type === 'chunkFlow' &&\n      events[index - 1][1].type === 'listItemPrefix'\n    ) {\n      subevents = event[1]._tokenizer.events\n      otherIndex = 0\n      if (\n        otherIndex < subevents.length &&\n        subevents[otherIndex][1].type === 'lineEndingBlank'\n      ) {\n        otherIndex += 2\n      }\n      if (\n        otherIndex < subevents.length &&\n        subevents[otherIndex][1].type === 'content'\n      ) {\n        while (++otherIndex < subevents.length) {\n          if (subevents[otherIndex][1].type === 'content') {\n            break\n          }\n          if (subevents[otherIndex][1].type === 'chunkText') {\n            subevents[otherIndex][1]._isInFirstContentOfListItem = true\n            otherIndex++\n          }\n        }\n      }\n    }\n\n    // Enter.\n    if (event[0] === 'enter') {\n      if (event[1].contentType) {\n        Object.assign(jumps, subcontent(events, index))\n        index = jumps[index]\n        more = true\n      }\n    }\n    // Exit.\n    else if (event[1]._container) {\n      otherIndex = index\n      lineIndex = undefined\n      while (otherIndex--) {\n        otherEvent = events[otherIndex]\n        if (\n          otherEvent[1].type === 'lineEnding' ||\n          otherEvent[1].type === 'lineEndingBlank'\n        ) {\n          if (otherEvent[0] === 'enter') {\n            if (lineIndex) {\n              events[lineIndex][1].type = 'lineEndingBlank'\n            }\n            otherEvent[1].type = 'lineEnding'\n            lineIndex = otherIndex\n          }\n        } else {\n          break\n        }\n      }\n      if (lineIndex) {\n        // Fix position.\n        event[1].end = Object.assign({}, events[lineIndex][1].start)\n\n        // Switch container exit w/ line endings.\n        parameters = events.slice(lineIndex, index)\n        parameters.unshift(event)\n        splice(events, lineIndex, index - lineIndex + 1, parameters)\n      }\n    }\n  }\n  return !more\n}\n\n/**\n * Tokenize embedded tokens.\n *\n * @param {Array<Event>} events\n * @param {number} eventIndex\n * @returns {Record<string, number>}\n */\nfunction subcontent(events, eventIndex) {\n  const token = events[eventIndex][1]\n  const context = events[eventIndex][2]\n  let startPosition = eventIndex - 1\n  /** @type {Array<number>} */\n  const startPositions = []\n  const tokenizer =\n    token._tokenizer || context.parser[token.contentType](token.start)\n  const childEvents = tokenizer.events\n  /** @type {Array<[number, number]>} */\n  const jumps = []\n  /** @type {Record<string, number>} */\n  const gaps = {}\n  /** @type {Array<Chunk>} */\n  let stream\n  /** @type {Token | undefined} */\n  let previous\n  let index = -1\n  /** @type {Token | undefined} */\n  let current = token\n  let adjust = 0\n  let start = 0\n  const breaks = [start]\n\n  // Loop forward through the linked tokens to pass them in order to the\n  // subtokenizer.\n  while (current) {\n    // Find the position of the event for this token.\n    while (events[++startPosition][1] !== current) {\n      // Empty.\n    }\n    startPositions.push(startPosition)\n    if (!current._tokenizer) {\n      stream = context.sliceStream(current)\n      if (!current.next) {\n        stream.push(null)\n      }\n      if (previous) {\n        tokenizer.defineSkip(current.start)\n      }\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = true\n      }\n      tokenizer.write(stream)\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = undefined\n      }\n    }\n\n    // Unravel the next token.\n    previous = current\n    current = current.next\n  }\n\n  // Now, loop back through all events (and linked tokens), to figure out which\n  // parts belong where.\n  current = token\n  while (++index < childEvents.length) {\n    if (\n      // Find a void token that includes a break.\n      childEvents[index][0] === 'exit' &&\n      childEvents[index - 1][0] === 'enter' &&\n      childEvents[index][1].type === childEvents[index - 1][1].type &&\n      childEvents[index][1].start.line !== childEvents[index][1].end.line\n    ) {\n      start = index + 1\n      breaks.push(start)\n      // Help GC.\n      current._tokenizer = undefined\n      current.previous = undefined\n      current = current.next\n    }\n  }\n\n  // Help GC.\n  tokenizer.events = []\n\n  // If there’s one more token (which is the cases for lines that end in an\n  // EOF), that’s perfect: the last point we found starts it.\n  // If there isn’t then make sure any remaining content is added to it.\n  if (current) {\n    // Help GC.\n    current._tokenizer = undefined\n    current.previous = undefined\n  } else {\n    breaks.pop()\n  }\n\n  // Now splice the events from the subtokenizer into the current events,\n  // moving back to front so that splice indices aren’t affected.\n  index = breaks.length\n  while (index--) {\n    const slice = childEvents.slice(breaks[index], breaks[index + 1])\n    const start = startPositions.pop()\n    jumps.unshift([start, start + slice.length - 1])\n    splice(events, start, 2, slice)\n  }\n  index = -1\n  while (++index < jumps.length) {\n    gaps[adjust + jumps[index][0]] = adjust + jumps[index][1]\n    adjust += jumps[index][1] - jumps[index][0] - 1\n  }\n  return gaps\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {subtokenize} from 'micromark-util-subtokenize'\n/**\n * No name because it must not be turned off.\n * @type {Construct}\n */\nexport const content = {\n  tokenize: tokenizeContent,\n  resolve: resolveContent\n}\n\n/** @type {Construct} */\nconst continuationConstruct = {\n  tokenize: tokenizeContinuation,\n  partial: true\n}\n\n/**\n * Content is transparent: it’s parsed right now. That way, definitions are also\n * parsed right now: before text in paragraphs (specifically, media) are parsed.\n *\n * @type {Resolver}\n */\nfunction resolveContent(events) {\n  subtokenize(events)\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContent(effects, ok) {\n  /** @type {Token | undefined} */\n  let previous\n  return chunkStart\n\n  /**\n   * Before a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkStart(code) {\n    effects.enter('content')\n    previous = effects.enter('chunkContent', {\n      contentType: 'content'\n    })\n    return chunkInside(code)\n  }\n\n  /**\n   * In a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkInside(code) {\n    if (code === null) {\n      return contentEnd(code)\n    }\n\n    // To do: in `markdown-rs`, each line is parsed on its own, and everything\n    // is stitched together resolving.\n    if (markdownLineEnding(code)) {\n      return effects.check(\n        continuationConstruct,\n        contentContinue,\n        contentEnd\n      )(code)\n    }\n\n    // Data.\n    effects.consume(code)\n    return chunkInside\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentEnd(code) {\n    effects.exit('chunkContent')\n    effects.exit('content')\n    return ok(code)\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentContinue(code) {\n    effects.consume(code)\n    effects.exit('chunkContent')\n    previous.next = effects.enter('chunkContent', {\n      contentType: 'content',\n      previous\n    })\n    previous = previous.next\n    return chunkInside\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContinuation(effects, ok, nok) {\n  const self = this\n  return startLookahead\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function startLookahead(code) {\n    effects.exit('chunkContent')\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, prefixed, 'linePrefix')\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function prefixed(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code)\n    }\n\n    // Always populated by defaults.\n\n    const tail = self.events[self.events.length - 1]\n    if (\n      !self.parser.constructs.disable.null.includes('codeIndented') &&\n      tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n    ) {\n      return ok(code)\n    }\n    return effects.interrupt(self.parser.constructs.flow, nok, ok)(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nimport {blankLine, content} from 'micromark-core-commonmark'\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {InitialConstruct} */\nexport const flow = {\n  tokenize: initializeFlow\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeFlow(effects) {\n  const self = this\n  const initial = effects.attempt(\n    // Try to parse a blank line.\n    blankLine,\n    atBlankEnding,\n    // Try to parse initial flow (essentially, only code).\n    effects.attempt(\n      this.parser.constructs.flowInitial,\n      afterConstruct,\n      factorySpace(\n        effects,\n        effects.attempt(\n          this.parser.constructs.flow,\n          afterConstruct,\n          effects.attempt(content, afterConstruct)\n        ),\n        'linePrefix'\n      )\n    )\n  )\n  return initial\n\n  /** @type {State} */\n  function atBlankEnding(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEndingBlank')\n    effects.consume(code)\n    effects.exit('lineEndingBlank')\n    self.currentConstruct = undefined\n    return initial\n  }\n\n  /** @type {State} */\n  function afterConstruct(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    self.currentConstruct = undefined\n    return initial\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nexport const resolver = {\n  resolveAll: createResolver()\n}\nexport const string = initializeFactory('string')\nexport const text = initializeFactory('text')\n\n/**\n * @param {'string' | 'text'} field\n * @returns {InitialConstruct}\n */\nfunction initializeFactory(field) {\n  return {\n    tokenize: initializeText,\n    resolveAll: createResolver(\n      field === 'text' ? resolveAllLineSuffixes : undefined\n    )\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Initializer}\n   */\n  function initializeText(effects) {\n    const self = this\n    const constructs = this.parser.constructs[field]\n    const text = effects.attempt(constructs, start, notText)\n    return start\n\n    /** @type {State} */\n    function start(code) {\n      return atBreak(code) ? text(code) : notText(code)\n    }\n\n    /** @type {State} */\n    function notText(code) {\n      if (code === null) {\n        effects.consume(code)\n        return\n      }\n      effects.enter('data')\n      effects.consume(code)\n      return data\n    }\n\n    /** @type {State} */\n    function data(code) {\n      if (atBreak(code)) {\n        effects.exit('data')\n        return text(code)\n      }\n\n      // Data.\n      effects.consume(code)\n      return data\n    }\n\n    /**\n     * @param {Code} code\n     * @returns {boolean}\n     */\n    function atBreak(code) {\n      if (code === null) {\n        return true\n      }\n      const list = constructs[code]\n      let index = -1\n      if (list) {\n        // Always populated by defaults.\n\n        while (++index < list.length) {\n          const item = list[index]\n          if (!item.previous || item.previous.call(self, self.previous)) {\n            return true\n          }\n        }\n      }\n      return false\n    }\n  }\n}\n\n/**\n * @param {Resolver | undefined} [extraResolver]\n * @returns {Resolver}\n */\nfunction createResolver(extraResolver) {\n  return resolveAllText\n\n  /** @type {Resolver} */\n  function resolveAllText(events, context) {\n    let index = -1\n    /** @type {number | undefined} */\n    let enter\n\n    // A rather boring computation (to merge adjacent `data` events) which\n    // improves mm performance by 29%.\n    while (++index <= events.length) {\n      if (enter === undefined) {\n        if (events[index] && events[index][1].type === 'data') {\n          enter = index\n          index++\n        }\n      } else if (!events[index] || events[index][1].type !== 'data') {\n        // Don’t do anything if there is one data token.\n        if (index !== enter + 2) {\n          events[enter][1].end = events[index - 1][1].end\n          events.splice(enter + 2, index - enter - 2)\n          index = enter + 2\n        }\n        enter = undefined\n      }\n    }\n    return extraResolver ? extraResolver(events, context) : events\n  }\n}\n\n/**\n * A rather ugly set of instructions which again looks at chunks in the input\n * stream.\n * The reason to do this here is that it is *much* faster to parse in reverse.\n * And that we can’t hook into `null` to split the line suffix before an EOF.\n * To do: figure out if we can make this into a clean utility, or even in core.\n * As it will be useful for GFMs literal autolink extension (and maybe even\n * tables?)\n *\n * @type {Resolver}\n */\nfunction resolveAllLineSuffixes(events, context) {\n  let eventIndex = 0 // Skip first.\n\n  while (++eventIndex <= events.length) {\n    if (\n      (eventIndex === events.length ||\n        events[eventIndex][1].type === 'lineEnding') &&\n      events[eventIndex - 1][1].type === 'data'\n    ) {\n      const data = events[eventIndex - 1][1]\n      const chunks = context.sliceStream(data)\n      let index = chunks.length\n      let bufferIndex = -1\n      let size = 0\n      /** @type {boolean | undefined} */\n      let tabs\n      while (index--) {\n        const chunk = chunks[index]\n        if (typeof chunk === 'string') {\n          bufferIndex = chunk.length\n          while (chunk.charCodeAt(bufferIndex - 1) === 32) {\n            size++\n            bufferIndex--\n          }\n          if (bufferIndex) break\n          bufferIndex = -1\n        }\n        // Number\n        else if (chunk === -2) {\n          tabs = true\n          size++\n        } else if (chunk === -1) {\n          // Empty\n        } else {\n          // Replacement character, exit.\n          index++\n          break\n        }\n      }\n      if (size) {\n        const token = {\n          type:\n            eventIndex === events.length || tabs || size < 2\n              ? 'lineSuffix'\n              : 'hardBreakTrailing',\n          start: {\n            line: data.end.line,\n            column: data.end.column - size,\n            offset: data.end.offset - size,\n            _index: data.start._index + index,\n            _bufferIndex: index\n              ? bufferIndex\n              : data.start._bufferIndex + bufferIndex\n          },\n          end: Object.assign({}, data.end)\n        }\n        data.end = Object.assign({}, token.start)\n        if (data.start.offset === data.end.offset) {\n          Object.assign(data, token)\n        } else {\n          events.splice(\n            eventIndex,\n            0,\n            ['enter', token, context],\n            ['exit', token, context]\n          )\n          eventIndex += 2\n        }\n      }\n      eventIndex++\n    }\n  }\n  return events\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\n/**\n * Call all `resolveAll`s.\n *\n * @param {Array<{resolveAll?: Resolver | undefined}>} constructs\n *   List of constructs, optionally with `resolveAll`s.\n * @param {Array<Event>} events\n *   List of events.\n * @param {TokenizeContext} context\n *   Context used by `tokenize`.\n * @returns {Array<Event>}\n *   Changed events.\n */\nexport function resolveAll(constructs, events, context) {\n  /** @type {Array<Resolver>} */\n  const called = []\n  let index = -1\n\n  while (++index < constructs.length) {\n    const resolve = constructs[index].resolveAll\n\n    if (resolve && !called.includes(resolve)) {\n      events = resolve(events, context)\n      called.push(resolve)\n    }\n  }\n\n  return events\n}\n","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ConstructRecord} ConstructRecord\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenType} TokenType\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\n/**\n * @callback Restore\n * @returns {void}\n *\n * @typedef Info\n * @property {Restore} restore\n * @property {number} from\n *\n * @callback ReturnHandle\n *   Handle a successful run.\n * @param {Construct} construct\n * @param {Info} info\n * @returns {void}\n */\n\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {push, splice} from 'micromark-util-chunked'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/**\n * Create a tokenizer.\n * Tokenizers deal with one type of data (e.g., containers, flow, text).\n * The parser is the object dealing with it all.\n * `initialize` works like other constructs, except that only its `tokenize`\n * function is used, in which case it doesn’t receive an `ok` or `nok`.\n * `from` can be given to set the point before the first character, although\n * when further lines are indented, they must be set with `defineSkip`.\n *\n * @param {ParseContext} parser\n * @param {InitialConstruct} initialize\n * @param {Omit<Point, '_bufferIndex' | '_index'> | undefined} [from]\n * @returns {TokenizeContext}\n */\nexport function createTokenizer(parser, initialize, from) {\n  /** @type {Point} */\n  let point = Object.assign(\n    from\n      ? Object.assign({}, from)\n      : {\n          line: 1,\n          column: 1,\n          offset: 0\n        },\n    {\n      _index: 0,\n      _bufferIndex: -1\n    }\n  )\n  /** @type {Record<string, number>} */\n  const columnStart = {}\n  /** @type {Array<Construct>} */\n  const resolveAllConstructs = []\n  /** @type {Array<Chunk>} */\n  let chunks = []\n  /** @type {Array<Token>} */\n  let stack = []\n  /** @type {boolean | undefined} */\n  let consumed = true\n\n  /**\n   * Tools used for tokenizing.\n   *\n   * @type {Effects}\n   */\n  const effects = {\n    consume,\n    enter,\n    exit,\n    attempt: constructFactory(onsuccessfulconstruct),\n    check: constructFactory(onsuccessfulcheck),\n    interrupt: constructFactory(onsuccessfulcheck, {\n      interrupt: true\n    })\n  }\n\n  /**\n   * State and tools for resolving and serializing.\n   *\n   * @type {TokenizeContext}\n   */\n  const context = {\n    previous: null,\n    code: null,\n    containerState: {},\n    events: [],\n    parser,\n    sliceStream,\n    sliceSerialize,\n    now,\n    defineSkip,\n    write\n  }\n\n  /**\n   * The state function.\n   *\n   * @type {State | void}\n   */\n  let state = initialize.tokenize.call(context, effects)\n\n  /**\n   * Track which character we expect to be consumed, to catch bugs.\n   *\n   * @type {Code}\n   */\n  let expectedCode\n  if (initialize.resolveAll) {\n    resolveAllConstructs.push(initialize)\n  }\n  return context\n\n  /** @type {TokenizeContext['write']} */\n  function write(slice) {\n    chunks = push(chunks, slice)\n    main()\n\n    // Exit if we’re not done, resolve might change stuff.\n    if (chunks[chunks.length - 1] !== null) {\n      return []\n    }\n    addResult(initialize, 0)\n\n    // Otherwise, resolve, and exit.\n    context.events = resolveAll(resolveAllConstructs, context.events, context)\n    return context.events\n  }\n\n  //\n  // Tools.\n  //\n\n  /** @type {TokenizeContext['sliceSerialize']} */\n  function sliceSerialize(token, expandTabs) {\n    return serializeChunks(sliceStream(token), expandTabs)\n  }\n\n  /** @type {TokenizeContext['sliceStream']} */\n  function sliceStream(token) {\n    return sliceChunks(chunks, token)\n  }\n\n  /** @type {TokenizeContext['now']} */\n  function now() {\n    // This is a hot path, so we clone manually instead of `Object.assign({}, point)`\n    const {line, column, offset, _index, _bufferIndex} = point\n    return {\n      line,\n      column,\n      offset,\n      _index,\n      _bufferIndex\n    }\n  }\n\n  /** @type {TokenizeContext['defineSkip']} */\n  function defineSkip(value) {\n    columnStart[value.line] = value.column\n    accountForPotentialSkip()\n  }\n\n  //\n  // State management.\n  //\n\n  /**\n   * Main loop (note that `_index` and `_bufferIndex` in `point` are modified by\n   * `consume`).\n   * Here is where we walk through the chunks, which either include strings of\n   * several characters, or numerical character codes.\n   * The reason to do this in a loop instead of a call is so the stack can\n   * drain.\n   *\n   * @returns {void}\n   */\n  function main() {\n    /** @type {number} */\n    let chunkIndex\n    while (point._index < chunks.length) {\n      const chunk = chunks[point._index]\n\n      // If we’re in a buffer chunk, loop through it.\n      if (typeof chunk === 'string') {\n        chunkIndex = point._index\n        if (point._bufferIndex < 0) {\n          point._bufferIndex = 0\n        }\n        while (\n          point._index === chunkIndex &&\n          point._bufferIndex < chunk.length\n        ) {\n          go(chunk.charCodeAt(point._bufferIndex))\n        }\n      } else {\n        go(chunk)\n      }\n    }\n  }\n\n  /**\n   * Deal with one code.\n   *\n   * @param {Code} code\n   * @returns {void}\n   */\n  function go(code) {\n    consumed = undefined\n    expectedCode = code\n    state = state(code)\n  }\n\n  /** @type {Effects['consume']} */\n  function consume(code) {\n    if (markdownLineEnding(code)) {\n      point.line++\n      point.column = 1\n      point.offset += code === -3 ? 2 : 1\n      accountForPotentialSkip()\n    } else if (code !== -1) {\n      point.column++\n      point.offset++\n    }\n\n    // Not in a string chunk.\n    if (point._bufferIndex < 0) {\n      point._index++\n    } else {\n      point._bufferIndex++\n\n      // At end of string chunk.\n      // @ts-expect-error Points w/ non-negative `_bufferIndex` reference\n      // strings.\n      if (point._bufferIndex === chunks[point._index].length) {\n        point._bufferIndex = -1\n        point._index++\n      }\n    }\n\n    // Expose the previous character.\n    context.previous = code\n\n    // Mark as consumed.\n    consumed = true\n  }\n\n  /** @type {Effects['enter']} */\n  function enter(type, fields) {\n    /** @type {Token} */\n    // @ts-expect-error Patch instead of assign required fields to help GC.\n    const token = fields || {}\n    token.type = type\n    token.start = now()\n    context.events.push(['enter', token, context])\n    stack.push(token)\n    return token\n  }\n\n  /** @type {Effects['exit']} */\n  function exit(type) {\n    const token = stack.pop()\n    token.end = now()\n    context.events.push(['exit', token, context])\n    return token\n  }\n\n  /**\n   * Use results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulconstruct(construct, info) {\n    addResult(construct, info.from)\n  }\n\n  /**\n   * Discard results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulcheck(_, info) {\n    info.restore()\n  }\n\n  /**\n   * Factory to attempt/check/interrupt.\n   *\n   * @param {ReturnHandle} onreturn\n   * @param {{interrupt?: boolean | undefined} | undefined} [fields]\n   */\n  function constructFactory(onreturn, fields) {\n    return hook\n\n    /**\n     * Handle either an object mapping codes to constructs, a list of\n     * constructs, or a single construct.\n     *\n     * @param {Array<Construct> | Construct | ConstructRecord} constructs\n     * @param {State} returnState\n     * @param {State | undefined} [bogusState]\n     * @returns {State}\n     */\n    function hook(constructs, returnState, bogusState) {\n      /** @type {Array<Construct>} */\n      let listOfConstructs\n      /** @type {number} */\n      let constructIndex\n      /** @type {Construct} */\n      let currentConstruct\n      /** @type {Info} */\n      let info\n      return Array.isArray(constructs) /* c8 ignore next 1 */\n        ? handleListOfConstructs(constructs)\n        : 'tokenize' in constructs\n        ? // @ts-expect-error Looks like a construct.\n          handleListOfConstructs([constructs])\n        : handleMapOfConstructs(constructs)\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {ConstructRecord} map\n       * @returns {State}\n       */\n      function handleMapOfConstructs(map) {\n        return start\n\n        /** @type {State} */\n        function start(code) {\n          const def = code !== null && map[code]\n          const all = code !== null && map.null\n          const list = [\n            // To do: add more extension tests.\n            /* c8 ignore next 2 */\n            ...(Array.isArray(def) ? def : def ? [def] : []),\n            ...(Array.isArray(all) ? all : all ? [all] : [])\n          ]\n          return handleListOfConstructs(list)(code)\n        }\n      }\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {Array<Construct>} list\n       * @returns {State}\n       */\n      function handleListOfConstructs(list) {\n        listOfConstructs = list\n        constructIndex = 0\n        if (list.length === 0) {\n          return bogusState\n        }\n        return handleConstruct(list[constructIndex])\n      }\n\n      /**\n       * Handle a single construct.\n       *\n       * @param {Construct} construct\n       * @returns {State}\n       */\n      function handleConstruct(construct) {\n        return start\n\n        /** @type {State} */\n        function start(code) {\n          // To do: not needed to store if there is no bogus state, probably?\n          // Currently doesn’t work because `inspect` in document does a check\n          // w/o a bogus, which doesn’t make sense. But it does seem to help perf\n          // by not storing.\n          info = store()\n          currentConstruct = construct\n          if (!construct.partial) {\n            context.currentConstruct = construct\n          }\n\n          // Always populated by defaults.\n\n          if (\n            construct.name &&\n            context.parser.constructs.disable.null.includes(construct.name)\n          ) {\n            return nok(code)\n          }\n          return construct.tokenize.call(\n            // If we do have fields, create an object w/ `context` as its\n            // prototype.\n            // This allows a “live binding”, which is needed for `interrupt`.\n            fields ? Object.assign(Object.create(context), fields) : context,\n            effects,\n            ok,\n            nok\n          )(code)\n        }\n      }\n\n      /** @type {State} */\n      function ok(code) {\n        consumed = true\n        onreturn(currentConstruct, info)\n        return returnState\n      }\n\n      /** @type {State} */\n      function nok(code) {\n        consumed = true\n        info.restore()\n        if (++constructIndex < listOfConstructs.length) {\n          return handleConstruct(listOfConstructs[constructIndex])\n        }\n        return bogusState\n      }\n    }\n  }\n\n  /**\n   * @param {Construct} construct\n   * @param {number} from\n   * @returns {void}\n   */\n  function addResult(construct, from) {\n    if (construct.resolveAll && !resolveAllConstructs.includes(construct)) {\n      resolveAllConstructs.push(construct)\n    }\n    if (construct.resolve) {\n      splice(\n        context.events,\n        from,\n        context.events.length - from,\n        construct.resolve(context.events.slice(from), context)\n      )\n    }\n    if (construct.resolveTo) {\n      context.events = construct.resolveTo(context.events, context)\n    }\n  }\n\n  /**\n   * Store state.\n   *\n   * @returns {Info}\n   */\n  function store() {\n    const startPoint = now()\n    const startPrevious = context.previous\n    const startCurrentConstruct = context.currentConstruct\n    const startEventsIndex = context.events.length\n    const startStack = Array.from(stack)\n    return {\n      restore,\n      from: startEventsIndex\n    }\n\n    /**\n     * Restore state.\n     *\n     * @returns {void}\n     */\n    function restore() {\n      point = startPoint\n      context.previous = startPrevious\n      context.currentConstruct = startCurrentConstruct\n      context.events.length = startEventsIndex\n      stack = startStack\n      accountForPotentialSkip()\n    }\n  }\n\n  /**\n   * Move the current point a bit forward in the line when it’s on a column\n   * skip.\n   *\n   * @returns {void}\n   */\n  function accountForPotentialSkip() {\n    if (point.line in columnStart && point.column < 2) {\n      point.column = columnStart[point.line]\n      point.offset += columnStart[point.line] - 1\n    }\n  }\n}\n\n/**\n * Get the chunks from a slice of chunks in the range of a token.\n *\n * @param {Array<Chunk>} chunks\n * @param {Pick<Token, 'end' | 'start'>} token\n * @returns {Array<Chunk>}\n */\nfunction sliceChunks(chunks, token) {\n  const startIndex = token.start._index\n  const startBufferIndex = token.start._bufferIndex\n  const endIndex = token.end._index\n  const endBufferIndex = token.end._bufferIndex\n  /** @type {Array<Chunk>} */\n  let view\n  if (startIndex === endIndex) {\n    // @ts-expect-error `_bufferIndex` is used on string chunks.\n    view = [chunks[startIndex].slice(startBufferIndex, endBufferIndex)]\n  } else {\n    view = chunks.slice(startIndex, endIndex)\n    if (startBufferIndex > -1) {\n      const head = view[0]\n      if (typeof head === 'string') {\n        view[0] = head.slice(startBufferIndex)\n      } else {\n        view.shift()\n      }\n    }\n    if (endBufferIndex > 0) {\n      // @ts-expect-error `_bufferIndex` is used on string chunks.\n      view.push(chunks[endIndex].slice(0, endBufferIndex))\n    }\n  }\n  return view\n}\n\n/**\n * Get the string value of a slice of chunks.\n *\n * @param {Array<Chunk>} chunks\n * @param {boolean | undefined} [expandTabs=false]\n * @returns {string}\n */\nfunction serializeChunks(chunks, expandTabs) {\n  let index = -1\n  /** @type {Array<string>} */\n  const result = []\n  /** @type {boolean | undefined} */\n  let atTab\n  while (++index < chunks.length) {\n    const chunk = chunks[index]\n    /** @type {string} */\n    let value\n    if (typeof chunk === 'string') {\n      value = chunk\n    } else\n      switch (chunk) {\n        case -5: {\n          value = '\\r'\n          break\n        }\n        case -4: {\n          value = '\\n'\n          break\n        }\n        case -3: {\n          value = '\\r' + '\\n'\n          break\n        }\n        case -2: {\n          value = expandTabs ? ' ' : '\\t'\n          break\n        }\n        case -1: {\n          if (!expandTabs && atTab) continue\n          value = ' '\n          break\n        }\n        default: {\n          // Currently only replacement character.\n          value = String.fromCharCode(chunk)\n        }\n      }\n    atTab = chunk === -2\n    result.push(value)\n  }\n  return result.join('')\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const thematicBreak = {\n  name: 'thematicBreak',\n  tokenize: tokenizeThematicBreak\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeThematicBreak(effects, ok, nok) {\n  let size = 0\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Start of thematic break.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('thematicBreak')\n    // To do: parse indent like `markdown-rs`.\n    return before(code)\n  }\n\n  /**\n   * After optional whitespace, at marker.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    marker = code\n    return atBreak(code)\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.enter('thematicBreakSequence')\n      return sequence(code)\n    }\n    if (size >= 3 && (code === null || markdownLineEnding(code))) {\n      effects.exit('thematicBreak')\n      return ok(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequence(code) {\n    if (code === marker) {\n      effects.consume(code)\n      size++\n      return sequence\n    }\n    effects.exit('thematicBreakSequence')\n    return markdownSpace(code)\n      ? factorySpace(effects, atBreak, 'whitespace')(code)\n      : atBreak(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ContainerState} ContainerState\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {asciiDigit, markdownSpace} from 'micromark-util-character'\nimport {blankLine} from './blank-line.js'\nimport {thematicBreak} from './thematic-break.js'\n\n/** @type {Construct} */\nexport const list = {\n  name: 'list',\n  tokenize: tokenizeListStart,\n  continuation: {\n    tokenize: tokenizeListContinuation\n  },\n  exit: tokenizeListEnd\n}\n\n/** @type {Construct} */\nconst listItemPrefixWhitespaceConstruct = {\n  tokenize: tokenizeListItemPrefixWhitespace,\n  partial: true\n}\n\n/** @type {Construct} */\nconst indentConstruct = {\n  tokenize: tokenizeIndent,\n  partial: true\n}\n\n// To do: `markdown-rs` parses list items on their own and later stitches them\n// together.\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListStart(effects, ok, nok) {\n  const self = this\n  const tail = self.events[self.events.length - 1]\n  let initialSize =\n    tail && tail[1].type === 'linePrefix'\n      ? tail[2].sliceSerialize(tail[1], true).length\n      : 0\n  let size = 0\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    const kind =\n      self.containerState.type ||\n      (code === 42 || code === 43 || code === 45\n        ? 'listUnordered'\n        : 'listOrdered')\n    if (\n      kind === 'listUnordered'\n        ? !self.containerState.marker || code === self.containerState.marker\n        : asciiDigit(code)\n    ) {\n      if (!self.containerState.type) {\n        self.containerState.type = kind\n        effects.enter(kind, {\n          _container: true\n        })\n      }\n      if (kind === 'listUnordered') {\n        effects.enter('listItemPrefix')\n        return code === 42 || code === 45\n          ? effects.check(thematicBreak, nok, atMarker)(code)\n          : atMarker(code)\n      }\n      if (!self.interrupt || code === 49) {\n        effects.enter('listItemPrefix')\n        effects.enter('listItemValue')\n        return inside(code)\n      }\n    }\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function inside(code) {\n    if (asciiDigit(code) && ++size < 10) {\n      effects.consume(code)\n      return inside\n    }\n    if (\n      (!self.interrupt || size < 2) &&\n      (self.containerState.marker\n        ? code === self.containerState.marker\n        : code === 41 || code === 46)\n    ) {\n      effects.exit('listItemValue')\n      return atMarker(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * @type {State}\n   **/\n  function atMarker(code) {\n    effects.enter('listItemMarker')\n    effects.consume(code)\n    effects.exit('listItemMarker')\n    self.containerState.marker = self.containerState.marker || code\n    return effects.check(\n      blankLine,\n      // Can’t be empty when interrupting.\n      self.interrupt ? nok : onBlank,\n      effects.attempt(\n        listItemPrefixWhitespaceConstruct,\n        endOfPrefix,\n        otherPrefix\n      )\n    )\n  }\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.initialBlankLine = true\n    initialSize++\n    return endOfPrefix(code)\n  }\n\n  /** @type {State} */\n  function otherPrefix(code) {\n    if (markdownSpace(code)) {\n      effects.enter('listItemPrefixWhitespace')\n      effects.consume(code)\n      effects.exit('listItemPrefixWhitespace')\n      return endOfPrefix\n    }\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function endOfPrefix(code) {\n    self.containerState.size =\n      initialSize +\n      self.sliceSerialize(effects.exit('listItemPrefix'), true).length\n    return ok(code)\n  }\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListContinuation(effects, ok, nok) {\n  const self = this\n  self.containerState._closeFlow = undefined\n  return effects.check(blankLine, onBlank, notBlank)\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.furtherBlankLines =\n      self.containerState.furtherBlankLines ||\n      self.containerState.initialBlankLine\n\n    // We have a blank line.\n    // Still, try to consume at most the items size.\n    return factorySpace(\n      effects,\n      ok,\n      'listItemIndent',\n      self.containerState.size + 1\n    )(code)\n  }\n\n  /** @type {State} */\n  function notBlank(code) {\n    if (self.containerState.furtherBlankLines || !markdownSpace(code)) {\n      self.containerState.furtherBlankLines = undefined\n      self.containerState.initialBlankLine = undefined\n      return notInCurrentItem(code)\n    }\n    self.containerState.furtherBlankLines = undefined\n    self.containerState.initialBlankLine = undefined\n    return effects.attempt(indentConstruct, ok, notInCurrentItem)(code)\n  }\n\n  /** @type {State} */\n  function notInCurrentItem(code) {\n    // While we do continue, we signal that the flow should be closed.\n    self.containerState._closeFlow = true\n    // As we’re closing flow, we’re no longer interrupting.\n    self.interrupt = undefined\n    // Always populated by defaults.\n\n    return factorySpace(\n      effects,\n      effects.attempt(list, ok, nok),\n      'linePrefix',\n      self.parser.constructs.disable.null.includes('codeIndented')\n        ? undefined\n        : 4\n    )(code)\n  }\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'listItemIndent',\n    self.containerState.size + 1\n  )\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'listItemIndent' &&\n      tail[2].sliceSerialize(tail[1], true).length === self.containerState.size\n      ? ok(code)\n      : nok(code)\n  }\n}\n\n/**\n * @type {Exiter}\n * @this {TokenizeContext}\n */\nfunction tokenizeListEnd(effects) {\n  effects.exit(this.containerState.type)\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListItemPrefixWhitespace(effects, ok, nok) {\n  const self = this\n\n  // Always populated by defaults.\n\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'listItemPrefixWhitespace',\n    self.parser.constructs.disable.null.includes('codeIndented')\n      ? undefined\n      : 4 + 1\n  )\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return !markdownSpace(code) &&\n      tail &&\n      tail[1].type === 'listItemPrefixWhitespace'\n      ? ok(code)\n      : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const blockQuote = {\n  name: 'blockQuote',\n  tokenize: tokenizeBlockQuoteStart,\n  continuation: {\n    tokenize: tokenizeBlockQuoteContinuation\n  },\n  exit\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteStart(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of block quote.\n   *\n   * ```markdown\n   * > | > a\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 62) {\n      const state = self.containerState\n      if (!state.open) {\n        effects.enter('blockQuote', {\n          _container: true\n        })\n        state.open = true\n      }\n      effects.enter('blockQuotePrefix')\n      effects.enter('blockQuoteMarker')\n      effects.consume(code)\n      effects.exit('blockQuoteMarker')\n      return after\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `>`, before optional whitespace.\n   *\n   * ```markdown\n   * > | > a\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (markdownSpace(code)) {\n      effects.enter('blockQuotePrefixWhitespace')\n      effects.consume(code)\n      effects.exit('blockQuotePrefixWhitespace')\n      effects.exit('blockQuotePrefix')\n      return ok\n    }\n    effects.exit('blockQuotePrefix')\n    return ok(code)\n  }\n}\n\n/**\n * Start of block quote continuation.\n *\n * ```markdown\n *   | > a\n * > | > b\n *     ^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteContinuation(effects, ok, nok) {\n  const self = this\n  return contStart\n\n  /**\n   * Start of block quote continuation.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contStart(code) {\n    if (markdownSpace(code)) {\n      // Always populated by defaults.\n\n      return factorySpace(\n        effects,\n        contBefore,\n        'linePrefix',\n        self.parser.constructs.disable.null.includes('codeIndented')\n          ? undefined\n          : 4\n      )(code)\n    }\n    return contBefore(code)\n  }\n\n  /**\n   * At `>`, after optional whitespace.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contBefore(code) {\n    return effects.attempt(blockQuote, ok, nok)(code)\n  }\n}\n\n/** @type {Exiter} */\nfunction exit(effects) {\n  effects.exit('blockQuote')\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {\n  asciiControl,\n  markdownLineEndingOrSpace,\n  markdownLineEnding\n} from 'micromark-util-character'\n/**\n * Parse destinations.\n *\n * ###### Examples\n *\n * ```markdown\n * <a>\n * <a\\>b>\n * <a b>\n * <a)>\n * a\n * a\\)b\n * a(b)c\n * a(b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type for whole (`<a>` or `b`).\n * @param {TokenType} literalType\n *   Type when enclosed (`<a>`).\n * @param {TokenType} literalMarkerType\n *   Type for enclosing (`<` and `>`).\n * @param {TokenType} rawType\n *   Type when not enclosed (`b`).\n * @param {TokenType} stringType\n *   Type for the value (`a` or `b`).\n * @param {number | undefined} [max=Infinity]\n *   Depth of nested parens (inclusive).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryDestination(\n  effects,\n  ok,\n  nok,\n  type,\n  literalType,\n  literalMarkerType,\n  rawType,\n  stringType,\n  max\n) {\n  const limit = max || Number.POSITIVE_INFINITY\n  let balance = 0\n  return start\n\n  /**\n   * Start of destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *     ^\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 60) {\n      effects.enter(type)\n      effects.enter(literalType)\n      effects.enter(literalMarkerType)\n      effects.consume(code)\n      effects.exit(literalMarkerType)\n      return enclosedBefore\n    }\n\n    // ASCII control, space, closing paren.\n    if (code === null || code === 32 || code === 41 || asciiControl(code)) {\n      return nok(code)\n    }\n    effects.enter(type)\n    effects.enter(rawType)\n    effects.enter(stringType)\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return raw(code)\n  }\n\n  /**\n   * After `<`, at an enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosedBefore(code) {\n    if (code === 62) {\n      effects.enter(literalMarkerType)\n      effects.consume(code)\n      effects.exit(literalMarkerType)\n      effects.exit(literalType)\n      effects.exit(type)\n      return ok\n    }\n    effects.enter(stringType)\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return enclosed(code)\n  }\n\n  /**\n   * In enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosed(code) {\n    if (code === 62) {\n      effects.exit('chunkString')\n      effects.exit(stringType)\n      return enclosedBefore(code)\n    }\n    if (code === null || code === 60 || markdownLineEnding(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return code === 92 ? enclosedEscape : enclosed\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | <a\\*a>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosedEscape(code) {\n    if (code === 60 || code === 62 || code === 92) {\n      effects.consume(code)\n      return enclosed\n    }\n    return enclosed(code)\n  }\n\n  /**\n   * In raw destination.\n   *\n   * ```markdown\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function raw(code) {\n    if (\n      !balance &&\n      (code === null || code === 41 || markdownLineEndingOrSpace(code))\n    ) {\n      effects.exit('chunkString')\n      effects.exit(stringType)\n      effects.exit(rawType)\n      effects.exit(type)\n      return ok(code)\n    }\n    if (balance < limit && code === 40) {\n      effects.consume(code)\n      balance++\n      return raw\n    }\n    if (code === 41) {\n      effects.consume(code)\n      balance--\n      return raw\n    }\n\n    // ASCII control (but *not* `\\0`) and space and `(`.\n    // Note: in `markdown-rs`, `\\0` exists in codes, in `micromark-js` it\n    // doesn’t.\n    if (code === null || code === 32 || code === 40 || asciiControl(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return code === 92 ? rawEscape : raw\n  }\n\n  /**\n   * After `\\`, at special character.\n   *\n   * ```markdown\n   * > | a\\*a\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function rawEscape(code) {\n    if (code === 40 || code === 41 || code === 92) {\n      effects.consume(code)\n      return raw\n    }\n    return raw(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/**\n * Parse labels.\n *\n * > 👉 **Note**: labels in markdown are capped at 999 characters in the string.\n *\n * ###### Examples\n *\n * ```markdown\n * [a]\n * [a\n * b]\n * [a\\]b]\n * ```\n *\n * @this {TokenizeContext}\n *   Tokenize context.\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole label (`[a]`).\n * @param {TokenType} markerType\n *   Type for the markers (`[` and `]`).\n * @param {TokenType} stringType\n *   Type for the identifier (`a`).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryLabel(effects, ok, nok, type, markerType, stringType) {\n  const self = this\n  let size = 0\n  /** @type {boolean} */\n  let seen\n  return start\n\n  /**\n   * Start of label.\n   *\n   * ```markdown\n   * > | [a]\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(type)\n    effects.enter(markerType)\n    effects.consume(code)\n    effects.exit(markerType)\n    effects.enter(stringType)\n    return atBreak\n  }\n\n  /**\n   * In label, at something, before something else.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (\n      size > 999 ||\n      code === null ||\n      code === 91 ||\n      (code === 93 && !seen) ||\n      // To do: remove in the future once we’ve switched from\n      // `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n      // which doesn’t need this.\n      // Hidden footnotes hook.\n      /* c8 ignore next 3 */\n      (code === 94 &&\n        !size &&\n        '_hiddenFootnoteSupport' in self.parser.constructs)\n    ) {\n      return nok(code)\n    }\n    if (code === 93) {\n      effects.exit(stringType)\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n\n    // To do: indent? Link chunks and EOLs together?\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return atBreak\n    }\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return labelInside(code)\n  }\n\n  /**\n   * In label, in text.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelInside(code) {\n    if (\n      code === null ||\n      code === 91 ||\n      code === 93 ||\n      markdownLineEnding(code) ||\n      size++ > 999\n    ) {\n      effects.exit('chunkString')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    if (!seen) seen = !markdownSpace(code)\n    return code === 92 ? labelEscape : labelInside\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | [a\\*a]\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code)\n      size++\n      return labelInside\n    }\n    return labelInside(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/**\n * Parse titles.\n *\n * ###### Examples\n *\n * ```markdown\n * \"a\"\n * 'b'\n * (c)\n * \"a\n * b\"\n * 'a\n *     b'\n * (a\\)b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole title (`\"a\"`, `'b'`, `(c)`).\n * @param {TokenType} markerType\n *   Type for the markers (`\"`, `'`, `(`, and `)`).\n * @param {TokenType} stringType\n *   Type for the value (`a`).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryTitle(effects, ok, nok, type, markerType, stringType) {\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Start of title.\n   *\n   * ```markdown\n   * > | \"a\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      effects.enter(type)\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      marker = code === 40 ? 41 : code\n      return begin\n    }\n    return nok(code)\n  }\n\n  /**\n   * After opening marker.\n   *\n   * This is also used at the closing marker.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function begin(code) {\n    if (code === marker) {\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n    effects.enter(stringType)\n    return atBreak(code)\n  }\n\n  /**\n   * At something, before something else.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.exit(stringType)\n      return begin(marker)\n    }\n    if (code === null) {\n      return nok(code)\n    }\n\n    // Note: blank lines can’t exist in content.\n    if (markdownLineEnding(code)) {\n      // To do: use `space_or_tab_eol_with_options`, connect.\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return factorySpace(effects, atBreak, 'linePrefix')\n    }\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return inside(code)\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker || code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    return code === 92 ? escape : inside\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | \"a\\*b\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function escape(code) {\n    if (code === marker || code === 92) {\n      effects.consume(code)\n      return inside\n    }\n    return inside(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   line endings or spaces in markdown are often optional, in which case this\n *     factory can be used and `ok` will be switched to whether spaces were found\n *     or not\n * *   one line ending or space can be detected with\n *     `markdownLineEndingOrSpace(code)` right before using `factoryWhitespace`\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @returns\n *   Start state.\n */\nexport function factoryWhitespace(effects, ok) {\n  /** @type {boolean} */\n  let seen\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      seen = true\n      return start\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(\n        effects,\n        start,\n        seen ? 'linePrefix' : 'lineSuffix'\n      )(code)\n    }\n    return ok(code)\n  }\n}\n","/**\n * Normalize an identifier (as found in references, definitions).\n *\n * Collapses markdown whitespace, trim, and then lower- and uppercase.\n *\n * Some characters are considered “uppercase”, such as U+03F4 (`ϴ`), but if their\n * lowercase counterpart (U+03B8 (`θ`)) is uppercased will result in a different\n * uppercase character (U+0398 (`Θ`)).\n * So, to get a canonical form, we perform both lower- and uppercase.\n *\n * Using uppercase last makes sure keys will never interact with default\n * prototypal values (such as `constructor`): nothing in the prototype of\n * `Object` is uppercase.\n *\n * @param {string} value\n *   Identifier to normalize.\n * @returns {string}\n *   Normalized identifier.\n */\nexport function normalizeIdentifier(value) {\n  return (\n    value\n      // Collapse markdown whitespace.\n      .replace(/[\\t\\n\\r ]+/g, ' ')\n      // Trim.\n      .replace(/^ | $/g, '')\n      // Some characters are considered “uppercase”, but if their lowercase\n      // counterpart is uppercased will result in a different uppercase\n      // character.\n      // Hence, to get that form, we perform both lower- and uppercase.\n      // Upper case makes sure keys will not interact with default prototypal\n      // methods: no method is uppercase.\n      .toLowerCase()\n      .toUpperCase()\n  )\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factoryDestination} from 'micromark-factory-destination'\nimport {factoryLabel} from 'micromark-factory-label'\nimport {factorySpace} from 'micromark-factory-space'\nimport {factoryTitle} from 'micromark-factory-title'\nimport {factoryWhitespace} from 'micromark-factory-whitespace'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\n/** @type {Construct} */\nexport const definition = {\n  name: 'definition',\n  tokenize: tokenizeDefinition\n}\n\n/** @type {Construct} */\nconst titleBefore = {\n  tokenize: tokenizeTitleBefore,\n  partial: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDefinition(effects, ok, nok) {\n  const self = this\n  /** @type {string} */\n  let identifier\n  return start\n\n  /**\n   * At start of a definition.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // Do not interrupt paragraphs (but do follow definitions).\n    // To do: do `interrupt` the way `markdown-rs` does.\n    // To do: parse whitespace the way `markdown-rs` does.\n    effects.enter('definition')\n    return before(code)\n  }\n\n  /**\n   * After optional whitespace, at `[`.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    // To do: parse whitespace the way `markdown-rs` does.\n\n    return factoryLabel.call(\n      self,\n      effects,\n      labelAfter,\n      // Note: we don’t need to reset the way `markdown-rs` does.\n      nok,\n      'definitionLabel',\n      'definitionLabelMarker',\n      'definitionLabelString'\n    )(code)\n  }\n\n  /**\n   * After label.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAfter(code) {\n    identifier = normalizeIdentifier(\n      self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)\n    )\n    if (code === 58) {\n      effects.enter('definitionMarker')\n      effects.consume(code)\n      effects.exit('definitionMarker')\n      return markerAfter\n    }\n    return nok(code)\n  }\n\n  /**\n   * After marker.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function markerAfter(code) {\n    // Note: whitespace is optional.\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, destinationBefore)(code)\n      : destinationBefore(code)\n  }\n\n  /**\n   * Before destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationBefore(code) {\n    return factoryDestination(\n      effects,\n      destinationAfter,\n      // Note: we don’t need to reset the way `markdown-rs` does.\n      nok,\n      'definitionDestination',\n      'definitionDestinationLiteral',\n      'definitionDestinationLiteralMarker',\n      'definitionDestinationRaw',\n      'definitionDestinationString'\n    )(code)\n  }\n\n  /**\n   * After destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationAfter(code) {\n    return effects.attempt(titleBefore, after, after)(code)\n  }\n\n  /**\n   * After definition.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return markdownSpace(code)\n      ? factorySpace(effects, afterWhitespace, 'whitespace')(code)\n      : afterWhitespace(code)\n  }\n\n  /**\n   * After definition, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterWhitespace(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('definition')\n\n      // Note: we don’t care about uniqueness.\n      // It’s likely that that doesn’t happen very frequently.\n      // It is more likely that it wastes precious time.\n      self.parser.defined.push(identifier)\n\n      // To do: `markdown-rs` interrupt.\n      // // You’d be interrupting.\n      // tokenizer.interrupt = true\n      return ok(code)\n    }\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTitleBefore(effects, ok, nok) {\n  return titleBefore\n\n  /**\n   * After destination, at whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleBefore(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, beforeMarker)(code)\n      : nok(code)\n  }\n\n  /**\n   * At title.\n   *\n   * ```markdown\n   *   | [a]: b\n   * > | \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeMarker(code) {\n    return factoryTitle(\n      effects,\n      titleAfter,\n      nok,\n      'definitionTitle',\n      'definitionTitleMarker',\n      'definitionTitleString'\n    )(code)\n  }\n\n  /**\n   * After title.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfter(code) {\n    return markdownSpace(code)\n      ? factorySpace(effects, titleAfterOptionalWhitespace, 'whitespace')(code)\n      : titleAfterOptionalWhitespace(code)\n  }\n\n  /**\n   * After title, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfterOptionalWhitespace(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const codeIndented = {\n  name: 'codeIndented',\n  tokenize: tokenizeCodeIndented\n}\n\n/** @type {Construct} */\nconst furtherStart = {\n  tokenize: tokenizeFurtherStart,\n  partial: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeIndented(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of code (indented).\n   *\n   * > **Parsing note**: it is not needed to check if this first line is a\n   * > filled line (that it has a non-whitespace character), because blank lines\n   * > are parsed already, so we never run into that.\n   *\n   * ```markdown\n   * > |     aaa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: manually check if interrupting like `markdown-rs`.\n\n    effects.enter('codeIndented')\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, 'linePrefix', 4 + 1)(code)\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n      ? atBreak(code)\n      : nok(code)\n  }\n\n  /**\n   * At a break.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === null) {\n      return after(code)\n    }\n    if (markdownLineEnding(code)) {\n      return effects.attempt(furtherStart, atBreak, after)(code)\n    }\n    effects.enter('codeFlowValue')\n    return inside(code)\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFlowValue')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    return inside\n  }\n\n  /** @type {State} */\n  function after(code) {\n    effects.exit('codeIndented')\n    // To do: allow interrupting like `markdown-rs`.\n    // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    return ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeFurtherStart(effects, ok, nok) {\n  const self = this\n  return furtherStart\n\n  /**\n   * At eol, trying to parse another indent.\n   *\n   * ```markdown\n   * > |     aaa\n   *            ^\n   *   |     bbb\n   * ```\n   *\n   * @type {State}\n   */\n  function furtherStart(code) {\n    // To do: improve `lazy` / `pierce` handling.\n    // If this is a lazy line, it can’t be code.\n    if (self.parser.lazy[self.now().line]) {\n      return nok(code)\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return furtherStart\n    }\n\n    // To do: the code here in `micromark-js` is a bit different from\n    // `markdown-rs` because there it can attempt spaces.\n    // We can’t yet.\n    //\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, 'linePrefix', 4 + 1)(code)\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n      ? ok(code)\n      : markdownLineEnding(code)\n      ? furtherStart(code)\n      : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {splice} from 'micromark-util-chunked'\n/** @type {Construct} */\nexport const headingAtx = {\n  name: 'headingAtx',\n  tokenize: tokenizeHeadingAtx,\n  resolve: resolveHeadingAtx\n}\n\n/** @type {Resolver} */\nfunction resolveHeadingAtx(events, context) {\n  let contentEnd = events.length - 2\n  let contentStart = 3\n  /** @type {Token} */\n  let content\n  /** @type {Token} */\n  let text\n\n  // Prefix whitespace, part of the opening.\n  if (events[contentStart][1].type === 'whitespace') {\n    contentStart += 2\n  }\n\n  // Suffix whitespace, part of the closing.\n  if (\n    contentEnd - 2 > contentStart &&\n    events[contentEnd][1].type === 'whitespace'\n  ) {\n    contentEnd -= 2\n  }\n  if (\n    events[contentEnd][1].type === 'atxHeadingSequence' &&\n    (contentStart === contentEnd - 1 ||\n      (contentEnd - 4 > contentStart &&\n        events[contentEnd - 2][1].type === 'whitespace'))\n  ) {\n    contentEnd -= contentStart + 1 === contentEnd ? 2 : 4\n  }\n  if (contentEnd > contentStart) {\n    content = {\n      type: 'atxHeadingText',\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end\n    }\n    text = {\n      type: 'chunkText',\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end,\n      contentType: 'text'\n    }\n    splice(events, contentStart, contentEnd - contentStart + 1, [\n      ['enter', content, context],\n      ['enter', text, context],\n      ['exit', text, context],\n      ['exit', content, context]\n    ])\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHeadingAtx(effects, ok, nok) {\n  let size = 0\n  return start\n\n  /**\n   * Start of a heading (atx).\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    effects.enter('atxHeading')\n    return before(code)\n  }\n\n  /**\n   * After optional whitespace, at `#`.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter('atxHeadingSequence')\n    return sequenceOpen(code)\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 35 && size++ < 6) {\n      effects.consume(code)\n      return sequenceOpen\n    }\n\n    // Always at least one `#`.\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      effects.exit('atxHeadingSequence')\n      return atBreak(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ## aa\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === 35) {\n      effects.enter('atxHeadingSequence')\n      return sequenceFurther(code)\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('atxHeading')\n      // To do: interrupt like `markdown-rs`.\n      // // Feel free to interrupt.\n      // tokenizer.interrupt = false\n      return ok(code)\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(effects, atBreak, 'whitespace')(code)\n    }\n\n    // To do: generate `data` tokens, add the `text` token later.\n    // Needs edit map, see: `markdown.rs`.\n    effects.enter('atxHeadingText')\n    return data(code)\n  }\n\n  /**\n   * In further sequence (after whitespace).\n   *\n   * Could be normal “visible” hashes in the heading or a final sequence.\n   *\n   * ```markdown\n   * > | ## aa ##\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceFurther(code) {\n    if (code === 35) {\n      effects.consume(code)\n      return sequenceFurther\n    }\n    effects.exit('atxHeadingSequence')\n    return atBreak(code)\n  }\n\n  /**\n   * In text.\n   *\n   * ```markdown\n   * > | ## aa\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (code === null || code === 35 || markdownLineEndingOrSpace(code)) {\n      effects.exit('atxHeadingText')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    return data\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const setextUnderline = {\n  name: 'setextUnderline',\n  tokenize: tokenizeSetextUnderline,\n  resolveTo: resolveToSetextUnderline\n}\n\n/** @type {Resolver} */\nfunction resolveToSetextUnderline(events, context) {\n  // To do: resolve like `markdown-rs`.\n  let index = events.length\n  /** @type {number | undefined} */\n  let content\n  /** @type {number | undefined} */\n  let text\n  /** @type {number | undefined} */\n  let definition\n\n  // Find the opening of the content.\n  // It’ll always exist: we don’t tokenize if it isn’t there.\n  while (index--) {\n    if (events[index][0] === 'enter') {\n      if (events[index][1].type === 'content') {\n        content = index\n        break\n      }\n      if (events[index][1].type === 'paragraph') {\n        text = index\n      }\n    }\n    // Exit\n    else {\n      if (events[index][1].type === 'content') {\n        // Remove the content end (if needed we’ll add it later)\n        events.splice(index, 1)\n      }\n      if (!definition && events[index][1].type === 'definition') {\n        definition = index\n      }\n    }\n  }\n  const heading = {\n    type: 'setextHeading',\n    start: Object.assign({}, events[text][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  }\n\n  // Change the paragraph to setext heading text.\n  events[text][1].type = 'setextHeadingText'\n\n  // If we have definitions in the content, we’ll keep on having content,\n  // but we need move it.\n  if (definition) {\n    events.splice(text, 0, ['enter', heading, context])\n    events.splice(definition + 1, 0, ['exit', events[content][1], context])\n    events[content][1].end = Object.assign({}, events[definition][1].end)\n  } else {\n    events[content][1] = heading\n  }\n\n  // Add the heading exit at the end.\n  events.push(['exit', heading, context])\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeSetextUnderline(effects, ok, nok) {\n  const self = this\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * At start of heading (setext) underline.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    let index = self.events.length\n    /** @type {boolean | undefined} */\n    let paragraph\n    // Find an opening.\n    while (index--) {\n      // Skip enter/exit of line ending, line prefix, and content.\n      // We can now either have a definition or a paragraph.\n      if (\n        self.events[index][1].type !== 'lineEnding' &&\n        self.events[index][1].type !== 'linePrefix' &&\n        self.events[index][1].type !== 'content'\n      ) {\n        paragraph = self.events[index][1].type === 'paragraph'\n        break\n      }\n    }\n\n    // To do: handle lazy/pierce like `markdown-rs`.\n    // To do: parse indent like `markdown-rs`.\n    if (!self.parser.lazy[self.now().line] && (self.interrupt || paragraph)) {\n      effects.enter('setextHeadingLine')\n      marker = code\n      return before(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * After optional whitespace, at `-` or `=`.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter('setextHeadingLineSequence')\n    return inside(code)\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return inside\n    }\n    effects.exit('setextHeadingLineSequence')\n    return markdownSpace(code)\n      ? factorySpace(effects, after, 'lineSuffix')(code)\n      : after(code)\n  }\n\n  /**\n   * After sequence, after optional whitespace.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('setextHeadingLine')\n      return ok(code)\n    }\n    return nok(code)\n  }\n}\n","/**\n * List of lowercase HTML “block” tag names.\n *\n * The list, when parsing HTML (flow), results in more relaxed rules (condition\n * 6).\n * Because they are known blocks, the HTML-like syntax doesn’t have to be\n * strictly parsed.\n * For tag names not in this list, a more strict algorithm (condition 7) is used\n * to detect whether the HTML-like syntax is seen as HTML (flow) or not.\n *\n * This is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * > 👉 **Note**: `search` was added in `CommonMark@0.31`.\n */\nexport const htmlBlockNames = [\n  'address',\n  'article',\n  'aside',\n  'base',\n  'basefont',\n  'blockquote',\n  'body',\n  'caption',\n  'center',\n  'col',\n  'colgroup',\n  'dd',\n  'details',\n  'dialog',\n  'dir',\n  'div',\n  'dl',\n  'dt',\n  'fieldset',\n  'figcaption',\n  'figure',\n  'footer',\n  'form',\n  'frame',\n  'frameset',\n  'h1',\n  'h2',\n  'h3',\n  'h4',\n  'h5',\n  'h6',\n  'head',\n  'header',\n  'hr',\n  'html',\n  'iframe',\n  'legend',\n  'li',\n  'link',\n  'main',\n  'menu',\n  'menuitem',\n  'nav',\n  'noframes',\n  'ol',\n  'optgroup',\n  'option',\n  'p',\n  'param',\n  'search',\n  'section',\n  'summary',\n  'table',\n  'tbody',\n  'td',\n  'tfoot',\n  'th',\n  'thead',\n  'title',\n  'tr',\n  'track',\n  'ul'\n]\n\n/**\n * List of lowercase HTML “raw” tag names.\n *\n * The list, when parsing HTML (flow), results in HTML that can include lines\n * without exiting, until a closing tag also in this list is found (condition\n * 1).\n *\n * This module is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * > 👉 **Note**: `textarea` was added in `CommonMark@0.30`.\n */\nexport const htmlRawNames = ['pre', 'script', 'style', 'textarea']\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {htmlBlockNames, htmlRawNames} from 'micromark-util-html-tag-name'\nimport {blankLine} from './blank-line.js'\n\n/** @type {Construct} */\nexport const htmlFlow = {\n  name: 'htmlFlow',\n  tokenize: tokenizeHtmlFlow,\n  resolveTo: resolveToHtmlFlow,\n  concrete: true\n}\n\n/** @type {Construct} */\nconst blankLineBefore = {\n  tokenize: tokenizeBlankLineBefore,\n  partial: true\n}\nconst nonLazyContinuationStart = {\n  tokenize: tokenizeNonLazyContinuationStart,\n  partial: true\n}\n\n/** @type {Resolver} */\nfunction resolveToHtmlFlow(events) {\n  let index = events.length\n  while (index--) {\n    if (events[index][0] === 'enter' && events[index][1].type === 'htmlFlow') {\n      break\n    }\n  }\n  if (index > 1 && events[index - 2][1].type === 'linePrefix') {\n    // Add the prefix start to the HTML token.\n    events[index][1].start = events[index - 2][1].start\n    // Add the prefix start to the HTML line token.\n    events[index + 1][1].start = events[index - 2][1].start\n    // Remove the line prefix.\n    events.splice(index - 2, 2)\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlFlow(effects, ok, nok) {\n  const self = this\n  /** @type {number} */\n  let marker\n  /** @type {boolean} */\n  let closingTag\n  /** @type {string} */\n  let buffer\n  /** @type {number} */\n  let index\n  /** @type {Code} */\n  let markerB\n  return start\n\n  /**\n   * Start of HTML (flow).\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    return before(code)\n  }\n\n  /**\n   * At `<`, after optional whitespace.\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter('htmlFlow')\n    effects.enter('htmlFlowData')\n    effects.consume(code)\n    return open\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | <x />\n   *      ^\n   * > | <!doctype>\n   *      ^\n   * > | <!--xxx-->\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code)\n      return declarationOpen\n    }\n    if (code === 47) {\n      effects.consume(code)\n      closingTag = true\n      return tagCloseStart\n    }\n    if (code === 63) {\n      effects.consume(code)\n      marker = 3\n      // To do:\n      // tokenizer.concrete = true\n      // To do: use `markdown-rs` style interrupt.\n      // While we’re in an instruction instead of a declaration, we’re on a `?`\n      // right now, so we do need to search for `>`, similar to declarations.\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      // @ts-expect-error: not null.\n      buffer = String.fromCharCode(code)\n      return tagName\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *       ^\n   * > | <!--xxx-->\n   *       ^\n   * > | <![CDATA[>&<]]>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code)\n      marker = 2\n      return commentOpenInside\n    }\n    if (code === 91) {\n      effects.consume(code)\n      marker = 5\n      index = 0\n      return cdataOpenInside\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      marker = 4\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<!-`, inside a comment, at another `-`.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<![`, inside CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *        ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = 'CDATA['\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code)\n      if (index === value.length) {\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok : continuation\n      }\n      return cdataOpenInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | </x>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      // @ts-expect-error: not null.\n      buffer = String.fromCharCode(code)\n      return tagName\n    }\n    return nok(code)\n  }\n\n  /**\n   * In tag name.\n   *\n   * ```markdown\n   * > | <ab>\n   *      ^^\n   * > | </ab>\n   *       ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagName(code) {\n    if (\n      code === null ||\n      code === 47 ||\n      code === 62 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      const slash = code === 47\n      const name = buffer.toLowerCase()\n      if (!slash && !closingTag && htmlRawNames.includes(name)) {\n        marker = 1\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code)\n      }\n      if (htmlBlockNames.includes(buffer.toLowerCase())) {\n        marker = 6\n        if (slash) {\n          effects.consume(code)\n          return basicSelfClosing\n        }\n\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code)\n      }\n      marker = 7\n      // Do not support complete HTML when interrupting.\n      return self.interrupt && !self.parser.lazy[self.now().line]\n        ? nok(code)\n        : closingTag\n        ? completeClosingTagAfter(code)\n        : completeAttributeNameBefore(code)\n    }\n\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      buffer += String.fromCharCode(code)\n      return tagName\n    }\n    return nok(code)\n  }\n\n  /**\n   * After closing slash of a basic tag name.\n   *\n   * ```markdown\n   * > | <div/>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function basicSelfClosing(code) {\n    if (code === 62) {\n      effects.consume(code)\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuation\n    }\n    return nok(code)\n  }\n\n  /**\n   * After closing slash of a complete tag name.\n   *\n   * ```markdown\n   * > | <x/>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeClosingTagAfter(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeClosingTagAfter\n    }\n    return completeEnd(code)\n  }\n\n  /**\n   * At an attribute name.\n   *\n   * At first, this state is used after a complete tag name, after whitespace,\n   * where it expects optional attributes or the end of the tag.\n   * It is also reused after attributes, when expecting more optional\n   * attributes.\n   *\n   * ```markdown\n   * > | <a />\n   *        ^\n   * > | <a :b>\n   *        ^\n   * > | <a _b>\n   *        ^\n   * > | <a b>\n   *        ^\n   * > | <a >\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameBefore(code) {\n    if (code === 47) {\n      effects.consume(code)\n      return completeEnd\n    }\n\n    // ASCII alphanumerical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code)\n      return completeAttributeName\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeNameBefore\n    }\n    return completeEnd(code)\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | <a :b>\n   *         ^\n   * > | <a _b>\n   *         ^\n   * > | <a b>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeName(code) {\n    // ASCII alphanumerical and `-`, `.`, `:`, and `_`.\n    if (\n      code === 45 ||\n      code === 46 ||\n      code === 58 ||\n      code === 95 ||\n      asciiAlphanumeric(code)\n    ) {\n      effects.consume(code)\n      return completeAttributeName\n    }\n    return completeAttributeNameAfter(code)\n  }\n\n  /**\n   * After attribute name, at an optional initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b>\n   *         ^\n   * > | <a b=c>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code)\n      return completeAttributeValueBefore\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeNameAfter\n    }\n    return completeAttributeNameBefore(code)\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * > | <a b=\"c\">\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueBefore(code) {\n    if (\n      code === null ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code)\n      markerB = code\n      return completeAttributeValueQuoted\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeValueBefore\n    }\n    return completeAttributeValueUnquoted(code)\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *           ^\n   * > | <a b='c'>\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuoted(code) {\n    if (code === markerB) {\n      effects.consume(code)\n      markerB = null\n      return completeAttributeValueQuotedAfter\n    }\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return completeAttributeValueQuoted\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueUnquoted(code) {\n    if (\n      code === null ||\n      code === 34 ||\n      code === 39 ||\n      code === 47 ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      return completeAttributeNameAfter(code)\n    }\n    effects.consume(code)\n    return completeAttributeValueUnquoted\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the\n   * end of the tag.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownSpace(code)) {\n      return completeAttributeNameBefore(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In certain circumstances of a complete tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeEnd(code) {\n    if (code === 62) {\n      effects.consume(code)\n      return completeAfter\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `>` in a complete tag.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAfter(code) {\n    if (code === null || markdownLineEnding(code)) {\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return continuation(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAfter\n    }\n    return nok(code)\n  }\n\n  /**\n   * In continuation of any HTML kind.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuation(code) {\n    if (code === 45 && marker === 2) {\n      effects.consume(code)\n      return continuationCommentInside\n    }\n    if (code === 60 && marker === 1) {\n      effects.consume(code)\n      return continuationRawTagOpen\n    }\n    if (code === 62 && marker === 4) {\n      effects.consume(code)\n      return continuationClose\n    }\n    if (code === 63 && marker === 3) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    if (code === 93 && marker === 5) {\n      effects.consume(code)\n      return continuationCdataInside\n    }\n    if (markdownLineEnding(code) && (marker === 6 || marker === 7)) {\n      effects.exit('htmlFlowData')\n      return effects.check(\n        blankLineBefore,\n        continuationAfter,\n        continuationStart\n      )(code)\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('htmlFlowData')\n      return continuationStart(code)\n    }\n    effects.consume(code)\n    return continuation\n  }\n\n  /**\n   * In continuation, at eol.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStart(code) {\n    return effects.check(\n      nonLazyContinuationStart,\n      continuationStartNonLazy,\n      continuationAfter\n    )(code)\n  }\n\n  /**\n   * In continuation, at eol, before non-lazy content.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStartNonLazy(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return continuationBefore\n  }\n\n  /**\n   * In continuation, before non-lazy content.\n   *\n   * ```markdown\n   *   | <x>\n   * > | asd\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return continuationStart(code)\n    }\n    effects.enter('htmlFlowData')\n    return continuation(code)\n  }\n\n  /**\n   * In comment continuation, after one `-`, expecting another.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCommentInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In raw continuation, after `<`, at `/`.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawTagOpen(code) {\n    if (code === 47) {\n      effects.consume(code)\n      buffer = ''\n      return continuationRawEndTag\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In raw continuation, after `</`, in a raw tag name.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                             ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawEndTag(code) {\n    if (code === 62) {\n      const name = buffer.toLowerCase()\n      if (htmlRawNames.includes(name)) {\n        effects.consume(code)\n        return continuationClose\n      }\n      return continuation(code)\n    }\n    if (asciiAlpha(code) && buffer.length < 8) {\n      effects.consume(code)\n      // @ts-expect-error: not null.\n      buffer += String.fromCharCode(code)\n      return continuationRawEndTag\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In cdata continuation, after `]`, expecting `]>`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *                  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCdataInside(code) {\n    if (code === 93) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In declaration or instruction continuation, at `>`.\n   *\n   * ```markdown\n   * > | <!-->\n   *         ^\n   * > | <?>\n   *       ^\n   * > | <!q>\n   *        ^\n   * > | <!--ab-->\n   *             ^\n   * > | <![CDATA[>&<]]>\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationDeclarationInside(code) {\n    if (code === 62) {\n      effects.consume(code)\n      return continuationClose\n    }\n\n    // More dashes.\n    if (code === 45 && marker === 2) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In closed continuation: everything we get until the eol/eof is part of it.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationClose(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('htmlFlowData')\n      return continuationAfter(code)\n    }\n    effects.consume(code)\n    return continuationClose\n  }\n\n  /**\n   * Done.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationAfter(code) {\n    effects.exit('htmlFlow')\n    // // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    // // No longer concrete.\n    // tokenizer.concrete = false\n    return ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuationStart(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * At eol, before continuation.\n   *\n   * ```markdown\n   * > | * ```js\n   *            ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return after\n    }\n    return nok(code)\n  }\n\n  /**\n   * A continuation.\n   *\n   * ```markdown\n   *   | * ```js\n   * > | b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLineBefore(effects, ok, nok) {\n  return start\n\n  /**\n   * Before eol, expecting blank line.\n   *\n   * ```markdown\n   * > | <div>\n   *          ^\n   *   |\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return effects.attempt(blankLine, ok, nok)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nconst nonLazyContinuation = {\n  tokenize: tokenizeNonLazyContinuation,\n  partial: true\n}\n\n/** @type {Construct} */\nexport const codeFenced = {\n  name: 'codeFenced',\n  tokenize: tokenizeCodeFenced,\n  concrete: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeFenced(effects, ok, nok) {\n  const self = this\n  /** @type {Construct} */\n  const closeStart = {\n    tokenize: tokenizeCloseStart,\n    partial: true\n  }\n  let initialPrefix = 0\n  let sizeOpen = 0\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Start of code.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse whitespace like `markdown-rs`.\n    return beforeSequenceOpen(code)\n  }\n\n  /**\n   * In opening fence, after prefix, at sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeSequenceOpen(code) {\n    const tail = self.events[self.events.length - 1]\n    initialPrefix =\n      tail && tail[1].type === 'linePrefix'\n        ? tail[2].sliceSerialize(tail[1], true).length\n        : 0\n    marker = code\n    effects.enter('codeFenced')\n    effects.enter('codeFencedFence')\n    effects.enter('codeFencedFenceSequence')\n    return sequenceOpen(code)\n  }\n\n  /**\n   * In opening fence sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *      ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === marker) {\n      sizeOpen++\n      effects.consume(code)\n      return sequenceOpen\n    }\n    if (sizeOpen < 3) {\n      return nok(code)\n    }\n    effects.exit('codeFencedFenceSequence')\n    return markdownSpace(code)\n      ? factorySpace(effects, infoBefore, 'whitespace')(code)\n      : infoBefore(code)\n  }\n\n  /**\n   * In opening fence, after the sequence (and optional whitespace), before info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function infoBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFencedFence')\n      return self.interrupt\n        ? ok(code)\n        : effects.check(nonLazyContinuation, atNonLazyBreak, after)(code)\n    }\n    effects.enter('codeFencedFenceInfo')\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return info(code)\n  }\n\n  /**\n   * In info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function info(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceInfo')\n      return infoBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceInfo')\n      return factorySpace(effects, metaBefore, 'whitespace')(code)\n    }\n    if (code === 96 && code === marker) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return info\n  }\n\n  /**\n   * In opening fence, after info and whitespace, before meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function metaBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return infoBefore(code)\n    }\n    effects.enter('codeFencedFenceMeta')\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return meta(code)\n  }\n\n  /**\n   * In meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function meta(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceMeta')\n      return infoBefore(code)\n    }\n    if (code === 96 && code === marker) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return meta\n  }\n\n  /**\n   * At eol/eof in code, before a non-lazy closing fence or content.\n   *\n   * ```markdown\n   * > | ~~~js\n   *          ^\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function atNonLazyBreak(code) {\n    return effects.attempt(closeStart, after, contentBefore)(code)\n  }\n\n  /**\n   * Before code content, not a closing fence, at eol.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentBefore(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return contentStart\n  }\n\n  /**\n   * Before code content, not a closing fence.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentStart(code) {\n    return initialPrefix > 0 && markdownSpace(code)\n      ? factorySpace(\n          effects,\n          beforeContentChunk,\n          'linePrefix',\n          initialPrefix + 1\n        )(code)\n      : beforeContentChunk(code)\n  }\n\n  /**\n   * Before code content, after optional prefix.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeContentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return effects.check(nonLazyContinuation, atNonLazyBreak, after)(code)\n    }\n    effects.enter('codeFlowValue')\n    return contentChunk(code)\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^^^^^^^^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFlowValue')\n      return beforeContentChunk(code)\n    }\n    effects.consume(code)\n    return contentChunk\n  }\n\n  /**\n   * After code.\n   *\n   * ```markdown\n   *   | ~~~js\n   *   | alert(1)\n   * > | ~~~\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    effects.exit('codeFenced')\n    return ok(code)\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Tokenizer}\n   */\n  function tokenizeCloseStart(effects, ok, nok) {\n    let size = 0\n    return startBefore\n\n    /**\n     *\n     *\n     * @type {State}\n     */\n    function startBefore(code) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return start\n    }\n\n    /**\n     * Before closing fence, at optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function start(code) {\n      // Always populated by defaults.\n\n      // To do: `enter` here or in next state?\n      effects.enter('codeFencedFence')\n      return markdownSpace(code)\n        ? factorySpace(\n            effects,\n            beforeSequenceClose,\n            'linePrefix',\n            self.parser.constructs.disable.null.includes('codeIndented')\n              ? undefined\n              : 4\n          )(code)\n        : beforeSequenceClose(code)\n    }\n\n    /**\n     * In closing fence, after optional whitespace, at sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function beforeSequenceClose(code) {\n      if (code === marker) {\n        effects.enter('codeFencedFenceSequence')\n        return sequenceClose(code)\n      }\n      return nok(code)\n    }\n\n    /**\n     * In closing fence sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceClose(code) {\n      if (code === marker) {\n        size++\n        effects.consume(code)\n        return sequenceClose\n      }\n      if (size >= sizeOpen) {\n        effects.exit('codeFencedFenceSequence')\n        return markdownSpace(code)\n          ? factorySpace(effects, sequenceCloseAfter, 'whitespace')(code)\n          : sequenceCloseAfter(code)\n      }\n      return nok(code)\n    }\n\n    /**\n     * After closing fence sequence, after optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *        ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceCloseAfter(code) {\n      if (code === null || markdownLineEnding(code)) {\n        effects.exit('codeFencedFence')\n        return ok(code)\n      }\n      return nok(code)\n    }\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuation(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return lineStart\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function lineStart(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code)\n  }\n}\n","/// <reference lib=\"dom\" />\n\n/* eslint-env browser */\n\nconst element = document.createElement('i')\n\n/**\n * @param {string} value\n * @returns {string|false}\n */\nexport function decodeNamedCharacterReference(value) {\n  const characterReference = '&' + value + ';'\n  element.innerHTML = characterReference\n  const char = element.textContent\n\n  // Some named character references do not require the closing semicolon\n  // (`&not`, for instance), which leads to situations where parsing the assumed\n  // named reference of `&notit;` will result in the string `¬it;`.\n  // When we encounter a trailing semicolon after parsing, and the character\n  // reference to decode was not a semicolon (`&semi;`), we can assume that the\n  // matching was not complete.\n  // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n  // yield `null`.\n  if (char.charCodeAt(char.length - 1) === 59 /* `;` */ && value !== 'semi') {\n    return false\n  }\n\n  // If the decoded string is equal to the input, the character reference was\n  // not valid.\n  // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n  // yield `null`.\n  return char === characterReference ? false : char\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {\n  asciiAlphanumeric,\n  asciiDigit,\n  asciiHexDigit\n} from 'micromark-util-character'\n/** @type {Construct} */\nexport const characterReference = {\n  name: 'characterReference',\n  tokenize: tokenizeCharacterReference\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterReference(effects, ok, nok) {\n  const self = this\n  let size = 0\n  /** @type {number} */\n  let max\n  /** @type {(code: Code) => boolean} */\n  let test\n  return start\n\n  /**\n   * Start of character reference.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *      ^\n   * > | a&#123;b\n   *      ^\n   * > | a&#x9;b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('characterReference')\n    effects.enter('characterReferenceMarker')\n    effects.consume(code)\n    effects.exit('characterReferenceMarker')\n    return open\n  }\n\n  /**\n   * After `&`, at `#` for numeric references or alphanumeric for named\n   * references.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^\n   * > | a&#123;b\n   *       ^\n   * > | a&#x9;b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 35) {\n      effects.enter('characterReferenceMarkerNumeric')\n      effects.consume(code)\n      effects.exit('characterReferenceMarkerNumeric')\n      return numeric\n    }\n    effects.enter('characterReferenceValue')\n    max = 31\n    test = asciiAlphanumeric\n    return value(code)\n  }\n\n  /**\n   * After `#`, at `x` for hexadecimals or digit for decimals.\n   *\n   * ```markdown\n   * > | a&#123;b\n   *        ^\n   * > | a&#x9;b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function numeric(code) {\n    if (code === 88 || code === 120) {\n      effects.enter('characterReferenceMarkerHexadecimal')\n      effects.consume(code)\n      effects.exit('characterReferenceMarkerHexadecimal')\n      effects.enter('characterReferenceValue')\n      max = 6\n      test = asciiHexDigit\n      return value\n    }\n    effects.enter('characterReferenceValue')\n    max = 7\n    test = asciiDigit\n    return value(code)\n  }\n\n  /**\n   * After markers (`&#x`, `&#`, or `&`), in value, before `;`.\n   *\n   * The character reference kind defines what and how many characters are\n   * allowed.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^^^\n   * > | a&#123;b\n   *        ^^^\n   * > | a&#x9;b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function value(code) {\n    if (code === 59 && size) {\n      const token = effects.exit('characterReferenceValue')\n      if (\n        test === asciiAlphanumeric &&\n        !decodeNamedCharacterReference(self.sliceSerialize(token))\n      ) {\n        return nok(code)\n      }\n\n      // To do: `markdown-rs` uses a different name:\n      // `CharacterReferenceMarkerSemi`.\n      effects.enter('characterReferenceMarker')\n      effects.consume(code)\n      effects.exit('characterReferenceMarker')\n      effects.exit('characterReference')\n      return ok\n    }\n    if (test(code) && size++ < max) {\n      effects.consume(code)\n      return value\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {asciiPunctuation} from 'micromark-util-character'\n/** @type {Construct} */\nexport const characterEscape = {\n  name: 'characterEscape',\n  tokenize: tokenizeCharacterEscape\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterEscape(effects, ok, nok) {\n  return start\n\n  /**\n   * Start of character escape.\n   *\n   * ```markdown\n   * > | a\\*b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('characterEscape')\n    effects.enter('escapeMarker')\n    effects.consume(code)\n    effects.exit('escapeMarker')\n    return inside\n  }\n\n  /**\n   * After `\\`, at punctuation.\n   *\n   * ```markdown\n   * > | a\\*b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    // ASCII punctuation.\n    if (asciiPunctuation(code)) {\n      effects.enter('characterEscapeValue')\n      effects.consume(code)\n      effects.exit('characterEscapeValue')\n      effects.exit('characterEscape')\n      return ok\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {Construct} */\nexport const lineEnding = {\n  name: 'lineEnding',\n  tokenize: tokenizeLineEnding\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLineEnding(effects, ok) {\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, ok, 'linePrefix')\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factoryDestination} from 'micromark-factory-destination'\nimport {factoryLabel} from 'micromark-factory-label'\nimport {factoryTitle} from 'micromark-factory-title'\nimport {factoryWhitespace} from 'micromark-factory-whitespace'\nimport {markdownLineEndingOrSpace} from 'micromark-util-character'\nimport {push, splice} from 'micromark-util-chunked'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/** @type {Construct} */\nexport const labelEnd = {\n  name: 'labelEnd',\n  tokenize: tokenizeLabelEnd,\n  resolveTo: resolveToLabelEnd,\n  resolveAll: resolveAllLabelEnd\n}\n\n/** @type {Construct} */\nconst resourceConstruct = {\n  tokenize: tokenizeResource\n}\n/** @type {Construct} */\nconst referenceFullConstruct = {\n  tokenize: tokenizeReferenceFull\n}\n/** @type {Construct} */\nconst referenceCollapsedConstruct = {\n  tokenize: tokenizeReferenceCollapsed\n}\n\n/** @type {Resolver} */\nfunction resolveAllLabelEnd(events) {\n  let index = -1\n  while (++index < events.length) {\n    const token = events[index][1]\n    if (\n      token.type === 'labelImage' ||\n      token.type === 'labelLink' ||\n      token.type === 'labelEnd'\n    ) {\n      // Remove the marker.\n      events.splice(index + 1, token.type === 'labelImage' ? 4 : 2)\n      token.type = 'data'\n      index++\n    }\n  }\n  return events\n}\n\n/** @type {Resolver} */\nfunction resolveToLabelEnd(events, context) {\n  let index = events.length\n  let offset = 0\n  /** @type {Token} */\n  let token\n  /** @type {number | undefined} */\n  let open\n  /** @type {number | undefined} */\n  let close\n  /** @type {Array<Event>} */\n  let media\n\n  // Find an opening.\n  while (index--) {\n    token = events[index][1]\n    if (open) {\n      // If we see another link, or inactive link label, we’ve been here before.\n      if (\n        token.type === 'link' ||\n        (token.type === 'labelLink' && token._inactive)\n      ) {\n        break\n      }\n\n      // Mark other link openings as inactive, as we can’t have links in\n      // links.\n      if (events[index][0] === 'enter' && token.type === 'labelLink') {\n        token._inactive = true\n      }\n    } else if (close) {\n      if (\n        events[index][0] === 'enter' &&\n        (token.type === 'labelImage' || token.type === 'labelLink') &&\n        !token._balanced\n      ) {\n        open = index\n        if (token.type !== 'labelLink') {\n          offset = 2\n          break\n        }\n      }\n    } else if (token.type === 'labelEnd') {\n      close = index\n    }\n  }\n  const group = {\n    type: events[open][1].type === 'labelLink' ? 'link' : 'image',\n    start: Object.assign({}, events[open][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  }\n  const label = {\n    type: 'label',\n    start: Object.assign({}, events[open][1].start),\n    end: Object.assign({}, events[close][1].end)\n  }\n  const text = {\n    type: 'labelText',\n    start: Object.assign({}, events[open + offset + 2][1].end),\n    end: Object.assign({}, events[close - 2][1].start)\n  }\n  media = [\n    ['enter', group, context],\n    ['enter', label, context]\n  ]\n\n  // Opening marker.\n  media = push(media, events.slice(open + 1, open + offset + 3))\n\n  // Text open.\n  media = push(media, [['enter', text, context]])\n\n  // Always populated by defaults.\n\n  // Between.\n  media = push(\n    media,\n    resolveAll(\n      context.parser.constructs.insideSpan.null,\n      events.slice(open + offset + 4, close - 3),\n      context\n    )\n  )\n\n  // Text close, marker close, label close.\n  media = push(media, [\n    ['exit', text, context],\n    events[close - 2],\n    events[close - 1],\n    ['exit', label, context]\n  ])\n\n  // Reference, resource, or so.\n  media = push(media, events.slice(close + 1))\n\n  // Media close.\n  media = push(media, [['exit', group, context]])\n  splice(events, open, events.length, media)\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelEnd(effects, ok, nok) {\n  const self = this\n  let index = self.events.length\n  /** @type {Token} */\n  let labelStart\n  /** @type {boolean} */\n  let defined\n\n  // Find an opening.\n  while (index--) {\n    if (\n      (self.events[index][1].type === 'labelImage' ||\n        self.events[index][1].type === 'labelLink') &&\n      !self.events[index][1]._balanced\n    ) {\n      labelStart = self.events[index][1]\n      break\n    }\n  }\n  return start\n\n  /**\n   * Start of label end.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // If there is not an okay opening.\n    if (!labelStart) {\n      return nok(code)\n    }\n\n    // If the corresponding label (link) start is marked as inactive,\n    // it means we’d be wrapping a link, like this:\n    //\n    // ```markdown\n    // > | a [b [c](d) e](f) g.\n    //                  ^\n    // ```\n    //\n    // We can’t have that, so it’s just balanced brackets.\n    if (labelStart._inactive) {\n      return labelEndNok(code)\n    }\n    defined = self.parser.defined.includes(\n      normalizeIdentifier(\n        self.sliceSerialize({\n          start: labelStart.end,\n          end: self.now()\n        })\n      )\n    )\n    effects.enter('labelEnd')\n    effects.enter('labelMarker')\n    effects.consume(code)\n    effects.exit('labelMarker')\n    effects.exit('labelEnd')\n    return after\n  }\n\n  /**\n   * After `]`.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // Note: `markdown-rs` also parses GFM footnotes here, which for us is in\n    // an extension.\n\n    // Resource (`[asd](fgh)`)?\n    if (code === 40) {\n      return effects.attempt(\n        resourceConstruct,\n        labelEndOk,\n        defined ? labelEndOk : labelEndNok\n      )(code)\n    }\n\n    // Full (`[asd][fgh]`) or collapsed (`[asd][]`) reference?\n    if (code === 91) {\n      return effects.attempt(\n        referenceFullConstruct,\n        labelEndOk,\n        defined ? referenceNotFull : labelEndNok\n      )(code)\n    }\n\n    // Shortcut (`[asd]`) reference?\n    return defined ? labelEndOk(code) : labelEndNok(code)\n  }\n\n  /**\n   * After `]`, at `[`, but not at a full reference.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] b\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceNotFull(code) {\n    return effects.attempt(\n      referenceCollapsedConstruct,\n      labelEndOk,\n      labelEndNok\n    )(code)\n  }\n\n  /**\n   * Done, we found something.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *           ^\n   * > | [a][b] c\n   *           ^\n   * > | [a][] b\n   *          ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndOk(code) {\n    // Note: `markdown-rs` does a bunch of stuff here.\n    return ok(code)\n  }\n\n  /**\n   * Done, it’s nothing.\n   *\n   * There was an okay opening, but we didn’t match anything.\n   *\n   * ```markdown\n   * > | [a](b c\n   *        ^\n   * > | [a][b c\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndNok(code) {\n    labelStart._balanced = true\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeResource(effects, ok, nok) {\n  return resourceStart\n\n  /**\n   * At a resource.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceStart(code) {\n    effects.enter('resource')\n    effects.enter('resourceMarker')\n    effects.consume(code)\n    effects.exit('resourceMarker')\n    return resourceBefore\n  }\n\n  /**\n   * In resource, after `(`, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBefore(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, resourceOpen)(code)\n      : resourceOpen(code)\n  }\n\n  /**\n   * In resource, after optional whitespace, at `)` or a destination.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceOpen(code) {\n    if (code === 41) {\n      return resourceEnd(code)\n    }\n    return factoryDestination(\n      effects,\n      resourceDestinationAfter,\n      resourceDestinationMissing,\n      'resourceDestination',\n      'resourceDestinationLiteral',\n      'resourceDestinationLiteralMarker',\n      'resourceDestinationRaw',\n      'resourceDestinationString',\n      32\n    )(code)\n  }\n\n  /**\n   * In resource, after destination, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationAfter(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, resourceBetween)(code)\n      : resourceEnd(code)\n  }\n\n  /**\n   * At invalid destination.\n   *\n   * ```markdown\n   * > | [a](<<) b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationMissing(code) {\n    return nok(code)\n  }\n\n  /**\n   * In resource, after destination and whitespace, at `(` or title.\n   *\n   * ```markdown\n   * > | [a](b ) c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBetween(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      return factoryTitle(\n        effects,\n        resourceTitleAfter,\n        nok,\n        'resourceTitle',\n        'resourceTitleMarker',\n        'resourceTitleString'\n      )(code)\n    }\n    return resourceEnd(code)\n  }\n\n  /**\n   * In resource, after title, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b \"c\") d\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceTitleAfter(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, resourceEnd)(code)\n      : resourceEnd(code)\n  }\n\n  /**\n   * In resource, at `)`.\n   *\n   * ```markdown\n   * > | [a](b) d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceEnd(code) {\n    if (code === 41) {\n      effects.enter('resourceMarker')\n      effects.consume(code)\n      effects.exit('resourceMarker')\n      effects.exit('resource')\n      return ok\n    }\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceFull(effects, ok, nok) {\n  const self = this\n  return referenceFull\n\n  /**\n   * In a reference (full), at the `[`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFull(code) {\n    return factoryLabel.call(\n      self,\n      effects,\n      referenceFullAfter,\n      referenceFullMissing,\n      'reference',\n      'referenceMarker',\n      'referenceString'\n    )(code)\n  }\n\n  /**\n   * In a reference (full), after `]`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullAfter(code) {\n    return self.parser.defined.includes(\n      normalizeIdentifier(\n        self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)\n      )\n    )\n      ? ok(code)\n      : nok(code)\n  }\n\n  /**\n   * In reference (full) that was missing.\n   *\n   * ```markdown\n   * > | [a][b d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullMissing(code) {\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceCollapsed(effects, ok, nok) {\n  return referenceCollapsedStart\n\n  /**\n   * In reference (collapsed), at `[`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceCollapsedStart(code) {\n    // We only attempt a collapsed label if there’s a `[`.\n\n    effects.enter('reference')\n    effects.enter('referenceMarker')\n    effects.consume(code)\n    effects.exit('referenceMarker')\n    return referenceCollapsedOpen\n  }\n\n  /**\n   * In reference (collapsed), at `]`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *         ^\n   * ```\n   *\n   *  @type {State}\n   */\n  function referenceCollapsedOpen(code) {\n    if (code === 93) {\n      effects.enter('referenceMarker')\n      effects.consume(code)\n      effects.exit('referenceMarker')\n      effects.exit('reference')\n      return ok\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {labelEnd} from './label-end.js'\n\n/** @type {Construct} */\nexport const labelStartImage = {\n  name: 'labelStartImage',\n  tokenize: tokenizeLabelStartImage,\n  resolveAll: labelEnd.resolveAll\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartImage(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of label (image) start.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('labelImage')\n    effects.enter('labelImageMarker')\n    effects.consume(code)\n    effects.exit('labelImageMarker')\n    return open\n  }\n\n  /**\n   * After `!`, at `[`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 91) {\n      effects.enter('labelMarker')\n      effects.consume(code)\n      effects.exit('labelMarker')\n      effects.exit('labelImage')\n      return after\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `![`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *         ^\n   * ```\n   *\n   * This is needed in because, when GFM footnotes are enabled, images never\n   * form when started with a `^`.\n   * Instead, links form:\n   *\n   * ```markdown\n   * ![^a](b)\n   *\n   * ![^a][b]\n   *\n   * [b]: c\n   * ```\n   *\n   * ```html\n   * <p>!<a href=\\\"b\\\">^a</a></p>\n   * <p>!<a href=\\\"c\\\">^a</a></p>\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // To do: use a new field to do this, this is still needed for\n    // `micromark-extension-gfm-footnote`, but the `label-start-link`\n    // behavior isn’t.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs\n      ? nok(code)\n      : ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\n\nimport {\n  markdownLineEndingOrSpace,\n  unicodePunctuation,\n  unicodeWhitespace\n} from 'micromark-util-character'\n/**\n * Classify whether a code represents whitespace, punctuation, or something\n * else.\n *\n * Used for attention (emphasis, strong), whose sequences can open or close\n * based on the class of surrounding characters.\n *\n * > 👉 **Note**: eof (`null`) is seen as whitespace.\n *\n * @param {Code} code\n *   Code.\n * @returns {typeof constants.characterGroupWhitespace | typeof constants.characterGroupPunctuation | undefined}\n *   Group.\n */\nexport function classifyCharacter(code) {\n  if (\n    code === null ||\n    markdownLineEndingOrSpace(code) ||\n    unicodeWhitespace(code)\n  ) {\n    return 1\n  }\n  if (unicodePunctuation(code)) {\n    return 2\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {push, splice} from 'micromark-util-chunked'\nimport {classifyCharacter} from 'micromark-util-classify-character'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/** @type {Construct} */\nexport const attention = {\n  name: 'attention',\n  tokenize: tokenizeAttention,\n  resolveAll: resolveAllAttention\n}\n\n/**\n * Take all events and resolve attention to emphasis or strong.\n *\n * @type {Resolver}\n */\nfunction resolveAllAttention(events, context) {\n  let index = -1\n  /** @type {number} */\n  let open\n  /** @type {Token} */\n  let group\n  /** @type {Token} */\n  let text\n  /** @type {Token} */\n  let openingSequence\n  /** @type {Token} */\n  let closingSequence\n  /** @type {number} */\n  let use\n  /** @type {Array<Event>} */\n  let nextEvents\n  /** @type {number} */\n  let offset\n\n  // Walk through all events.\n  //\n  // Note: performance of this is fine on an mb of normal markdown, but it’s\n  // a bottleneck for malicious stuff.\n  while (++index < events.length) {\n    // Find a token that can close.\n    if (\n      events[index][0] === 'enter' &&\n      events[index][1].type === 'attentionSequence' &&\n      events[index][1]._close\n    ) {\n      open = index\n\n      // Now walk back to find an opener.\n      while (open--) {\n        // Find a token that can open the closer.\n        if (\n          events[open][0] === 'exit' &&\n          events[open][1].type === 'attentionSequence' &&\n          events[open][1]._open &&\n          // If the markers are the same:\n          context.sliceSerialize(events[open][1]).charCodeAt(0) ===\n            context.sliceSerialize(events[index][1]).charCodeAt(0)\n        ) {\n          // If the opening can close or the closing can open,\n          // and the close size *is not* a multiple of three,\n          // but the sum of the opening and closing size *is* multiple of three,\n          // then don’t match.\n          if (\n            (events[open][1]._close || events[index][1]._open) &&\n            (events[index][1].end.offset - events[index][1].start.offset) % 3 &&\n            !(\n              (events[open][1].end.offset -\n                events[open][1].start.offset +\n                events[index][1].end.offset -\n                events[index][1].start.offset) %\n              3\n            )\n          ) {\n            continue\n          }\n\n          // Number of markers to use from the sequence.\n          use =\n            events[open][1].end.offset - events[open][1].start.offset > 1 &&\n            events[index][1].end.offset - events[index][1].start.offset > 1\n              ? 2\n              : 1\n          const start = Object.assign({}, events[open][1].end)\n          const end = Object.assign({}, events[index][1].start)\n          movePoint(start, -use)\n          movePoint(end, use)\n          openingSequence = {\n            type: use > 1 ? 'strongSequence' : 'emphasisSequence',\n            start,\n            end: Object.assign({}, events[open][1].end)\n          }\n          closingSequence = {\n            type: use > 1 ? 'strongSequence' : 'emphasisSequence',\n            start: Object.assign({}, events[index][1].start),\n            end\n          }\n          text = {\n            type: use > 1 ? 'strongText' : 'emphasisText',\n            start: Object.assign({}, events[open][1].end),\n            end: Object.assign({}, events[index][1].start)\n          }\n          group = {\n            type: use > 1 ? 'strong' : 'emphasis',\n            start: Object.assign({}, openingSequence.start),\n            end: Object.assign({}, closingSequence.end)\n          }\n          events[open][1].end = Object.assign({}, openingSequence.start)\n          events[index][1].start = Object.assign({}, closingSequence.end)\n          nextEvents = []\n\n          // If there are more markers in the opening, add them before.\n          if (events[open][1].end.offset - events[open][1].start.offset) {\n            nextEvents = push(nextEvents, [\n              ['enter', events[open][1], context],\n              ['exit', events[open][1], context]\n            ])\n          }\n\n          // Opening.\n          nextEvents = push(nextEvents, [\n            ['enter', group, context],\n            ['enter', openingSequence, context],\n            ['exit', openingSequence, context],\n            ['enter', text, context]\n          ])\n\n          // Always populated by defaults.\n\n          // Between.\n          nextEvents = push(\n            nextEvents,\n            resolveAll(\n              context.parser.constructs.insideSpan.null,\n              events.slice(open + 1, index),\n              context\n            )\n          )\n\n          // Closing.\n          nextEvents = push(nextEvents, [\n            ['exit', text, context],\n            ['enter', closingSequence, context],\n            ['exit', closingSequence, context],\n            ['exit', group, context]\n          ])\n\n          // If there are more markers in the closing, add them after.\n          if (events[index][1].end.offset - events[index][1].start.offset) {\n            offset = 2\n            nextEvents = push(nextEvents, [\n              ['enter', events[index][1], context],\n              ['exit', events[index][1], context]\n            ])\n          } else {\n            offset = 0\n          }\n          splice(events, open - 1, index - open + 3, nextEvents)\n          index = open + nextEvents.length - offset - 2\n          break\n        }\n      }\n    }\n  }\n\n  // Remove remaining sequences.\n  index = -1\n  while (++index < events.length) {\n    if (events[index][1].type === 'attentionSequence') {\n      events[index][1].type = 'data'\n    }\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeAttention(effects, ok) {\n  const attentionMarkers = this.parser.constructs.attentionMarkers.null\n  const previous = this.previous\n  const before = classifyCharacter(previous)\n\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Before a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    marker = code\n    effects.enter('attentionSequence')\n    return inside(code)\n  }\n\n  /**\n   * In a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return inside\n    }\n    const token = effects.exit('attentionSequence')\n\n    // To do: next major: move this to resolver, just like `markdown-rs`.\n    const after = classifyCharacter(code)\n\n    // Always populated by defaults.\n\n    const open =\n      !after || (after === 2 && before) || attentionMarkers.includes(code)\n    const close =\n      !before || (before === 2 && after) || attentionMarkers.includes(previous)\n    token._open = Boolean(marker === 42 ? open : open && (before || !close))\n    token._close = Boolean(marker === 42 ? close : close && (after || !open))\n    return ok(code)\n  }\n}\n\n/**\n * Move a point a bit.\n *\n * Note: `move` only works inside lines! It’s not possible to move past other\n * chunks (replacement characters, tabs, or line endings).\n *\n * @param {Point} point\n * @param {number} offset\n * @returns {void}\n */\nfunction movePoint(point, offset) {\n  point.column += offset\n  point.offset += offset\n  point._bufferIndex += offset\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  asciiAtext,\n  asciiControl\n} from 'micromark-util-character'\n/** @type {Construct} */\nexport const autolink = {\n  name: 'autolink',\n  tokenize: tokenizeAutolink\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeAutolink(effects, ok, nok) {\n  let size = 0\n  return start\n\n  /**\n   * Start of an autolink.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *      ^\n   * > | a<user@example.com>b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('autolink')\n    effects.enter('autolinkMarker')\n    effects.consume(code)\n    effects.exit('autolinkMarker')\n    effects.enter('autolinkProtocol')\n    return open\n  }\n\n  /**\n   * After `<`, at protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *       ^\n   * > | a<user@example.com>b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return schemeOrEmailAtext\n    }\n    return emailAtext(code)\n  }\n\n  /**\n   * At second byte of protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeOrEmailAtext(code) {\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) {\n      // Count the previous alphabetical from `open` too.\n      size = 1\n      return schemeInsideOrEmailAtext(code)\n    }\n    return emailAtext(code)\n  }\n\n  /**\n   * In ambiguous protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeInsideOrEmailAtext(code) {\n    if (code === 58) {\n      effects.consume(code)\n      size = 0\n      return urlInside\n    }\n\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if (\n      (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) &&\n      size++ < 32\n    ) {\n      effects.consume(code)\n      return schemeInsideOrEmailAtext\n    }\n    size = 0\n    return emailAtext(code)\n  }\n\n  /**\n   * After protocol, in URL.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function urlInside(code) {\n    if (code === 62) {\n      effects.exit('autolinkProtocol')\n      effects.enter('autolinkMarker')\n      effects.consume(code)\n      effects.exit('autolinkMarker')\n      effects.exit('autolink')\n      return ok\n    }\n\n    // ASCII control, space, or `<`.\n    if (code === null || code === 32 || code === 60 || asciiControl(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return urlInside\n  }\n\n  /**\n   * In email atext.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtext(code) {\n    if (code === 64) {\n      effects.consume(code)\n      return emailAtSignOrDot\n    }\n    if (asciiAtext(code)) {\n      effects.consume(code)\n      return emailAtext\n    }\n    return nok(code)\n  }\n\n  /**\n   * In label, after at-sign or dot.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                 ^       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtSignOrDot(code) {\n    return asciiAlphanumeric(code) ? emailLabel(code) : nok(code)\n  }\n\n  /**\n   * In label, where `.` and `>` are allowed.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailLabel(code) {\n    if (code === 46) {\n      effects.consume(code)\n      size = 0\n      return emailAtSignOrDot\n    }\n    if (code === 62) {\n      // Exit, then change the token type.\n      effects.exit('autolinkProtocol').type = 'autolinkEmail'\n      effects.enter('autolinkMarker')\n      effects.consume(code)\n      effects.exit('autolinkMarker')\n      effects.exit('autolink')\n      return ok\n    }\n    return emailValue(code)\n  }\n\n  /**\n   * In label, where `.` and `>` are *not* allowed.\n   *\n   * Though, this is also used in `emailLabel` to parse other values.\n   *\n   * ```markdown\n   * > | a<user.name@ex-ample.com>b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailValue(code) {\n    // ASCII alphanumeric or `-`.\n    if ((code === 45 || asciiAlphanumeric(code)) && size++ < 63) {\n      const next = code === 45 ? emailValue : emailLabel\n      effects.consume(code)\n      return next\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\n/** @type {Construct} */\nexport const htmlText = {\n  name: 'htmlText',\n  tokenize: tokenizeHtmlText\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlText(effects, ok, nok) {\n  const self = this\n  /** @type {NonNullable<Code> | undefined} */\n  let marker\n  /** @type {number} */\n  let index\n  /** @type {State} */\n  let returnState\n  return start\n\n  /**\n   * Start of HTML (text).\n   *\n   * ```markdown\n   * > | a <b> c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('htmlText')\n    effects.enter('htmlTextData')\n    effects.consume(code)\n    return open\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | a <b> c\n   *        ^\n   * > | a <!doctype> c\n   *        ^\n   * > | a <!--b--> c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code)\n      return declarationOpen\n    }\n    if (code === 47) {\n      effects.consume(code)\n      return tagCloseStart\n    }\n    if (code === 63) {\n      effects.consume(code)\n      return instruction\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return tagOpen\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | a <!doctype> c\n   *         ^\n   * > | a <!--b--> c\n   *         ^\n   * > | a <![CDATA[>&<]]> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentOpenInside\n    }\n    if (code === 91) {\n      effects.consume(code)\n      index = 0\n      return cdataOpenInside\n    }\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return declaration\n    }\n    return nok(code)\n  }\n\n  /**\n   * In a comment, after `<!-`, at another `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentEnd\n    }\n    return nok(code)\n  }\n\n  /**\n   * In comment.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function comment(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    if (code === 45) {\n      effects.consume(code)\n      return commentClose\n    }\n    if (markdownLineEnding(code)) {\n      returnState = comment\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return comment\n  }\n\n  /**\n   * In comment, after `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentClose(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentEnd\n    }\n    return comment(code)\n  }\n\n  /**\n   * In comment, after `--`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentEnd(code) {\n    return code === 62\n      ? end(code)\n      : code === 45\n      ? commentClose(code)\n      : comment(code)\n  }\n\n  /**\n   * After `<![`, in CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *          ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = 'CDATA['\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code)\n      return index === value.length ? cdata : cdataOpenInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * In CDATA.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdata(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    if (code === 93) {\n      effects.consume(code)\n      return cdataClose\n    }\n    if (markdownLineEnding(code)) {\n      returnState = cdata\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return cdata\n  }\n\n  /**\n   * In CDATA, after `]`, at another `]`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataClose(code) {\n    if (code === 93) {\n      effects.consume(code)\n      return cdataEnd\n    }\n    return cdata(code)\n  }\n\n  /**\n   * In CDATA, after `]]`, at `>`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataEnd(code) {\n    if (code === 62) {\n      return end(code)\n    }\n    if (code === 93) {\n      effects.consume(code)\n      return cdataEnd\n    }\n    return cdata(code)\n  }\n\n  /**\n   * In declaration.\n   *\n   * ```markdown\n   * > | a <!b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declaration(code) {\n    if (code === null || code === 62) {\n      return end(code)\n    }\n    if (markdownLineEnding(code)) {\n      returnState = declaration\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return declaration\n  }\n\n  /**\n   * In instruction.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instruction(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    if (code === 63) {\n      effects.consume(code)\n      return instructionClose\n    }\n    if (markdownLineEnding(code)) {\n      returnState = instruction\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return instruction\n  }\n\n  /**\n   * In instruction, after `?`, at `>`.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instructionClose(code) {\n    return code === 62 ? end(code) : instruction(code)\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return tagClose\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `</x`, in a tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagClose(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      return tagClose\n    }\n    return tagCloseBetween(code)\n  }\n\n  /**\n   * In closing tag, after tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseBetween(code) {\n    if (markdownLineEnding(code)) {\n      returnState = tagCloseBetween\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagCloseBetween\n    }\n    return end(code)\n  }\n\n  /**\n   * After `<x`, in opening tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpen(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      return tagOpen\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In opening tag, after tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenBetween(code) {\n    if (code === 47) {\n      effects.consume(code)\n      return end\n    }\n\n    // ASCII alphabetical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code)\n      return tagOpenAttributeName\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenBetween\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenBetween\n    }\n    return end(code)\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeName(code) {\n    // ASCII alphabetical and `-`, `.`, `:`, and `_`.\n    if (\n      code === 45 ||\n      code === 46 ||\n      code === 58 ||\n      code === 95 ||\n      asciiAlphanumeric(code)\n    ) {\n      effects.consume(code)\n      return tagOpenAttributeName\n    }\n    return tagOpenAttributeNameAfter(code)\n  }\n\n  /**\n   * After attribute name, before initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code)\n      return tagOpenAttributeValueBefore\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeNameAfter\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenAttributeNameAfter\n    }\n    return tagOpenBetween(code)\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueBefore(code) {\n    if (\n      code === null ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code)\n      marker = code\n      return tagOpenAttributeValueQuoted\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueBefore\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenAttributeValueBefore\n    }\n    effects.consume(code)\n    return tagOpenAttributeValueUnquoted\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuoted(code) {\n    if (code === marker) {\n      effects.consume(code)\n      marker = undefined\n      return tagOpenAttributeValueQuotedAfter\n    }\n    if (code === null) {\n      return nok(code)\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueQuoted\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return tagOpenAttributeValueQuoted\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueUnquoted(code) {\n    if (\n      code === null ||\n      code === 34 ||\n      code === 39 ||\n      code === 60 ||\n      code === 61 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n    effects.consume(code)\n    return tagOpenAttributeValueUnquoted\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the end\n   * of the tag.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In certain circumstances of a tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function end(code) {\n    if (code === 62) {\n      effects.consume(code)\n      effects.exit('htmlTextData')\n      effects.exit('htmlText')\n      return ok\n    }\n    return nok(code)\n  }\n\n  /**\n   * At eol.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   * > | a <!--a\n   *            ^\n   *   | b-->\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingBefore(code) {\n    effects.exit('htmlTextData')\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return lineEndingAfter\n  }\n\n  /**\n   * After eol, at optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfter(code) {\n    // Always populated by defaults.\n\n    return markdownSpace(code)\n      ? factorySpace(\n          effects,\n          lineEndingAfterPrefix,\n          'linePrefix',\n          self.parser.constructs.disable.null.includes('codeIndented')\n            ? undefined\n            : 4\n        )(code)\n      : lineEndingAfterPrefix(code)\n  }\n\n  /**\n   * After eol, after optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfterPrefix(code) {\n    effects.enter('htmlTextData')\n    return returnState(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {labelEnd} from './label-end.js'\n\n/** @type {Construct} */\nexport const labelStartLink = {\n  name: 'labelStartLink',\n  tokenize: tokenizeLabelStartLink,\n  resolveAll: labelEnd.resolveAll\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartLink(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of label (link) start.\n   *\n   * ```markdown\n   * > | a [b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('labelLink')\n    effects.enter('labelMarker')\n    effects.consume(code)\n    effects.exit('labelMarker')\n    effects.exit('labelLink')\n    return after\n  }\n\n  /** @type {State} */\n  function after(code) {\n    // To do: this isn’t needed in `micromark-extension-gfm-footnote`,\n    // remove.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs\n      ? nok(code)\n      : ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {Construct} */\nexport const hardBreakEscape = {\n  name: 'hardBreakEscape',\n  tokenize: tokenizeHardBreakEscape\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHardBreakEscape(effects, ok, nok) {\n  return start\n\n  /**\n   * Start of a hard break (escape).\n   *\n   * ```markdown\n   * > | a\\\n   *      ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('hardBreakEscape')\n    effects.consume(code)\n    return after\n  }\n\n  /**\n   * After `\\`, at eol.\n   *\n   * ```markdown\n   * > | a\\\n   *       ^\n   *   | b\n   * ```\n   *\n   *  @type {State}\n   */\n  function after(code) {\n    if (markdownLineEnding(code)) {\n      effects.exit('hardBreakEscape')\n      return ok(code)\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Previous} Previous\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {Construct} */\nexport const codeText = {\n  name: 'codeText',\n  tokenize: tokenizeCodeText,\n  resolve: resolveCodeText,\n  previous\n}\n\n// To do: next major: don’t resolve, like `markdown-rs`.\n/** @type {Resolver} */\nfunction resolveCodeText(events) {\n  let tailExitIndex = events.length - 4\n  let headEnterIndex = 3\n  /** @type {number} */\n  let index\n  /** @type {number | undefined} */\n  let enter\n\n  // If we start and end with an EOL or a space.\n  if (\n    (events[headEnterIndex][1].type === 'lineEnding' ||\n      events[headEnterIndex][1].type === 'space') &&\n    (events[tailExitIndex][1].type === 'lineEnding' ||\n      events[tailExitIndex][1].type === 'space')\n  ) {\n    index = headEnterIndex\n\n    // And we have data.\n    while (++index < tailExitIndex) {\n      if (events[index][1].type === 'codeTextData') {\n        // Then we have padding.\n        events[headEnterIndex][1].type = 'codeTextPadding'\n        events[tailExitIndex][1].type = 'codeTextPadding'\n        headEnterIndex += 2\n        tailExitIndex -= 2\n        break\n      }\n    }\n  }\n\n  // Merge adjacent spaces and data.\n  index = headEnterIndex - 1\n  tailExitIndex++\n  while (++index <= tailExitIndex) {\n    if (enter === undefined) {\n      if (index !== tailExitIndex && events[index][1].type !== 'lineEnding') {\n        enter = index\n      }\n    } else if (\n      index === tailExitIndex ||\n      events[index][1].type === 'lineEnding'\n    ) {\n      events[enter][1].type = 'codeTextData'\n      if (index !== enter + 2) {\n        events[enter][1].end = events[index - 1][1].end\n        events.splice(enter + 2, index - enter - 2)\n        tailExitIndex -= index - enter - 2\n        index = enter + 2\n      }\n      enter = undefined\n    }\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Previous}\n */\nfunction previous(code) {\n  // If there is a previous code, there will always be a tail.\n  return (\n    code !== 96 ||\n    this.events[this.events.length - 1][1].type === 'characterEscape'\n  )\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeText(effects, ok, nok) {\n  const self = this\n  let sizeOpen = 0\n  /** @type {number} */\n  let size\n  /** @type {Token} */\n  let token\n  return start\n\n  /**\n   * Start of code (text).\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * > | \\`a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('codeText')\n    effects.enter('codeTextSequence')\n    return sequenceOpen(code)\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 96) {\n      effects.consume(code)\n      sizeOpen++\n      return sequenceOpen\n    }\n    effects.exit('codeTextSequence')\n    return between(code)\n  }\n\n  /**\n   * Between something and something else.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function between(code) {\n    // EOF.\n    if (code === null) {\n      return nok(code)\n    }\n\n    // To do: next major: don’t do spaces in resolve, but when compiling,\n    // like `markdown-rs`.\n    // Tabs don’t work, and virtual spaces don’t make sense.\n    if (code === 32) {\n      effects.enter('space')\n      effects.consume(code)\n      effects.exit('space')\n      return between\n    }\n\n    // Closing fence? Could also be data.\n    if (code === 96) {\n      token = effects.enter('codeTextSequence')\n      size = 0\n      return sequenceClose(code)\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return between\n    }\n\n    // Data.\n    effects.enter('codeTextData')\n    return data(code)\n  }\n\n  /**\n   * In data.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (\n      code === null ||\n      code === 32 ||\n      code === 96 ||\n      markdownLineEnding(code)\n    ) {\n      effects.exit('codeTextData')\n      return between(code)\n    }\n    effects.consume(code)\n    return data\n  }\n\n  /**\n   * In closing sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceClose(code) {\n    // More.\n    if (code === 96) {\n      effects.consume(code)\n      size++\n      return sequenceClose\n    }\n\n    // Done!\n    if (size === sizeOpen) {\n      effects.exit('codeTextSequence')\n      effects.exit('codeText')\n      return ok(code)\n    }\n\n    // More or less accents: mark as data.\n    token.type = 'codeTextData'\n    return data(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n */\n\nimport {\n  attention,\n  autolink,\n  blockQuote,\n  characterEscape,\n  characterReference,\n  codeFenced,\n  codeIndented,\n  codeText,\n  definition,\n  hardBreakEscape,\n  headingAtx,\n  htmlFlow,\n  htmlText,\n  labelEnd,\n  labelStartImage,\n  labelStartLink,\n  lineEnding,\n  list,\n  setextUnderline,\n  thematicBreak\n} from 'micromark-core-commonmark'\nimport {resolver as resolveText} from './initialize/text.js'\n\n/** @satisfies {Extension['document']} */\nexport const document = {\n  [42]: list,\n  [43]: list,\n  [45]: list,\n  [48]: list,\n  [49]: list,\n  [50]: list,\n  [51]: list,\n  [52]: list,\n  [53]: list,\n  [54]: list,\n  [55]: list,\n  [56]: list,\n  [57]: list,\n  [62]: blockQuote\n}\n\n/** @satisfies {Extension['contentInitial']} */\nexport const contentInitial = {\n  [91]: definition\n}\n\n/** @satisfies {Extension['flowInitial']} */\nexport const flowInitial = {\n  [-2]: codeIndented,\n  [-1]: codeIndented,\n  [32]: codeIndented\n}\n\n/** @satisfies {Extension['flow']} */\nexport const flow = {\n  [35]: headingAtx,\n  [42]: thematicBreak,\n  [45]: [setextUnderline, thematicBreak],\n  [60]: htmlFlow,\n  [61]: setextUnderline,\n  [95]: thematicBreak,\n  [96]: codeFenced,\n  [126]: codeFenced\n}\n\n/** @satisfies {Extension['string']} */\nexport const string = {\n  [38]: characterReference,\n  [92]: characterEscape\n}\n\n/** @satisfies {Extension['text']} */\nexport const text = {\n  [-5]: lineEnding,\n  [-4]: lineEnding,\n  [-3]: lineEnding,\n  [33]: labelStartImage,\n  [38]: characterReference,\n  [42]: attention,\n  [60]: [autolink, htmlText],\n  [91]: labelStartLink,\n  [92]: [hardBreakEscape, characterEscape],\n  [93]: labelEnd,\n  [95]: attention,\n  [96]: codeText\n}\n\n/** @satisfies {Extension['insideSpan']} */\nexport const insideSpan = {\n  null: [attention, resolveText]\n}\n\n/** @satisfies {Extension['attentionMarkers']} */\nexport const attentionMarkers = {\n  null: [42, 95]\n}\n\n/** @satisfies {Extension['disable']} */\nexport const disable = {\n  null: []\n}\n","/**\n * @typedef {import('micromark-util-types').Create} Create\n * @typedef {import('micromark-util-types').FullNormalizedExtension} FullNormalizedExtension\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\n */\n\nimport {combineExtensions} from 'micromark-util-combine-extensions'\nimport {content} from './initialize/content.js'\nimport {document} from './initialize/document.js'\nimport {flow} from './initialize/flow.js'\nimport {text, string} from './initialize/text.js'\nimport {createTokenizer} from './create-tokenizer.js'\nimport * as defaultConstructs from './constructs.js'\n\n/**\n * @param {ParseOptions | null | undefined} [options]\n * @returns {ParseContext}\n */\nexport function parse(options) {\n  const settings = options || {}\n  const constructs =\n    /** @type {FullNormalizedExtension} */\n    combineExtensions([defaultConstructs, ...(settings.extensions || [])])\n\n  /** @type {ParseContext} */\n  const parser = {\n    defined: [],\n    lazy: {},\n    constructs,\n    content: create(content),\n    document: create(document),\n    flow: create(flow),\n    string: create(string),\n    text: create(text)\n  }\n  return parser\n\n  /**\n   * @param {InitialConstruct} initial\n   */\n  function create(initial) {\n    return creator\n    /** @type {Create} */\n    function creator(from) {\n      return createTokenizer(parser, initial, from)\n    }\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Value} Value\n */\n\n/**\n * @callback Preprocessor\n * @param {Value} value\n * @param {Encoding | null | undefined} [encoding]\n * @param {boolean | null | undefined} [end=false]\n * @returns {Array<Chunk>}\n */\n\nconst search = /[\\0\\t\\n\\r]/g\n\n/**\n * @returns {Preprocessor}\n */\nexport function preprocess() {\n  let column = 1\n  let buffer = ''\n  /** @type {boolean | undefined} */\n  let start = true\n  /** @type {boolean | undefined} */\n  let atCarriageReturn\n  return preprocessor\n\n  /** @type {Preprocessor} */\n  function preprocessor(value, encoding, end) {\n    /** @type {Array<Chunk>} */\n    const chunks = []\n    /** @type {RegExpMatchArray | null} */\n    let match\n    /** @type {number} */\n    let next\n    /** @type {number} */\n    let startPosition\n    /** @type {number} */\n    let endPosition\n    /** @type {Code} */\n    let code\n\n    // @ts-expect-error `Buffer` does allow an encoding.\n    value = buffer + value.toString(encoding)\n    startPosition = 0\n    buffer = ''\n    if (start) {\n      // To do: `markdown-rs` actually parses BOMs (byte order mark).\n      if (value.charCodeAt(0) === 65279) {\n        startPosition++\n      }\n      start = undefined\n    }\n    while (startPosition < value.length) {\n      search.lastIndex = startPosition\n      match = search.exec(value)\n      endPosition =\n        match && match.index !== undefined ? match.index : value.length\n      code = value.charCodeAt(endPosition)\n      if (!match) {\n        buffer = value.slice(startPosition)\n        break\n      }\n      if (code === 10 && startPosition === endPosition && atCarriageReturn) {\n        chunks.push(-3)\n        atCarriageReturn = undefined\n      } else {\n        if (atCarriageReturn) {\n          chunks.push(-5)\n          atCarriageReturn = undefined\n        }\n        if (startPosition < endPosition) {\n          chunks.push(value.slice(startPosition, endPosition))\n          column += endPosition - startPosition\n        }\n        switch (code) {\n          case 0: {\n            chunks.push(65533)\n            column++\n            break\n          }\n          case 9: {\n            next = Math.ceil(column / 4) * 4\n            chunks.push(-2)\n            while (column++ < next) chunks.push(-1)\n            break\n          }\n          case 10: {\n            chunks.push(-4)\n            column = 1\n            break\n          }\n          default: {\n            atCarriageReturn = true\n            column = 1\n          }\n        }\n      }\n      startPosition = endPosition + 1\n    }\n    if (end) {\n      if (atCarriageReturn) chunks.push(-5)\n      if (buffer) chunks.push(buffer)\n      chunks.push(null)\n    }\n    return chunks\n  }\n}\n","/**\n * Turn the number (in string form as either hexa- or plain decimal) coming from\n * a numeric character reference into a character.\n *\n * Sort of like `String.fromCharCode(Number.parseInt(value, base))`, but makes\n * non-characters and control characters safe.\n *\n * @param {string} value\n *   Value to decode.\n * @param {number} base\n *   Numeric base.\n * @returns {string}\n *   Character.\n */\nexport function decodeNumericCharacterReference(value, base) {\n  const code = Number.parseInt(value, base)\n  if (\n    // C0 except for HT, LF, FF, CR, space.\n    code < 9 ||\n    code === 11 ||\n    (code > 13 && code < 32) ||\n    // Control character (DEL) of C0, and C1 controls.\n    (code > 126 && code < 160) ||\n    // Lone high surrogates and low surrogates.\n    (code > 55295 && code < 57344) ||\n    // Noncharacters.\n    (code > 64975 && code < 65008) /* eslint-disable no-bitwise */ ||\n    (code & 65535) === 65535 ||\n    (code & 65535) === 65534 /* eslint-enable no-bitwise */ ||\n    // Out of range\n    code > 1114111\n  ) {\n    return '\\uFFFD'\n  }\n  return String.fromCharCode(code)\n}\n","import {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {decodeNumericCharacterReference} from 'micromark-util-decode-numeric-character-reference'\nconst characterEscapeOrReference =\n  /\\\\([!-/:-@[-`{-~])|&(#(?:\\d{1,7}|x[\\da-f]{1,6})|[\\da-z]{1,31});/gi\n\n/**\n * Decode markdown strings (which occur in places such as fenced code info\n * strings, destinations, labels, and titles).\n *\n * The “string” content type allows character escapes and -references.\n * This decodes those.\n *\n * @param {string} value\n *   Value to decode.\n * @returns {string}\n *   Decoded value.\n */\nexport function decodeString(value) {\n  return value.replace(characterEscapeOrReference, decode)\n}\n\n/**\n * @param {string} $0\n * @param {string} $1\n * @param {string} $2\n * @returns {string}\n */\nfunction decode($0, $1, $2) {\n  if ($1) {\n    // Escape.\n    return $1\n  }\n\n  // Reference.\n  const head = $2.charCodeAt(0)\n  if (head === 35) {\n    const head = $2.charCodeAt(1)\n    const hex = head === 120 || head === 88\n    return decodeNumericCharacterReference($2.slice(hex ? 2 : 1), hex ? 16 : 10)\n  }\n  return decodeNamedCharacterReference($2) || $0\n}\n","/**\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Value} Value\n *\n * @typedef {import('unist').Parent} UnistParent\n * @typedef {import('unist').Point} Point\n *\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n * @typedef {import('mdast').StaticPhrasingContent} StaticPhrasingContent\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').Break} Break\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('mdast').Code} Code\n * @typedef {import('mdast').Definition} Definition\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('mdast').HTML} HTML\n * @typedef {import('mdast').Image} Image\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('mdast').Link} Link\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('mdast').List} List\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('mdast').Text} Text\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n * @typedef {import('mdast').ReferenceType} ReferenceType\n * @typedef {import('../index.js').CompileData} CompileData\n */\n\n/**\n * @typedef {Root | Content} Node\n * @typedef {Extract<Node, UnistParent>} Parent\n *\n * @typedef {Omit<UnistParent, 'type' | 'children'> & {type: 'fragment', children: Array<PhrasingContent>}} Fragment\n */\n\n/**\n * @callback Transform\n *   Extra transform, to change the AST afterwards.\n * @param {Root} tree\n *   Tree to transform.\n * @returns {Root | undefined | null | void}\n *   New tree or nothing (in which case the current tree is used).\n *\n * @callback Handle\n *   Handle a token.\n * @param {CompileContext} this\n *   Context.\n * @param {Token} token\n *   Current token.\n * @returns {void}\n *   Nothing.\n *\n * @typedef {Record<string, Handle>} Handles\n *   Token types mapping to handles\n *\n * @callback OnEnterError\n *   Handle the case where the `right` token is open, but it is closed (by the\n *   `left` token) or because we reached the end of the document.\n * @param {Omit<CompileContext, 'sliceSerialize'>} this\n *   Context.\n * @param {Token | undefined} left\n *   Left token.\n * @param {Token} right\n *   Right token.\n * @returns {void}\n *   Nothing.\n *\n * @callback OnExitError\n *   Handle the case where the `right` token is open but it is closed by\n *   exiting the `left` token.\n * @param {Omit<CompileContext, 'sliceSerialize'>} this\n *   Context.\n * @param {Token} left\n *   Left token.\n * @param {Token} right\n *   Right token.\n * @returns {void}\n *   Nothing.\n *\n * @typedef {[Token, OnEnterError | undefined]} TokenTuple\n *   Open token on the stack, with an optional error handler for when\n *   that token isn’t closed properly.\n */\n\n/**\n * @typedef Config\n *   Configuration.\n *\n *   We have our defaults, but extensions will add more.\n * @property {Array<string>} canContainEols\n *   Token types where line endings are used.\n * @property {Handles} enter\n *   Opening handles.\n * @property {Handles} exit\n *   Closing handles.\n * @property {Array<Transform>} transforms\n *   Tree transforms.\n *\n * @typedef {Partial<Config>} Extension\n *   Change how markdown tokens from micromark are turned into mdast.\n *\n * @typedef CompileContext\n *   mdast compiler context.\n * @property {Array<Node | Fragment>} stack\n *   Stack of nodes.\n * @property {Array<TokenTuple>} tokenStack\n *   Stack of tokens.\n * @property {<Key extends keyof CompileData>(key: Key) => CompileData[Key]} getData\n *   Get data from the key/value store.\n * @property {<Key extends keyof CompileData>(key: Key, value?: CompileData[Key]) => void} setData\n *   Set data into the key/value store.\n * @property {(this: CompileContext) => void} buffer\n *   Capture some of the output data.\n * @property {(this: CompileContext) => string} resume\n *   Stop capturing and access the output data.\n * @property {<Kind extends Node>(this: CompileContext, node: Kind, token: Token, onError?: OnEnterError) => Kind} enter\n *   Enter a token.\n * @property {(this: CompileContext, token: Token, onError?: OnExitError) => Node} exit\n *   Exit a token.\n * @property {TokenizeContext['sliceSerialize']} sliceSerialize\n *   Get the string value of a token.\n * @property {Config} config\n *   Configuration.\n *\n * @typedef FromMarkdownOptions\n *   Configuration for how to build mdast.\n * @property {Array<Extension | Array<Extension>> | null | undefined} [mdastExtensions]\n *   Extensions for this utility to change how tokens are turned into a tree.\n *\n * @typedef {ParseOptions & FromMarkdownOptions} Options\n *   Configuration.\n */\n\n// To do: micromark: create a registry of tokens?\n// To do: next major: don’t return given `Node` from `enter`.\n// To do: next major: remove setter/getter.\n\nimport {toString} from 'mdast-util-to-string'\nimport {parse} from 'micromark/lib/parse.js'\nimport {preprocess} from 'micromark/lib/preprocess.js'\nimport {postprocess} from 'micromark/lib/postprocess.js'\nimport {decodeNumericCharacterReference} from 'micromark-util-decode-numeric-character-reference'\nimport {decodeString} from 'micromark-util-decode-string'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {stringifyPosition} from 'unist-util-stringify-position'\nconst own = {}.hasOwnProperty\n\n/**\n * @param value\n *   Markdown to parse.\n * @param encoding\n *   Character encoding for when `value` is `Buffer`.\n * @param options\n *   Configuration.\n * @returns\n *   mdast tree.\n */\nexport const fromMarkdown =\n  /**\n   * @type {(\n   *   ((value: Value, encoding: Encoding, options?: Options | null | undefined) => Root) &\n   *   ((value: Value, options?: Options | null | undefined) => Root)\n   * )}\n   */\n\n  /**\n   * @param {Value} value\n   * @param {Encoding | Options | null | undefined} [encoding]\n   * @param {Options | null | undefined} [options]\n   * @returns {Root}\n   */\n  function (value, encoding, options) {\n    if (typeof encoding !== 'string') {\n      options = encoding\n      encoding = undefined\n    }\n    return compiler(options)(\n      postprocess(\n        parse(options).document().write(preprocess()(value, encoding, true))\n      )\n    )\n  }\n\n/**\n * Note this compiler only understand complete buffering, not streaming.\n *\n * @param {Options | null | undefined} [options]\n */\nfunction compiler(options) {\n  /** @type {Config} */\n  const config = {\n    transforms: [],\n    canContainEols: ['emphasis', 'fragment', 'heading', 'paragraph', 'strong'],\n    enter: {\n      autolink: opener(link),\n      autolinkProtocol: onenterdata,\n      autolinkEmail: onenterdata,\n      atxHeading: opener(heading),\n      blockQuote: opener(blockQuote),\n      characterEscape: onenterdata,\n      characterReference: onenterdata,\n      codeFenced: opener(codeFlow),\n      codeFencedFenceInfo: buffer,\n      codeFencedFenceMeta: buffer,\n      codeIndented: opener(codeFlow, buffer),\n      codeText: opener(codeText, buffer),\n      codeTextData: onenterdata,\n      data: onenterdata,\n      codeFlowValue: onenterdata,\n      definition: opener(definition),\n      definitionDestinationString: buffer,\n      definitionLabelString: buffer,\n      definitionTitleString: buffer,\n      emphasis: opener(emphasis),\n      hardBreakEscape: opener(hardBreak),\n      hardBreakTrailing: opener(hardBreak),\n      htmlFlow: opener(html, buffer),\n      htmlFlowData: onenterdata,\n      htmlText: opener(html, buffer),\n      htmlTextData: onenterdata,\n      image: opener(image),\n      label: buffer,\n      link: opener(link),\n      listItem: opener(listItem),\n      listItemValue: onenterlistitemvalue,\n      listOrdered: opener(list, onenterlistordered),\n      listUnordered: opener(list),\n      paragraph: opener(paragraph),\n      reference: onenterreference,\n      referenceString: buffer,\n      resourceDestinationString: buffer,\n      resourceTitleString: buffer,\n      setextHeading: opener(heading),\n      strong: opener(strong),\n      thematicBreak: opener(thematicBreak)\n    },\n    exit: {\n      atxHeading: closer(),\n      atxHeadingSequence: onexitatxheadingsequence,\n      autolink: closer(),\n      autolinkEmail: onexitautolinkemail,\n      autolinkProtocol: onexitautolinkprotocol,\n      blockQuote: closer(),\n      characterEscapeValue: onexitdata,\n      characterReferenceMarkerHexadecimal: onexitcharacterreferencemarker,\n      characterReferenceMarkerNumeric: onexitcharacterreferencemarker,\n      characterReferenceValue: onexitcharacterreferencevalue,\n      codeFenced: closer(onexitcodefenced),\n      codeFencedFence: onexitcodefencedfence,\n      codeFencedFenceInfo: onexitcodefencedfenceinfo,\n      codeFencedFenceMeta: onexitcodefencedfencemeta,\n      codeFlowValue: onexitdata,\n      codeIndented: closer(onexitcodeindented),\n      codeText: closer(onexitcodetext),\n      codeTextData: onexitdata,\n      data: onexitdata,\n      definition: closer(),\n      definitionDestinationString: onexitdefinitiondestinationstring,\n      definitionLabelString: onexitdefinitionlabelstring,\n      definitionTitleString: onexitdefinitiontitlestring,\n      emphasis: closer(),\n      hardBreakEscape: closer(onexithardbreak),\n      hardBreakTrailing: closer(onexithardbreak),\n      htmlFlow: closer(onexithtmlflow),\n      htmlFlowData: onexitdata,\n      htmlText: closer(onexithtmltext),\n      htmlTextData: onexitdata,\n      image: closer(onexitimage),\n      label: onexitlabel,\n      labelText: onexitlabeltext,\n      lineEnding: onexitlineending,\n      link: closer(onexitlink),\n      listItem: closer(),\n      listOrdered: closer(),\n      listUnordered: closer(),\n      paragraph: closer(),\n      referenceString: onexitreferencestring,\n      resourceDestinationString: onexitresourcedestinationstring,\n      resourceTitleString: onexitresourcetitlestring,\n      resource: onexitresource,\n      setextHeading: closer(onexitsetextheading),\n      setextHeadingLineSequence: onexitsetextheadinglinesequence,\n      setextHeadingText: onexitsetextheadingtext,\n      strong: closer(),\n      thematicBreak: closer()\n    }\n  }\n  configure(config, (options || {}).mdastExtensions || [])\n\n  /** @type {CompileData} */\n  const data = {}\n  return compile\n\n  /**\n   * Turn micromark events into an mdast tree.\n   *\n   * @param {Array<Event>} events\n   *   Events.\n   * @returns {Root}\n   *   mdast tree.\n   */\n  function compile(events) {\n    /** @type {Root} */\n    let tree = {\n      type: 'root',\n      children: []\n    }\n    /** @type {Omit<CompileContext, 'sliceSerialize'>} */\n    const context = {\n      stack: [tree],\n      tokenStack: [],\n      config,\n      enter,\n      exit,\n      buffer,\n      resume,\n      setData,\n      getData\n    }\n    /** @type {Array<number>} */\n    const listStack = []\n    let index = -1\n    while (++index < events.length) {\n      // We preprocess lists to add `listItem` tokens, and to infer whether\n      // items the list itself are spread out.\n      if (\n        events[index][1].type === 'listOrdered' ||\n        events[index][1].type === 'listUnordered'\n      ) {\n        if (events[index][0] === 'enter') {\n          listStack.push(index)\n        } else {\n          const tail = listStack.pop()\n          index = prepareList(events, tail, index)\n        }\n      }\n    }\n    index = -1\n    while (++index < events.length) {\n      const handler = config[events[index][0]]\n      if (own.call(handler, events[index][1].type)) {\n        handler[events[index][1].type].call(\n          Object.assign(\n            {\n              sliceSerialize: events[index][2].sliceSerialize\n            },\n            context\n          ),\n          events[index][1]\n        )\n      }\n    }\n\n    // Handle tokens still being open.\n    if (context.tokenStack.length > 0) {\n      const tail = context.tokenStack[context.tokenStack.length - 1]\n      const handler = tail[1] || defaultOnError\n      handler.call(context, undefined, tail[0])\n    }\n\n    // Figure out `root` position.\n    tree.position = {\n      start: point(\n        events.length > 0\n          ? events[0][1].start\n          : {\n              line: 1,\n              column: 1,\n              offset: 0\n            }\n      ),\n      end: point(\n        events.length > 0\n          ? events[events.length - 2][1].end\n          : {\n              line: 1,\n              column: 1,\n              offset: 0\n            }\n      )\n    }\n\n    // Call transforms.\n    index = -1\n    while (++index < config.transforms.length) {\n      tree = config.transforms[index](tree) || tree\n    }\n    return tree\n  }\n\n  /**\n   * @param {Array<Event>} events\n   * @param {number} start\n   * @param {number} length\n   * @returns {number}\n   */\n  function prepareList(events, start, length) {\n    let index = start - 1\n    let containerBalance = -1\n    let listSpread = false\n    /** @type {Token | undefined} */\n    let listItem\n    /** @type {number | undefined} */\n    let lineIndex\n    /** @type {number | undefined} */\n    let firstBlankLineIndex\n    /** @type {boolean | undefined} */\n    let atMarker\n    while (++index <= length) {\n      const event = events[index]\n      if (\n        event[1].type === 'listUnordered' ||\n        event[1].type === 'listOrdered' ||\n        event[1].type === 'blockQuote'\n      ) {\n        if (event[0] === 'enter') {\n          containerBalance++\n        } else {\n          containerBalance--\n        }\n        atMarker = undefined\n      } else if (event[1].type === 'lineEndingBlank') {\n        if (event[0] === 'enter') {\n          if (\n            listItem &&\n            !atMarker &&\n            !containerBalance &&\n            !firstBlankLineIndex\n          ) {\n            firstBlankLineIndex = index\n          }\n          atMarker = undefined\n        }\n      } else if (\n        event[1].type === 'linePrefix' ||\n        event[1].type === 'listItemValue' ||\n        event[1].type === 'listItemMarker' ||\n        event[1].type === 'listItemPrefix' ||\n        event[1].type === 'listItemPrefixWhitespace'\n      ) {\n        // Empty.\n      } else {\n        atMarker = undefined\n      }\n      if (\n        (!containerBalance &&\n          event[0] === 'enter' &&\n          event[1].type === 'listItemPrefix') ||\n        (containerBalance === -1 &&\n          event[0] === 'exit' &&\n          (event[1].type === 'listUnordered' ||\n            event[1].type === 'listOrdered'))\n      ) {\n        if (listItem) {\n          let tailIndex = index\n          lineIndex = undefined\n          while (tailIndex--) {\n            const tailEvent = events[tailIndex]\n            if (\n              tailEvent[1].type === 'lineEnding' ||\n              tailEvent[1].type === 'lineEndingBlank'\n            ) {\n              if (tailEvent[0] === 'exit') continue\n              if (lineIndex) {\n                events[lineIndex][1].type = 'lineEndingBlank'\n                listSpread = true\n              }\n              tailEvent[1].type = 'lineEnding'\n              lineIndex = tailIndex\n            } else if (\n              tailEvent[1].type === 'linePrefix' ||\n              tailEvent[1].type === 'blockQuotePrefix' ||\n              tailEvent[1].type === 'blockQuotePrefixWhitespace' ||\n              tailEvent[1].type === 'blockQuoteMarker' ||\n              tailEvent[1].type === 'listItemIndent'\n            ) {\n              // Empty\n            } else {\n              break\n            }\n          }\n          if (\n            firstBlankLineIndex &&\n            (!lineIndex || firstBlankLineIndex < lineIndex)\n          ) {\n            listItem._spread = true\n          }\n\n          // Fix position.\n          listItem.end = Object.assign(\n            {},\n            lineIndex ? events[lineIndex][1].start : event[1].end\n          )\n          events.splice(lineIndex || index, 0, ['exit', listItem, event[2]])\n          index++\n          length++\n        }\n\n        // Create a new list item.\n        if (event[1].type === 'listItemPrefix') {\n          listItem = {\n            type: 'listItem',\n            _spread: false,\n            start: Object.assign({}, event[1].start),\n            // @ts-expect-error: we’ll add `end` in a second.\n            end: undefined\n          }\n          // @ts-expect-error: `listItem` is most definitely defined, TS...\n          events.splice(index, 0, ['enter', listItem, event[2]])\n          index++\n          length++\n          firstBlankLineIndex = undefined\n          atMarker = true\n        }\n      }\n    }\n    events[start][1]._spread = listSpread\n    return length\n  }\n\n  /**\n   * Set data.\n   *\n   * @template {keyof CompileData} Key\n   *   Field type.\n   * @param {Key} key\n   *   Key of field.\n   * @param {CompileData[Key]} [value]\n   *   New value.\n   * @returns {void}\n   *   Nothing.\n   */\n  function setData(key, value) {\n    data[key] = value\n  }\n\n  /**\n   * Get data.\n   *\n   * @template {keyof CompileData} Key\n   *   Field type.\n   * @param {Key} key\n   *   Key of field.\n   * @returns {CompileData[Key]}\n   *   Value.\n   */\n  function getData(key) {\n    return data[key]\n  }\n\n  /**\n   * Create an opener handle.\n   *\n   * @param {(token: Token) => Node} create\n   *   Create a node.\n   * @param {Handle} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function opener(create, and) {\n    return open\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {void}\n     */\n    function open(token) {\n      enter.call(this, create(token), token)\n      if (and) and.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @returns {void}\n   */\n  function buffer() {\n    this.stack.push({\n      type: 'fragment',\n      children: []\n    })\n  }\n\n  /**\n   * @template {Node} Kind\n   *   Node type.\n   * @this {CompileContext}\n   *   Context.\n   * @param {Kind} node\n   *   Node to enter.\n   * @param {Token} token\n   *   Corresponding token.\n   * @param {OnEnterError | undefined} [errorHandler]\n   *   Handle the case where this token is open, but it is closed by something else.\n   * @returns {Kind}\n   *   The given node.\n   */\n  function enter(node, token, errorHandler) {\n    const parent = this.stack[this.stack.length - 1]\n    // @ts-expect-error: Assume `Node` can exist as a child of `parent`.\n    parent.children.push(node)\n    this.stack.push(node)\n    this.tokenStack.push([token, errorHandler])\n    // @ts-expect-error: `end` will be patched later.\n    node.position = {\n      start: point(token.start)\n    }\n    return node\n  }\n\n  /**\n   * Create a closer handle.\n   *\n   * @param {Handle} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function closer(and) {\n    return close\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {void}\n     */\n    function close(token) {\n      if (and) and.call(this, token)\n      exit.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   *   Context.\n   * @param {Token} token\n   *   Corresponding token.\n   * @param {OnExitError | undefined} [onExitError]\n   *   Handle the case where another token is open.\n   * @returns {Node}\n   *   The closed node.\n   */\n  function exit(token, onExitError) {\n    const node = this.stack.pop()\n    const open = this.tokenStack.pop()\n    if (!open) {\n      throw new Error(\n        'Cannot close `' +\n          token.type +\n          '` (' +\n          stringifyPosition({\n            start: token.start,\n            end: token.end\n          }) +\n          '): it’s not open'\n      )\n    } else if (open[0].type !== token.type) {\n      if (onExitError) {\n        onExitError.call(this, token, open[0])\n      } else {\n        const handler = open[1] || defaultOnError\n        handler.call(this, token, open[0])\n      }\n    }\n    node.position.end = point(token.end)\n    return node\n  }\n\n  /**\n   * @this {CompileContext}\n   * @returns {string}\n   */\n  function resume() {\n    return toString(this.stack.pop())\n  }\n\n  //\n  // Handlers.\n  //\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistordered() {\n    setData('expectingFirstListItemValue', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistitemvalue(token) {\n    if (getData('expectingFirstListItemValue')) {\n      const ancestor = this.stack[this.stack.length - 2]\n      ancestor.start = Number.parseInt(this.sliceSerialize(token), 10)\n      setData('expectingFirstListItemValue')\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfenceinfo() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.lang = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfencemeta() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.meta = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfence() {\n    // Exit if this is the closing fence.\n    if (getData('flowCodeInside')) return\n    this.buffer()\n    setData('flowCodeInside', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefenced() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data.replace(/^(\\r?\\n|\\r)|(\\r?\\n|\\r)$/g, '')\n    setData('flowCodeInside')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodeindented() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data.replace(/(\\r?\\n|\\r)$/g, '')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitionlabelstring(token) {\n    const label = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.label = label\n    node.identifier = normalizeIdentifier(\n      this.sliceSerialize(token)\n    ).toLowerCase()\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiontitlestring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.title = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiondestinationstring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.url = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitatxheadingsequence(token) {\n    const node = this.stack[this.stack.length - 1]\n    if (!node.depth) {\n      const depth = this.sliceSerialize(token).length\n      node.depth = depth\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadingtext() {\n    setData('setextHeadingSlurpLineEnding', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadinglinesequence(token) {\n    const node = this.stack[this.stack.length - 1]\n    node.depth = this.sliceSerialize(token).charCodeAt(0) === 61 ? 1 : 2\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheading() {\n    setData('setextHeadingSlurpLineEnding')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterdata(token) {\n    const node = this.stack[this.stack.length - 1]\n    let tail = node.children[node.children.length - 1]\n    if (!tail || tail.type !== 'text') {\n      // Add a new text node.\n      tail = text()\n      // @ts-expect-error: we’ll add `end` later.\n      tail.position = {\n        start: point(token.start)\n      }\n      // @ts-expect-error: Assume `parent` accepts `text`.\n      node.children.push(tail)\n    }\n    this.stack.push(tail)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitdata(token) {\n    const tail = this.stack.pop()\n    tail.value += this.sliceSerialize(token)\n    tail.position.end = point(token.end)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlineending(token) {\n    const context = this.stack[this.stack.length - 1]\n    // If we’re at a hard break, include the line ending in there.\n    if (getData('atHardBreak')) {\n      const tail = context.children[context.children.length - 1]\n      tail.position.end = point(token.end)\n      setData('atHardBreak')\n      return\n    }\n    if (\n      !getData('setextHeadingSlurpLineEnding') &&\n      config.canContainEols.includes(context.type)\n    ) {\n      onenterdata.call(this, token)\n      onexitdata.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithardbreak() {\n    setData('atHardBreak', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmlflow() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmltext() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcodetext() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlink() {\n    const node = this.stack[this.stack.length - 1]\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n    // To do: clean.\n    if (getData('inReference')) {\n      /** @type {ReferenceType} */\n      const referenceType = getData('referenceType') || 'shortcut'\n      node.type += 'Reference'\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType\n      // @ts-expect-error: mutate.\n      delete node.url\n      delete node.title\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier\n      // @ts-expect-error: mutate.\n      delete node.label\n    }\n    setData('referenceType')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitimage() {\n    const node = this.stack[this.stack.length - 1]\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n    // To do: clean.\n    if (getData('inReference')) {\n      /** @type {ReferenceType} */\n      const referenceType = getData('referenceType') || 'shortcut'\n      node.type += 'Reference'\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType\n      // @ts-expect-error: mutate.\n      delete node.url\n      delete node.title\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier\n      // @ts-expect-error: mutate.\n      delete node.label\n    }\n    setData('referenceType')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabeltext(token) {\n    const string = this.sliceSerialize(token)\n    const ancestor = this.stack[this.stack.length - 2]\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    ancestor.label = decodeString(string)\n    // @ts-expect-error: same as above.\n    ancestor.identifier = normalizeIdentifier(string).toLowerCase()\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabel() {\n    const fragment = this.stack[this.stack.length - 1]\n    const value = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    // Assume a reference.\n    setData('inReference', true)\n    if (node.type === 'link') {\n      /** @type {Array<StaticPhrasingContent>} */\n      // @ts-expect-error: Assume static phrasing content.\n      const children = fragment.children\n      node.children = children\n    } else {\n      node.alt = value\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcedestinationstring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.url = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcetitlestring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.title = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresource() {\n    setData('inReference')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterreference() {\n    setData('referenceType', 'collapsed')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitreferencestring(token) {\n    const label = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    node.label = label\n    // @ts-expect-error: same as above.\n    node.identifier = normalizeIdentifier(\n      this.sliceSerialize(token)\n    ).toLowerCase()\n    setData('referenceType', 'full')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcharacterreferencemarker(token) {\n    setData('characterReferenceType', token.type)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcharacterreferencevalue(token) {\n    const data = this.sliceSerialize(token)\n    const type = getData('characterReferenceType')\n    /** @type {string} */\n    let value\n    if (type) {\n      value = decodeNumericCharacterReference(\n        data,\n        type === 'characterReferenceMarkerNumeric' ? 10 : 16\n      )\n      setData('characterReferenceType')\n    } else {\n      const result = decodeNamedCharacterReference(data)\n      value = result\n    }\n    const tail = this.stack.pop()\n    tail.value += value\n    tail.position.end = point(token.end)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkprotocol(token) {\n    onexitdata.call(this, token)\n    const node = this.stack[this.stack.length - 1]\n    node.url = this.sliceSerialize(token)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkemail(token) {\n    onexitdata.call(this, token)\n    const node = this.stack[this.stack.length - 1]\n    node.url = 'mailto:' + this.sliceSerialize(token)\n  }\n\n  //\n  // Creaters.\n  //\n\n  /** @returns {Blockquote} */\n  function blockQuote() {\n    return {\n      type: 'blockquote',\n      children: []\n    }\n  }\n\n  /** @returns {Code} */\n  function codeFlow() {\n    return {\n      type: 'code',\n      lang: null,\n      meta: null,\n      value: ''\n    }\n  }\n\n  /** @returns {InlineCode} */\n  function codeText() {\n    return {\n      type: 'inlineCode',\n      value: ''\n    }\n  }\n\n  /** @returns {Definition} */\n  function definition() {\n    return {\n      type: 'definition',\n      identifier: '',\n      label: null,\n      title: null,\n      url: ''\n    }\n  }\n\n  /** @returns {Emphasis} */\n  function emphasis() {\n    return {\n      type: 'emphasis',\n      children: []\n    }\n  }\n\n  /** @returns {Heading} */\n  function heading() {\n    // @ts-expect-error `depth` will be set later.\n    return {\n      type: 'heading',\n      depth: undefined,\n      children: []\n    }\n  }\n\n  /** @returns {Break} */\n  function hardBreak() {\n    return {\n      type: 'break'\n    }\n  }\n\n  /** @returns {HTML} */\n  function html() {\n    return {\n      type: 'html',\n      value: ''\n    }\n  }\n\n  /** @returns {Image} */\n  function image() {\n    return {\n      type: 'image',\n      title: null,\n      url: '',\n      alt: null\n    }\n  }\n\n  /** @returns {Link} */\n  function link() {\n    return {\n      type: 'link',\n      title: null,\n      url: '',\n      children: []\n    }\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {List}\n   */\n  function list(token) {\n    return {\n      type: 'list',\n      ordered: token.type === 'listOrdered',\n      start: null,\n      spread: token._spread,\n      children: []\n    }\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {ListItem}\n   */\n  function listItem(token) {\n    return {\n      type: 'listItem',\n      spread: token._spread,\n      checked: null,\n      children: []\n    }\n  }\n\n  /** @returns {Paragraph} */\n  function paragraph() {\n    return {\n      type: 'paragraph',\n      children: []\n    }\n  }\n\n  /** @returns {Strong} */\n  function strong() {\n    return {\n      type: 'strong',\n      children: []\n    }\n  }\n\n  /** @returns {Text} */\n  function text() {\n    return {\n      type: 'text',\n      value: ''\n    }\n  }\n\n  /** @returns {ThematicBreak} */\n  function thematicBreak() {\n    return {\n      type: 'thematicBreak'\n    }\n  }\n}\n\n/**\n * Copy a point-like value.\n *\n * @param {Point} d\n *   Point-like value.\n * @returns {Point}\n *   unist point.\n */\nfunction point(d) {\n  return {\n    line: d.line,\n    column: d.column,\n    offset: d.offset\n  }\n}\n\n/**\n * @param {Config} combined\n * @param {Array<Extension | Array<Extension>>} extensions\n * @returns {void}\n */\nfunction configure(combined, extensions) {\n  let index = -1\n  while (++index < extensions.length) {\n    const value = extensions[index]\n    if (Array.isArray(value)) {\n      configure(combined, value)\n    } else {\n      extension(combined, value)\n    }\n  }\n}\n\n/**\n * @param {Config} combined\n * @param {Extension} extension\n * @returns {void}\n */\nfunction extension(combined, extension) {\n  /** @type {keyof Extension} */\n  let key\n  for (key in extension) {\n    if (own.call(extension, key)) {\n      if (key === 'canContainEols') {\n        const right = extension[key]\n        if (right) {\n          combined[key].push(...right)\n        }\n      } else if (key === 'transforms') {\n        const right = extension[key]\n        if (right) {\n          combined[key].push(...right)\n        }\n      } else if (key === 'enter' || key === 'exit') {\n        const right = extension[key]\n        if (right) {\n          Object.assign(combined[key], right)\n        }\n      }\n    }\n  }\n}\n\n/** @type {OnEnterError} */\nfunction defaultOnError(left, right) {\n  if (left) {\n    throw new Error(\n      'Cannot close `' +\n        left.type +\n        '` (' +\n        stringifyPosition({\n          start: left.start,\n          end: left.end\n        }) +\n        '): a different token (`' +\n        right.type +\n        '`, ' +\n        stringifyPosition({\n          start: right.start,\n          end: right.end\n        }) +\n        ') is open'\n    )\n  } else {\n    throw new Error(\n      'Cannot close document, a token (`' +\n        right.type +\n        '`, ' +\n        stringifyPosition({\n          start: right.start,\n          end: right.end\n        }) +\n        ') is still open'\n    )\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n */\n\nimport {subtokenize} from 'micromark-util-subtokenize'\n\n/**\n * @param {Array<Event>} events\n * @returns {Array<Event>}\n */\nexport function postprocess(events) {\n  while (!subtokenize(events)) {\n    // Empty\n  }\n  return events\n}\n","/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast-util-from-markdown').Options} Options\n */\n\nimport {fromMarkdown} from 'mdast-util-from-markdown'\n\n/**\n * @this {import('unified').Processor}\n * @type {import('unified').Plugin<[Options?] | void[], string, Root>}\n */\nexport default function remarkParse(options) {\n  /** @type {import('unified').ParserFunction<Root>} */\n  const parser = (doc) => {\n    // Assume options.\n    const settings = /** @type {Options} */ (this.data('settings'))\n\n    return fromMarkdown(\n      doc,\n      Object.assign({}, settings, options, {\n        // Note: these options are not in the readme.\n        // The goal is for them to be set by plugins on `data` instead of being\n        // passed by users.\n        extensions: this.data('micromarkExtensions') || [],\n        mdastExtensions: this.data('fromMarkdownExtensions') || []\n      })\n    )\n  }\n\n  Object.assign(this, {Parser: parser})\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\n\nimport {unicodePunctuationRegex} from './lib/unicode-punctuation-regex.js'\n\n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiAlpha = regexCheck(/[A-Za-z]/)\n\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/)\n\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/)\n\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < 32 || code === 127)\n  )\n}\n\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiDigit = regexCheck(/\\d/)\n\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/)\n\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/)\n\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEnding(code) {\n  return code !== null && code < -2\n}\n\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEndingOrSpace(code) {\n  return code !== null && (code < 0 || code === 32)\n}\n\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownSpace(code) {\n  return code === -2 || code === -1 || code === 32\n}\n\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodePunctuation = regexCheck(unicodePunctuationRegex)\n\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodeWhitespace = regexCheck(/\\s/)\n\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n * @returns {(code: Code) => boolean}\n */\nfunction regexCheck(regex) {\n  return check\n\n  /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code\n   *   Character code.\n   * @returns {boolean}\n   *   Whether the character code matches the bound regex.\n   */\n  function check(code) {\n    return code !== null && regex.test(String.fromCharCode(code))\n  }\n}\n","// This module is generated by `script/`.\n//\n// CommonMark handles attention (emphasis, strong) markers based on what comes\n// before or after them.\n// One such difference is if those characters are Unicode punctuation.\n// This script is generated from the Unicode data.\n\n/**\n * Regular expression that matches a unicode punctuation character.\n */\nexport const unicodePunctuationRegex =\n  /[!-\\/:-@\\[-`\\{-~\\xA1\\xA7\\xAB\\xB6\\xB7\\xBB\\xBF\\u037E\\u0387\\u055A-\\u055F\\u0589\\u058A\\u05BE\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0609\\u060A\\u060C\\u060D\\u061B\\u061D-\\u061F\\u066A-\\u066D\\u06D4\\u0700-\\u070D\\u07F7-\\u07F9\\u0830-\\u083E\\u085E\\u0964\\u0965\\u0970\\u09FD\\u0A76\\u0AF0\\u0C77\\u0C84\\u0DF4\\u0E4F\\u0E5A\\u0E5B\\u0F04-\\u0F12\\u0F14\\u0F3A-\\u0F3D\\u0F85\\u0FD0-\\u0FD4\\u0FD9\\u0FDA\\u104A-\\u104F\\u10FB\\u1360-\\u1368\\u1400\\u166E\\u169B\\u169C\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DA\\u1800-\\u180A\\u1944\\u1945\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B5A-\\u1B60\\u1B7D\\u1B7E\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u2010-\\u2027\\u2030-\\u2043\\u2045-\\u2051\\u2053-\\u205E\\u207D\\u207E\\u208D\\u208E\\u2308-\\u230B\\u2329\\u232A\\u2768-\\u2775\\u27C5\\u27C6\\u27E6-\\u27EF\\u2983-\\u2998\\u29D8-\\u29DB\\u29FC\\u29FD\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00-\\u2E2E\\u2E30-\\u2E4F\\u2E52-\\u2E5D\\u3001-\\u3003\\u3008-\\u3011\\u3014-\\u301F\\u3030\\u303D\\u30A0\\u30FB\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA8FC\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAADE\\uAADF\\uAAF0\\uAAF1\\uABEB\\uFD3E\\uFD3F\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE61\\uFE63\\uFE68\\uFE6A\\uFE6B\\uFF01-\\uFF03\\uFF05-\\uFF0A\\uFF0C-\\uFF0F\\uFF1A\\uFF1B\\uFF1F\\uFF20\\uFF3B-\\uFF3D\\uFF3F\\uFF5B\\uFF5D\\uFF5F-\\uFF65]/\n","import {asciiAlphanumeric} from 'micromark-util-character'\nimport {encode} from 'micromark-util-encode'\n/**\n * Make a value safe for injection as a URL.\n *\n * This encodes unsafe characters with percent-encoding and skips already\n * encoded sequences (see `normalizeUri`).\n * Further unsafe characters are encoded as character references (see\n * `micromark-util-encode`).\n *\n * A regex of allowed protocols can be given, in which case the URL is\n * sanitized.\n * For example, `/^(https?|ircs?|mailto|xmpp)$/i` can be used for `a[href]`, or\n * `/^https?$/i` for `img[src]` (this is what `github.com` allows).\n * If the URL includes an unknown protocol (one not matched by `protocol`, such\n * as a dangerous example, `javascript:`), the value is ignored.\n *\n * @param {string | undefined} url\n *   URI to sanitize.\n * @param {RegExp | null | undefined} [protocol]\n *   Allowed protocols.\n * @returns {string}\n *   Sanitized URI.\n */\nexport function sanitizeUri(url, protocol) {\n  const value = encode(normalizeUri(url || ''))\n  if (!protocol) {\n    return value\n  }\n  const colon = value.indexOf(':')\n  const questionMark = value.indexOf('?')\n  const numberSign = value.indexOf('#')\n  const slash = value.indexOf('/')\n  if (\n    // If there is no protocol, it’s relative.\n    colon < 0 ||\n    // If the first colon is after a `?`, `#`, or `/`, it’s not a protocol.\n    (slash > -1 && colon > slash) ||\n    (questionMark > -1 && colon > questionMark) ||\n    (numberSign > -1 && colon > numberSign) ||\n    // It is a protocol, it should be allowed.\n    protocol.test(value.slice(0, colon))\n  ) {\n    return value\n  }\n  return ''\n}\n\n/**\n * Normalize a URL.\n *\n * Encode unsafe characters with percent-encoding, skipping already encoded\n * sequences.\n *\n * @param {string} value\n *   URI to normalize.\n * @returns {string}\n *   Normalized URI.\n */\nexport function normalizeUri(value) {\n  /** @type {Array<string>} */\n  const result = []\n  let index = -1\n  let start = 0\n  let skip = 0\n  while (++index < value.length) {\n    const code = value.charCodeAt(index)\n    /** @type {string} */\n    let replace = ''\n\n    // A correct percent encoded value.\n    if (\n      code === 37 &&\n      asciiAlphanumeric(value.charCodeAt(index + 1)) &&\n      asciiAlphanumeric(value.charCodeAt(index + 2))\n    ) {\n      skip = 2\n    }\n    // ASCII.\n    else if (code < 128) {\n      if (!/[!#$&-;=?-Z_a-z~]/.test(String.fromCharCode(code))) {\n        replace = String.fromCharCode(code)\n      }\n    }\n    // Astral.\n    else if (code > 55295 && code < 57344) {\n      const next = value.charCodeAt(index + 1)\n\n      // A correct surrogate pair.\n      if (code < 56320 && next > 56319 && next < 57344) {\n        replace = String.fromCharCode(code, next)\n        skip = 1\n      }\n      // Lone surrogate.\n      else {\n        replace = '\\uFFFD'\n      }\n    }\n    // Unicode.\n    else {\n      replace = String.fromCharCode(code)\n    }\n    if (replace) {\n      result.push(value.slice(start, index), encodeURIComponent(replace))\n      start = index + skip + 1\n      replace = ''\n    }\n    if (skip) {\n      index += skip\n      skip = 0\n    }\n  }\n  return result.join('') + value.slice(start)\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n */\n\n/**\n * @typedef {Record<string, unknown>} Props\n * @typedef {null | undefined | string | Props | TestFunctionAnything | Array<string | Props | TestFunctionAnything>} Test\n *   Check for an arbitrary node, unaware of TypeScript inferral.\n *\n * @callback TestFunctionAnything\n *   Check if a node passes a test, unaware of TypeScript inferral.\n * @param {unknown} this\n *   The given context.\n * @param {Node} node\n *   A node.\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean | void}\n *   Whether this node passes the test.\n */\n\n/**\n * @template {Node} Kind\n *   Node type.\n * @typedef {Kind['type'] | Partial<Kind> | TestFunctionPredicate<Kind> | Array<Kind['type'] | Partial<Kind> | TestFunctionPredicate<Kind>>} PredicateTest\n *   Check for a node that can be inferred by TypeScript.\n */\n\n/**\n * Check if a node passes a certain test.\n *\n * @template {Node} Kind\n *   Node type.\n * @callback TestFunctionPredicate\n *   Complex test function for a node that can be inferred by TypeScript.\n * @param {Node} node\n *   A node.\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {node is Kind}\n *   Whether this node passes the test.\n */\n\n/**\n * @callback AssertAnything\n *   Check that an arbitrary value is a node, unaware of TypeScript inferral.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean}\n *   Whether this is a node and passes a test.\n */\n\n/**\n * Check if a node is a node and passes a certain node test.\n *\n * @template {Node} Kind\n *   Node type.\n * @callback AssertPredicate\n *   Check that an arbitrary value is a specific node, aware of TypeScript.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {node is Kind}\n *   Whether this is a node and passes a test.\n */\n\n/**\n * Check if `node` is a `Node` and whether it passes the given test.\n *\n * @param node\n *   Thing to check, typically `Node`.\n * @param test\n *   A check for a specific node.\n * @param index\n *   The node’s position in its parent.\n * @param parent\n *   The node’s parent.\n * @returns\n *   Whether `node` is a node and passes a test.\n */\nexport const is =\n  /**\n   * @type {(\n   *   (() => false) &\n   *   (<Kind extends Node = Node>(node: unknown, test: PredicateTest<Kind>, index: number, parent: Parent, context?: unknown) => node is Kind) &\n   *   (<Kind extends Node = Node>(node: unknown, test: PredicateTest<Kind>, index?: null | undefined, parent?: null | undefined, context?: unknown) => node is Kind) &\n   *   ((node: unknown, test: Test, index: number, parent: Parent, context?: unknown) => boolean) &\n   *   ((node: unknown, test?: Test, index?: null | undefined, parent?: null | undefined, context?: unknown) => boolean)\n   * )}\n   */\n  (\n    /**\n     * @param {unknown} [node]\n     * @param {Test} [test]\n     * @param {number | null | undefined} [index]\n     * @param {Parent | null | undefined} [parent]\n     * @param {unknown} [context]\n     * @returns {boolean}\n     */\n    // eslint-disable-next-line max-params\n    function is(node, test, index, parent, context) {\n      const check = convert(test)\n\n      if (\n        index !== undefined &&\n        index !== null &&\n        (typeof index !== 'number' ||\n          index < 0 ||\n          index === Number.POSITIVE_INFINITY)\n      ) {\n        throw new Error('Expected positive finite index')\n      }\n\n      if (\n        parent !== undefined &&\n        parent !== null &&\n        (!is(parent) || !parent.children)\n      ) {\n        throw new Error('Expected parent node')\n      }\n\n      if (\n        (parent === undefined || parent === null) !==\n        (index === undefined || index === null)\n      ) {\n        throw new Error('Expected both parent and index')\n      }\n\n      // @ts-expect-error Looks like a node.\n      return node && node.type && typeof node.type === 'string'\n        ? Boolean(check.call(context, node, index, parent))\n        : false\n    }\n  )\n\n/**\n * Generate an assertion from a test.\n *\n * Useful if you’re going to test many nodes, for example when creating a\n * utility where something else passes a compatible test.\n *\n * The created function is a bit faster because it expects valid input only:\n * a `node`, `index`, and `parent`.\n *\n * @param test\n *   *   when nullish, checks if `node` is a `Node`.\n *   *   when `string`, works like passing `(node) => node.type === test`.\n *   *   when `function` checks if function passed the node is true.\n *   *   when `object`, checks that all keys in test are in node, and that they have (strictly) equal values.\n *   *   when `array`, checks if any one of the subtests pass.\n * @returns\n *   An assertion.\n */\nexport const convert =\n  /**\n   * @type {(\n   *   (<Kind extends Node>(test: PredicateTest<Kind>) => AssertPredicate<Kind>) &\n   *   ((test?: Test) => AssertAnything)\n   * )}\n   */\n  (\n    /**\n     * @param {Test} [test]\n     * @returns {AssertAnything}\n     */\n    function (test) {\n      if (test === undefined || test === null) {\n        return ok\n      }\n\n      if (typeof test === 'string') {\n        return typeFactory(test)\n      }\n\n      if (typeof test === 'object') {\n        return Array.isArray(test) ? anyFactory(test) : propsFactory(test)\n      }\n\n      if (typeof test === 'function') {\n        return castFactory(test)\n      }\n\n      throw new Error('Expected function, string, or object as test')\n    }\n  )\n\n/**\n * @param {Array<string | Props | TestFunctionAnything>} tests\n * @returns {AssertAnything}\n */\nfunction anyFactory(tests) {\n  /** @type {Array<AssertAnything>} */\n  const checks = []\n  let index = -1\n\n  while (++index < tests.length) {\n    checks[index] = convert(tests[index])\n  }\n\n  return castFactory(any)\n\n  /**\n   * @this {unknown}\n   * @param {Array<unknown>} parameters\n   * @returns {boolean}\n   */\n  function any(...parameters) {\n    let index = -1\n\n    while (++index < checks.length) {\n      if (checks[index].call(this, ...parameters)) return true\n    }\n\n    return false\n  }\n}\n\n/**\n * Turn an object into a test for a node with a certain fields.\n *\n * @param {Props} check\n * @returns {AssertAnything}\n */\nfunction propsFactory(check) {\n  return castFactory(all)\n\n  /**\n   * @param {Node} node\n   * @returns {boolean}\n   */\n  function all(node) {\n    /** @type {string} */\n    let key\n\n    for (key in check) {\n      // @ts-expect-error: hush, it sure works as an index.\n      if (node[key] !== check[key]) return false\n    }\n\n    return true\n  }\n}\n\n/**\n * Turn a string into a test for a node with a certain type.\n *\n * @param {string} check\n * @returns {AssertAnything}\n */\nfunction typeFactory(check) {\n  return castFactory(type)\n\n  /**\n   * @param {Node} node\n   */\n  function type(node) {\n    return node && node.type === check\n  }\n}\n\n/**\n * Turn a custom test into a test for a node that passes that test.\n *\n * @param {TestFunctionAnything} check\n * @returns {AssertAnything}\n */\nfunction castFactory(check) {\n  return assertion\n\n  /**\n   * @this {unknown}\n   * @param {unknown} node\n   * @param {Array<unknown>} parameters\n   * @returns {boolean}\n   */\n  function assertion(node, ...parameters) {\n    return Boolean(\n      node &&\n        typeof node === 'object' &&\n        'type' in node &&\n        // @ts-expect-error: fine.\n        Boolean(check.call(this, node, ...parameters))\n    )\n  }\n}\n\nfunction ok() {\n  return true\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n * @typedef {import('unist-util-is').Test} Test\n */\n\n/**\n * @typedef {boolean | 'skip'} Action\n *   Union of the action types.\n *\n * @typedef {number} Index\n *   Move to the sibling at `index` next (after node itself is completely\n *   traversed).\n *\n *   Useful if mutating the tree, such as removing the node the visitor is\n *   currently on, or any of its previous siblings.\n *   Results less than 0 or greater than or equal to `children.length` stop\n *   traversing the parent.\n *\n * @typedef {[(Action | null | undefined | void)?, (Index | null | undefined)?]} ActionTuple\n *   List with one or two values, the first an action, the second an index.\n *\n * @typedef {Action | ActionTuple | Index | null | undefined | void} VisitorResult\n *   Any value that can be returned from a visitor.\n */\n\n/**\n * @template {Node} [Visited=Node]\n *   Visited node type.\n * @template {Parent} [Ancestor=Parent]\n *   Ancestor type.\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform the parent of node (the last of `ancestors`).\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of an ancestor still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Array<Ancestor>} ancestors\n *   Ancestors of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   Tree type.\n * @template {Test} [Check=string]\n *   Test type.\n * @typedef {Visitor<import('./complex-types.js').Matches<import('./complex-types.js').InclusiveDescendant<Tree>, Check>, Extract<import('./complex-types.js').InclusiveDescendant<Tree>, Parent>>} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parents`.\n */\n\nimport {convert} from 'unist-util-is'\nimport {color} from './color.js'\n\n/**\n * Continue traversing as normal.\n */\nexport const CONTINUE = true\n\n/**\n * Stop traversing immediately.\n */\nexport const EXIT = false\n\n/**\n * Do not traverse this node’s children.\n */\nexport const SKIP = 'skip'\n\n/**\n * Visit nodes, with ancestral information.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @param tree\n *   Tree to traverse.\n * @param test\n *   `unist-util-is`-compatible test\n * @param visitor\n *   Handle each node.\n * @param reverse\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns\n *   Nothing.\n */\nexport const visitParents =\n  /**\n   * @type {(\n   *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: BuildVisitor<Tree, Check>, reverse?: boolean | null | undefined) => void) &\n   *   (<Tree extends Node>(tree: Tree, visitor: BuildVisitor<Tree>, reverse?: boolean | null | undefined) => void)\n   * )}\n   */\n  (\n    /**\n     * @param {Node} tree\n     * @param {Test} test\n     * @param {Visitor<Node>} visitor\n     * @param {boolean | null | undefined} [reverse]\n     * @returns {void}\n     */\n    function (tree, test, visitor, reverse) {\n      if (typeof test === 'function' && typeof visitor !== 'function') {\n        reverse = visitor\n        // @ts-expect-error no visitor given, so `visitor` is test.\n        visitor = test\n        test = null\n      }\n\n      const is = convert(test)\n      const step = reverse ? -1 : 1\n\n      factory(tree, undefined, [])()\n\n      /**\n       * @param {Node} node\n       * @param {number | undefined} index\n       * @param {Array<Parent>} parents\n       */\n      function factory(node, index, parents) {\n        /** @type {Record<string, unknown>} */\n        // @ts-expect-error: hush\n        const value = node && typeof node === 'object' ? node : {}\n\n        if (typeof value.type === 'string') {\n          const name =\n            // `hast`\n            typeof value.tagName === 'string'\n              ? value.tagName\n              : // `xast`\n              typeof value.name === 'string'\n              ? value.name\n              : undefined\n\n          Object.defineProperty(visit, 'name', {\n            value:\n              'node (' + color(node.type + (name ? '<' + name + '>' : '')) + ')'\n          })\n        }\n\n        return visit\n\n        function visit() {\n          /** @type {ActionTuple} */\n          let result = []\n          /** @type {ActionTuple} */\n          let subresult\n          /** @type {number} */\n          let offset\n          /** @type {Array<Parent>} */\n          let grandparents\n\n          if (!test || is(node, index, parents[parents.length - 1] || null)) {\n            result = toResult(visitor(node, parents))\n\n            if (result[0] === EXIT) {\n              return result\n            }\n          }\n\n          // @ts-expect-error looks like a parent.\n          if (node.children && result[0] !== SKIP) {\n            // @ts-expect-error looks like a parent.\n            offset = (reverse ? node.children.length : -1) + step\n            // @ts-expect-error looks like a parent.\n            grandparents = parents.concat(node)\n\n            // @ts-expect-error looks like a parent.\n            while (offset > -1 && offset < node.children.length) {\n              // @ts-expect-error looks like a parent.\n              subresult = factory(node.children[offset], offset, grandparents)()\n\n              if (subresult[0] === EXIT) {\n                return subresult\n              }\n\n              offset =\n                typeof subresult[1] === 'number' ? subresult[1] : offset + step\n            }\n          }\n\n          return result\n        }\n      }\n    }\n  )\n\n/**\n * Turn a return value into a clean result.\n *\n * @param {VisitorResult} value\n *   Valid return values from visitors.\n * @returns {ActionTuple}\n *   Clean result.\n */\nfunction toResult(value) {\n  if (Array.isArray(value)) {\n    return value\n  }\n\n  if (typeof value === 'number') {\n    return [CONTINUE, value]\n  }\n\n  return [value]\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n * @typedef {import('unist-util-is').Test} Test\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n */\n\n/**\n * Check if `Child` can be a child of `Ancestor`.\n *\n * Returns the ancestor when `Child` can be a child of `Ancestor`, or returns\n * `never`.\n *\n * @template {Node} Ancestor\n *   Node type.\n * @template {Node} Child\n *   Node type.\n * @typedef {(\n *   Ancestor extends Parent\n *     ? Child extends Ancestor['children'][number]\n *       ? Ancestor\n *       : never\n *     : never\n * )} ParentsOf\n */\n\n/**\n * @template {Node} [Visited=Node]\n *   Visited node type.\n * @template {Parent} [Ancestor=Parent]\n *   Ancestor type.\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform `parent`.\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of `parent` still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Visited extends Node ? number | null : never} index\n *   Index of `node` in `parent`.\n * @param {Ancestor extends Node ? Ancestor | null : never} parent\n *   Parent of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n */\n\n/**\n * Build a typed `Visitor` function from a node and all possible parents.\n *\n * It will infer which values are passed as `node` and which as `parent`.\n *\n * @template {Node} Visited\n *   Node type.\n * @template {Parent} Ancestor\n *   Parent type.\n * @typedef {Visitor<Visited, ParentsOf<Ancestor, Visited>>} BuildVisitorFromMatch\n */\n\n/**\n * Build a typed `Visitor` function from a list of descendants and a test.\n *\n * It will infer which values are passed as `node` and which as `parent`.\n *\n * @template {Node} Descendant\n *   Node type.\n * @template {Test} Check\n *   Test type.\n * @typedef {(\n *   BuildVisitorFromMatch<\n *     import('unist-util-visit-parents/complex-types.js').Matches<Descendant, Check>,\n *     Extract<Descendant, Parent>\n *   >\n * )} BuildVisitorFromDescendants\n */\n\n/**\n * Build a typed `Visitor` function from a tree and a test.\n *\n * It will infer which values are passed as `node` and which as `parent`.\n *\n * @template {Node} [Tree=Node]\n *   Node type.\n * @template {Test} [Check=string]\n *   Test type.\n * @typedef {(\n *   BuildVisitorFromDescendants<\n *     import('unist-util-visit-parents/complex-types.js').InclusiveDescendant<Tree>,\n *     Check\n *   >\n * )} BuildVisitor\n */\n\nimport {visitParents} from 'unist-util-visit-parents'\n\n/**\n * Visit nodes.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @param tree\n *   Tree to traverse.\n * @param test\n *   `unist-util-is`-compatible test\n * @param visitor\n *   Handle each node.\n * @param reverse\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns\n *   Nothing.\n */\nexport const visit =\n  /**\n   * @type {(\n   *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: BuildVisitor<Tree, Check>, reverse?: boolean | null | undefined) => void) &\n   *   (<Tree extends Node>(tree: Tree, visitor: BuildVisitor<Tree>, reverse?: boolean | null | undefined) => void)\n   * )}\n   */\n  (\n    /**\n     * @param {Node} tree\n     * @param {Test} test\n     * @param {Visitor} visitor\n     * @param {boolean | null | undefined} [reverse]\n     * @returns {void}\n     */\n    function (tree, test, visitor, reverse) {\n      if (typeof test === 'function' && typeof visitor !== 'function') {\n        reverse = visitor\n        visitor = test\n        test = null\n      }\n\n      visitParents(tree, test, overload, reverse)\n\n      /**\n       * @param {Node} node\n       * @param {Array<Parent>} parents\n       */\n      function overload(node, parents) {\n        const parent = parents[parents.length - 1]\n        return visitor(\n          node,\n          parent ? parent.children.indexOf(node) : null,\n          parent\n        )\n      }\n    }\n  )\n\nexport {CONTINUE, EXIT, SKIP} from 'unist-util-visit-parents'\n","/**\n * @typedef {import('unist').Position} Position\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n */\n\n/**\n * Get the starting point of `node`.\n *\n * @param node\n *   Node.\n * @returns\n *   Point.\n */\nexport const pointStart = point('start')\n\n/**\n * Get the ending point of `node`.\n *\n * @param node\n *   Node.\n * @returns\n *   Point.\n */\nexport const pointEnd = point('end')\n\n/**\n * Get the positional info of `node`.\n *\n * @param {NodeLike | Node | null | undefined} [node]\n *   Node.\n * @returns {Position}\n *   Position.\n */\nexport function position(node) {\n  return {start: pointStart(node), end: pointEnd(node)}\n}\n\n/**\n * Get the positional info of `node`.\n *\n * @param {'start' | 'end'} type\n *   Side.\n * @returns\n *   Getter.\n */\nfunction point(type) {\n  return point\n\n  /**\n   * Get the point info of `node` at a bound side.\n   *\n   * @param {NodeLike | Node | null | undefined} [node]\n   * @returns {Point}\n   */\n  function point(node) {\n    const point = (node && node.position && node.position[type]) || {}\n\n    // To do: next major: don’t return points when invalid.\n    return {\n      // @ts-expect-error: in practice, null is allowed.\n      line: point.line || null,\n      // @ts-expect-error: in practice, null is allowed.\n      column: point.column || null,\n      // @ts-expect-error: in practice, null is allowed.\n      offset: point.offset > -1 ? point.offset : null\n    }\n  }\n}\n","/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').Definition} Definition\n */\n\n/**\n * @typedef {Root | Content} Node\n *\n * @callback GetDefinition\n *   Get a definition by identifier.\n * @param {string | null | undefined} [identifier]\n *   Identifier of definition.\n * @returns {Definition | null}\n *   Definition corresponding to `identifier` or `null`.\n */\n\nimport {visit} from 'unist-util-visit'\n\nconst own = {}.hasOwnProperty\n\n/**\n * Find definitions in `tree`.\n *\n * Uses CommonMark precedence, which means that earlier definitions are\n * preferred over duplicate later definitions.\n *\n * @param {Node} tree\n *   Tree to check.\n * @returns {GetDefinition}\n *   Getter.\n */\nexport function definitions(tree) {\n  /** @type {Record<string, Definition>} */\n  const cache = Object.create(null)\n\n  if (!tree || !tree.type) {\n    throw new Error('mdast-util-definitions expected node')\n  }\n\n  visit(tree, 'definition', (definition) => {\n    const id = clean(definition.identifier)\n    if (id && !own.call(cache, id)) {\n      cache[id] = definition\n    }\n  })\n\n  return definition\n\n  /** @type {GetDefinition} */\n  function definition(identifier) {\n    const id = clean(identifier)\n    // To do: next major: return `undefined` when not found.\n    return id && own.call(cache, id) ? cache[id] : null\n  }\n}\n\n/**\n * @param {string | null | undefined} [value]\n * @returns {string}\n */\nfunction clean(value) {\n  return String(value || '').toUpperCase()\n}\n","/**\n * @typedef {import('mdast').FootnoteReference} FootnoteReference\n * @typedef {import('hast').Element} Element\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `footnoteReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {FootnoteReference} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function footnoteReference(state, node) {\n  const id = String(node.identifier).toUpperCase()\n  const safeId = normalizeUri(id.toLowerCase())\n  const index = state.footnoteOrder.indexOf(id)\n  /** @type {number} */\n  let counter\n\n  if (index === -1) {\n    state.footnoteOrder.push(id)\n    state.footnoteCounts[id] = 1\n    counter = state.footnoteOrder.length\n  } else {\n    state.footnoteCounts[id]++\n    counter = index + 1\n  }\n\n  const reuseCounter = state.footnoteCounts[id]\n\n  /** @type {Element} */\n  const link = {\n    type: 'element',\n    tagName: 'a',\n    properties: {\n      href: '#' + state.clobberPrefix + 'fn-' + safeId,\n      id:\n        state.clobberPrefix +\n        'fnref-' +\n        safeId +\n        (reuseCounter > 1 ? '-' + reuseCounter : ''),\n      dataFootnoteRef: true,\n      ariaDescribedBy: ['footnote-label']\n    },\n    children: [{type: 'text', value: String(counter)}]\n  }\n  state.patch(node, link)\n\n  /** @type {Element} */\n  const sup = {\n    type: 'element',\n    tagName: 'sup',\n    properties: {},\n    children: [link]\n  }\n  state.patch(node, sup)\n  return state.applyData(node, sup)\n}\n","/**\n * @typedef {import('hast').ElementContent} ElementContent\n *\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').Reference} Reference\n * @typedef {import('mdast').Root} Root\n *\n * @typedef {import('./state.js').State} State\n */\n\n/**\n * @typedef {Root | Content} Nodes\n * @typedef {Extract<Nodes, Reference>} References\n */\n\n// To do: next major: always return array.\n\n/**\n * Return the content of a reference without definition as plain text.\n *\n * @param {State} state\n *   Info passed around.\n * @param {References} node\n *   Reference node (image, link).\n * @returns {ElementContent | Array<ElementContent>}\n *   hast content.\n */\nexport function revert(state, node) {\n  const subtype = node.referenceType\n  let suffix = ']'\n\n  if (subtype === 'collapsed') {\n    suffix += '[]'\n  } else if (subtype === 'full') {\n    suffix += '[' + (node.label || node.identifier) + ']'\n  }\n\n  if (node.type === 'imageReference') {\n    return {type: 'text', value: '![' + node.alt + suffix}\n  }\n\n  const contents = state.all(node)\n  const head = contents[0]\n\n  if (head && head.type === 'text') {\n    head.value = '[' + head.value\n  } else {\n    contents.unshift({type: 'text', value: '['})\n  }\n\n  const tail = contents[contents.length - 1]\n\n  if (tail && tail.type === 'text') {\n    tail.value += suffix\n  } else {\n    contents.push({type: 'text', value: suffix})\n  }\n\n  return contents\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Parent} Parent\n * @typedef {import('mdast').Root} Root\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * @typedef {Root | Content} Nodes\n * @typedef {Extract<Nodes, Parent>} Parents\n */\n\n/**\n * Turn an mdast `listItem` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ListItem} node\n *   mdast node.\n * @param {Parents | null | undefined} parent\n *   Parent of `node`.\n * @returns {Element}\n *   hast node.\n */\nexport function listItem(state, node, parent) {\n  const results = state.all(node)\n  const loose = parent ? listLoose(parent) : listItemLoose(node)\n  /** @type {Properties} */\n  const properties = {}\n  /** @type {Array<ElementContent>} */\n  const children = []\n\n  if (typeof node.checked === 'boolean') {\n    const head = results[0]\n    /** @type {Element} */\n    let paragraph\n\n    if (head && head.type === 'element' && head.tagName === 'p') {\n      paragraph = head\n    } else {\n      paragraph = {type: 'element', tagName: 'p', properties: {}, children: []}\n      results.unshift(paragraph)\n    }\n\n    if (paragraph.children.length > 0) {\n      paragraph.children.unshift({type: 'text', value: ' '})\n    }\n\n    paragraph.children.unshift({\n      type: 'element',\n      tagName: 'input',\n      properties: {type: 'checkbox', checked: node.checked, disabled: true},\n      children: []\n    })\n\n    // According to github-markdown-css, this class hides bullet.\n    // See: <https://github.com/sindresorhus/github-markdown-css>.\n    properties.className = ['task-list-item']\n  }\n\n  let index = -1\n\n  while (++index < results.length) {\n    const child = results[index]\n\n    // Add eols before nodes, except if this is a loose, first paragraph.\n    if (\n      loose ||\n      index !== 0 ||\n      child.type !== 'element' ||\n      child.tagName !== 'p'\n    ) {\n      children.push({type: 'text', value: '\\n'})\n    }\n\n    if (child.type === 'element' && child.tagName === 'p' && !loose) {\n      children.push(...child.children)\n    } else {\n      children.push(child)\n    }\n  }\n\n  const tail = results[results.length - 1]\n\n  // Add a final eol.\n  if (tail && (loose || tail.type !== 'element' || tail.tagName !== 'p')) {\n    children.push({type: 'text', value: '\\n'})\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'li', properties, children}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n\n/**\n * @param {Parents} node\n * @return {Boolean}\n */\nfunction listLoose(node) {\n  let loose = false\n  if (node.type === 'list') {\n    loose = node.spread || false\n    const children = node.children\n    let index = -1\n\n    while (!loose && ++index < children.length) {\n      loose = listItemLoose(children[index])\n    }\n  }\n\n  return loose\n}\n\n/**\n * @param {ListItem} node\n * @return {Boolean}\n */\nfunction listItemLoose(node) {\n  const spread = node.spread\n\n  return spread === undefined || spread === null\n    ? node.children.length > 1\n    : spread\n}\n","const tab = 9 /* `\\t` */\nconst space = 32 /* ` ` */\n\n/**\n * Remove initial and final spaces and tabs at the line breaks in `value`.\n * Does not trim initial and final spaces and tabs of the value itself.\n *\n * @param {string} value\n *   Value to trim.\n * @returns {string}\n *   Trimmed value.\n */\nexport function trimLines(value) {\n  const source = String(value)\n  const search = /\\r?\\n|\\r/g\n  let match = search.exec(source)\n  let last = 0\n  /** @type {Array<string>} */\n  const lines = []\n\n  while (match) {\n    lines.push(\n      trimLine(source.slice(last, match.index), last > 0, true),\n      match[0]\n    )\n\n    last = match.index + match[0].length\n    match = search.exec(source)\n  }\n\n  lines.push(trimLine(source.slice(last), last > 0, false))\n\n  return lines.join('')\n}\n\n/**\n * @param {string} value\n *   Line to trim.\n * @param {boolean} start\n *   Whether to trim the start of the line.\n * @param {boolean} end\n *   Whether to trim the end of the line.\n * @returns {string}\n *   Trimmed line.\n */\nfunction trimLine(value, start, end) {\n  let startIndex = 0\n  let endIndex = value.length\n\n  if (start) {\n    let code = value.codePointAt(startIndex)\n\n    while (code === tab || code === space) {\n      startIndex++\n      code = value.codePointAt(startIndex)\n    }\n  }\n\n  if (end) {\n    let code = value.codePointAt(endIndex - 1)\n\n    while (code === tab || code === space) {\n      endIndex--\n      code = value.codePointAt(endIndex - 1)\n    }\n  }\n\n  return endIndex > startIndex ? value.slice(startIndex, endIndex) : ''\n}\n","import {blockquote} from './blockquote.js'\nimport {hardBreak} from './break.js'\nimport {code} from './code.js'\nimport {strikethrough} from './delete.js'\nimport {emphasis} from './emphasis.js'\nimport {footnoteReference} from './footnote-reference.js'\nimport {footnote} from './footnote.js'\nimport {heading} from './heading.js'\nimport {html} from './html.js'\nimport {imageReference} from './image-reference.js'\nimport {image} from './image.js'\nimport {inlineCode} from './inline-code.js'\nimport {linkReference} from './link-reference.js'\nimport {link} from './link.js'\nimport {listItem} from './list-item.js'\nimport {list} from './list.js'\nimport {paragraph} from './paragraph.js'\nimport {root} from './root.js'\nimport {strong} from './strong.js'\nimport {table} from './table.js'\nimport {tableRow} from './table-row.js'\nimport {tableCell} from './table-cell.js'\nimport {text} from './text.js'\nimport {thematicBreak} from './thematic-break.js'\n\n/**\n * Default handlers for nodes.\n */\nexport const handlers = {\n  blockquote,\n  break: hardBreak,\n  code,\n  delete: strikethrough,\n  emphasis,\n  footnoteReference,\n  footnote,\n  heading,\n  html,\n  imageReference,\n  image,\n  inlineCode,\n  linkReference,\n  link,\n  listItem,\n  list,\n  paragraph,\n  root,\n  strong,\n  table,\n  tableCell,\n  tableRow,\n  text,\n  thematicBreak,\n  toml: ignore,\n  yaml: ignore,\n  definition: ignore,\n  footnoteDefinition: ignore\n}\n\n// Return nothing for nodes that are ignored.\nfunction ignore() {\n  // To do: next major: return `undefined`.\n  return null\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `blockquote` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Blockquote} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function blockquote(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'blockquote',\n    properties: {},\n    children: state.wrap(state.all(node), true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Text} Text\n * @typedef {import('mdast').Break} Break\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `break` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Break} node\n *   mdast node.\n * @returns {Array<Element | Text>}\n *   hast element content.\n */\nexport function hardBreak(state, node) {\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'br', properties: {}, children: []}\n  state.patch(node, result)\n  return [state.applyData(node, result), {type: 'text', value: '\\n'}]\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Code} Code\n * @typedef {import('../state.js').State} State\n\n */\n\n/**\n * Turn an mdast `code` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Code} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function code(state, node) {\n  const value = node.value ? node.value + '\\n' : ''\n  // To do: next major, use `node.lang` w/o regex, the splitting’s been going\n  // on for years in remark now.\n  const lang = node.lang ? node.lang.match(/^[^ \\t]+(?=[ \\t]|$)/) : null\n  /** @type {Properties} */\n  const properties = {}\n\n  if (lang) {\n    properties.className = ['language-' + lang]\n  }\n\n  // Create `<code>`.\n  /** @type {Element} */\n  let result = {\n    type: 'element',\n    tagName: 'code',\n    properties,\n    children: [{type: 'text', value}]\n  }\n\n  if (node.meta) {\n    result.data = {meta: node.meta}\n  }\n\n  state.patch(node, result)\n  result = state.applyData(node, result)\n\n  // Create `<pre>`.\n  result = {type: 'element', tagName: 'pre', properties: {}, children: [result]}\n  state.patch(node, result)\n  return result\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Delete} Delete\n * @typedef {import('../state.js').State} State\n\n */\n\n/**\n * Turn an mdast `delete` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Delete} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function strikethrough(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'del',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `emphasis` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Emphasis} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function emphasis(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'em',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Footnote} Footnote\n * @typedef {import('../state.js').State} State\n */\n\nimport {footnoteReference} from './footnote-reference.js'\n\n// To do: when both:\n// * <https://github.com/micromark/micromark-extension-footnote>\n// * <https://github.com/syntax-tree/mdast-util-footnote>\n// …are archived, remove this (also from mdast).\n// These inline notes are not used in GFM.\n\n/**\n * Turn an mdast `footnote` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Footnote} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function footnote(state, node) {\n  const footnoteById = state.footnoteById\n  let no = 1\n\n  while (no in footnoteById) no++\n\n  const identifier = String(no)\n\n  footnoteById[identifier] = {\n    type: 'footnoteDefinition',\n    identifier,\n    children: [{type: 'paragraph', children: node.children}],\n    position: node.position\n  }\n\n  return footnoteReference(state, {\n    type: 'footnoteReference',\n    identifier,\n    position: node.position\n  })\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `heading` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Heading} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function heading(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'h' + node.depth,\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').HTML} Html\n * @typedef {import('../state.js').State} State\n * @typedef {import('../../index.js').Raw} Raw\n */\n\n/**\n * Turn an mdast `html` node into hast (`raw` node in dangerous mode, otherwise\n * nothing).\n *\n * @param {State} state\n *   Info passed around.\n * @param {Html} node\n *   mdast node.\n * @returns {Raw | Element | null}\n *   hast node.\n */\nexport function html(state, node) {\n  if (state.dangerous) {\n    /** @type {Raw} */\n    const result = {type: 'raw', value: node.value}\n    state.patch(node, result)\n    return state.applyData(node, result)\n  }\n\n  // To do: next major: return `undefined`.\n  return null\n}\n","/**\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\nimport {revert} from '../revert.js'\n\n/**\n * Turn an mdast `imageReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ImageReference} node\n *   mdast node.\n * @returns {ElementContent | Array<ElementContent>}\n *   hast node.\n */\nexport function imageReference(state, node) {\n  const def = state.definition(node.identifier)\n\n  if (!def) {\n    return revert(state, node)\n  }\n\n  /** @type {Properties} */\n  const properties = {src: normalizeUri(def.url || ''), alt: node.alt}\n\n  if (def.title !== null && def.title !== undefined) {\n    properties.title = def.title\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'img', properties, children: []}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Image} Image\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `image` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Image} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function image(state, node) {\n  /** @type {Properties} */\n  const properties = {src: normalizeUri(node.url)}\n\n  if (node.alt !== null && node.alt !== undefined) {\n    properties.alt = node.alt\n  }\n\n  if (node.title !== null && node.title !== undefined) {\n    properties.title = node.title\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'img', properties, children: []}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Text} Text\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `inlineCode` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {InlineCode} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function inlineCode(state, node) {\n  /** @type {Text} */\n  const text = {type: 'text', value: node.value.replace(/\\r?\\n|\\r/g, ' ')}\n  state.patch(node, text)\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'code',\n    properties: {},\n    children: [text]\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\nimport {revert} from '../revert.js'\n\n/**\n * Turn an mdast `linkReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {LinkReference} node\n *   mdast node.\n * @returns {ElementContent | Array<ElementContent>}\n *   hast node.\n */\nexport function linkReference(state, node) {\n  const def = state.definition(node.identifier)\n\n  if (!def) {\n    return revert(state, node)\n  }\n\n  /** @type {Properties} */\n  const properties = {href: normalizeUri(def.url || '')}\n\n  if (def.title !== null && def.title !== undefined) {\n    properties.title = def.title\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'a',\n    properties,\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Link} Link\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `link` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Link} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function link(state, node) {\n  /** @type {Properties} */\n  const properties = {href: normalizeUri(node.url)}\n\n  if (node.title !== null && node.title !== undefined) {\n    properties.title = node.title\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'a',\n    properties,\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').List} List\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `list` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {List} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function list(state, node) {\n  /** @type {Properties} */\n  const properties = {}\n  const results = state.all(node)\n  let index = -1\n\n  if (typeof node.start === 'number' && node.start !== 1) {\n    properties.start = node.start\n  }\n\n  // Like GitHub, add a class for custom styling.\n  while (++index < results.length) {\n    const child = results[index]\n\n    if (\n      child.type === 'element' &&\n      child.tagName === 'li' &&\n      child.properties &&\n      Array.isArray(child.properties.className) &&\n      child.properties.className.includes('task-list-item')\n    ) {\n      properties.className = ['contains-task-list']\n      break\n    }\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: node.ordered ? 'ol' : 'ul',\n    properties,\n    children: state.wrap(results, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `paragraph` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Paragraph} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function paragraph(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'p',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('mdast').Root} MdastRoot\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `root` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastRoot} node\n *   mdast node.\n * @returns {HastRoot | HastElement}\n *   hast node.\n */\nexport function root(state, node) {\n  /** @type {HastRoot} */\n  const result = {type: 'root', children: state.wrap(state.all(node))}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `strong` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Strong} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function strong(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'strong',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Table} Table\n * @typedef {import('../state.js').State} State\n */\n\nimport {pointStart, pointEnd} from 'unist-util-position'\n\n/**\n * Turn an mdast `table` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Table} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function table(state, node) {\n  const rows = state.all(node)\n  const firstRow = rows.shift()\n  /** @type {Array<Element>} */\n  const tableContent = []\n\n  if (firstRow) {\n    /** @type {Element} */\n    const head = {\n      type: 'element',\n      tagName: 'thead',\n      properties: {},\n      children: state.wrap([firstRow], true)\n    }\n    state.patch(node.children[0], head)\n    tableContent.push(head)\n  }\n\n  if (rows.length > 0) {\n    /** @type {Element} */\n    const body = {\n      type: 'element',\n      tagName: 'tbody',\n      properties: {},\n      children: state.wrap(rows, true)\n    }\n\n    const start = pointStart(node.children[1])\n    const end = pointEnd(node.children[node.children.length - 1])\n    if (start.line && end.line) body.position = {start, end}\n    tableContent.push(body)\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'table',\n    properties: {},\n    children: state.wrap(tableContent, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').TableCell} TableCell\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `tableCell` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {TableCell} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function tableCell(state, node) {\n  // Note: this function is normally not called: see `table-row` for how rows\n  // and their cells are compiled.\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'td', // Assume body cell.\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').Parent} Parent\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').TableRow} TableRow\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * @typedef {Root | Content} Nodes\n * @typedef {Extract<Nodes, Parent>} Parents\n */\n\n/**\n * Turn an mdast `tableRow` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {TableRow} node\n *   mdast node.\n * @param {Parents | null | undefined} parent\n *   Parent of `node`.\n * @returns {Element}\n *   hast node.\n */\nexport function tableRow(state, node, parent) {\n  const siblings = parent ? parent.children : undefined\n  // Generate a body row when without parent.\n  const rowIndex = siblings ? siblings.indexOf(node) : 1\n  const tagName = rowIndex === 0 ? 'th' : 'td'\n  const align = parent && parent.type === 'table' ? parent.align : undefined\n  const length = align ? align.length : node.children.length\n  let cellIndex = -1\n  /** @type {Array<ElementContent>} */\n  const cells = []\n\n  while (++cellIndex < length) {\n    // Note: can also be undefined.\n    const cell = node.children[cellIndex]\n    /** @type {Properties} */\n    const properties = {}\n    const alignValue = align ? align[cellIndex] : undefined\n\n    if (alignValue) {\n      properties.align = alignValue\n    }\n\n    /** @type {Element} */\n    let result = {type: 'element', tagName, properties, children: []}\n\n    if (cell) {\n      result.children = state.all(cell)\n      state.patch(cell, result)\n      result = state.applyData(node, result)\n    }\n\n    cells.push(result)\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'tr',\n    properties: {},\n    children: state.wrap(cells, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('hast').Text} HastText\n * @typedef {import('mdast').Text} MdastText\n * @typedef {import('../state.js').State} State\n */\n\nimport {trimLines} from 'trim-lines'\n\n/**\n * Turn an mdast `text` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastText} node\n *   mdast node.\n * @returns {HastText | HastElement}\n *   hast node.\n */\nexport function text(state, node) {\n  /** @type {HastText} */\n  const result = {type: 'text', value: trimLines(String(node.value))}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `thematicBreak` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ThematicBreak} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function thematicBreak(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'hr',\n    properties: {},\n    children: []\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Content} HastContent\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('hast').ElementContent} HastElementContent\n * @typedef {import('hast').Properties} HastProperties\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('hast').Text} HastText\n *\n * @typedef {import('mdast').Content} MdastContent\n * @typedef {import('mdast').Definition} MdastDefinition\n * @typedef {import('mdast').FootnoteDefinition} MdastFootnoteDefinition\n * @typedef {import('mdast').Parent} MdastParent\n * @typedef {import('mdast').Root} MdastRoot\n */\n\n/**\n * @typedef {HastRoot | HastContent} HastNodes\n * @typedef {MdastRoot | MdastContent} MdastNodes\n * @typedef {Extract<MdastNodes, MdastParent>} MdastParents\n *\n * @typedef EmbeddedHastFields\n *   hast fields.\n * @property {string | null | undefined} [hName]\n *   Generate a specific element with this tag name instead.\n * @property {HastProperties | null | undefined} [hProperties]\n *   Generate an element with these properties instead.\n * @property {Array<HastElementContent> | null | undefined} [hChildren]\n *   Generate an element with this content instead.\n *\n * @typedef {Record<string, unknown> & EmbeddedHastFields} MdastData\n *   mdast data with embedded hast fields.\n *\n * @typedef {MdastNodes & {data?: MdastData | null | undefined}} MdastNodeWithData\n *   mdast node with embedded hast data.\n *\n * @typedef PointLike\n *   Point-like value.\n * @property {number | null | undefined} [line]\n *   Line.\n * @property {number | null | undefined} [column]\n *   Column.\n * @property {number | null | undefined} [offset]\n *   Offset.\n *\n * @typedef PositionLike\n *   Position-like value.\n * @property {PointLike | null | undefined} [start]\n *   Point-like value.\n * @property {PointLike | null | undefined} [end]\n *   Point-like value.\n *\n * @callback Handler\n *   Handle a node.\n * @param {State} state\n *   Info passed around.\n * @param {any} node\n *   mdast node to handle.\n * @param {MdastParents | null | undefined} parent\n *   Parent of `node`.\n * @returns {HastElementContent | Array<HastElementContent> | null | undefined}\n *   hast node.\n *\n * @callback HFunctionProps\n *   Signature of `state` for when props are passed.\n * @param {MdastNodes | PositionLike | null | undefined} node\n *   mdast node or unist position.\n * @param {string} tagName\n *   HTML tag name.\n * @param {HastProperties} props\n *   Properties.\n * @param {Array<HastElementContent> | null | undefined} [children]\n *   hast content.\n * @returns {HastElement}\n *   Compiled element.\n *\n * @callback HFunctionNoProps\n *   Signature of `state` for when no props are passed.\n * @param {MdastNodes | PositionLike | null | undefined} node\n *   mdast node or unist position.\n * @param {string} tagName\n *   HTML tag name.\n * @param {Array<HastElementContent> | null | undefined} [children]\n *   hast content.\n * @returns {HastElement}\n *   Compiled element.\n *\n * @typedef HFields\n *   Info on `state`.\n * @property {boolean} dangerous\n *   Whether HTML is allowed.\n * @property {string} clobberPrefix\n *   Prefix to use to prevent DOM clobbering.\n * @property {string} footnoteLabel\n *   Label to use to introduce the footnote section.\n * @property {string} footnoteLabelTagName\n *   HTML used for the footnote label.\n * @property {HastProperties} footnoteLabelProperties\n *   Properties on the HTML tag used for the footnote label.\n * @property {string} footnoteBackLabel\n *   Label to use from backreferences back to their footnote call.\n * @property {(identifier: string) => MdastDefinition | null} definition\n *   Definition cache.\n * @property {Record<string, MdastFootnoteDefinition>} footnoteById\n *   Footnote definitions by their identifier.\n * @property {Array<string>} footnoteOrder\n *   Identifiers of order when footnote calls first appear in tree order.\n * @property {Record<string, number>} footnoteCounts\n *   Counts for how often the same footnote was called.\n * @property {Handlers} handlers\n *   Applied handlers.\n * @property {Handler} unknownHandler\n *   Handler for any none not in `passThrough` or otherwise handled.\n * @property {(from: MdastNodes, node: HastNodes) => void} patch\n *   Copy a node’s positional info.\n * @property {<Type extends HastNodes>(from: MdastNodes, to: Type) => Type | HastElement} applyData\n *   Honor the `data` of `from`, and generate an element instead of `node`.\n * @property {(node: MdastNodes, parent: MdastParents | null | undefined) => HastElementContent | Array<HastElementContent> | null | undefined} one\n *   Transform an mdast node to hast.\n * @property {(node: MdastNodes) => Array<HastElementContent>} all\n *   Transform the children of an mdast parent to hast.\n * @property {<Type extends HastContent>(nodes: Array<Type>, loose?: boolean | null | undefined) => Array<Type | HastText>} wrap\n *   Wrap `nodes` with line endings between each node, adds initial/final line endings when `loose`.\n * @property {(left: MdastNodeWithData | PositionLike | null | undefined, right: HastElementContent) => HastElementContent} augment\n *   Like `state` but lower-level and usable on non-elements.\n *   Deprecated: use `patch` and `applyData`.\n * @property {Array<string>} passThrough\n *   List of node types to pass through untouched (except for their children).\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [allowDangerousHtml=false]\n *   Whether to persist raw HTML in markdown in the hast tree.\n * @property {string | null | undefined} [clobberPrefix='user-content-']\n *   Prefix to use before the `id` attribute on footnotes to prevent it from\n *   *clobbering*.\n * @property {string | null | undefined} [footnoteBackLabel='Back to content']\n *   Label to use from backreferences back to their footnote call (affects\n *   screen readers).\n * @property {string | null | undefined} [footnoteLabel='Footnotes']\n *   Label to use for the footnotes section (affects screen readers).\n * @property {HastProperties | null | undefined} [footnoteLabelProperties={className: ['sr-only']}]\n *   Properties to use on the footnote label (note that `id: 'footnote-label'`\n *   is always added as footnote calls use it with `aria-describedby` to\n *   provide an accessible label).\n * @property {string | null | undefined} [footnoteLabelTagName='h2']\n *   Tag name to use for the footnote label.\n * @property {Handlers | null | undefined} [handlers]\n *   Extra handlers for nodes.\n * @property {Array<string> | null | undefined} [passThrough]\n *   List of custom mdast node types to pass through (keep) in hast (note that\n *   the node itself is passed, but eventual children are transformed).\n * @property {Handler | null | undefined} [unknownHandler]\n *   Handler for all unknown nodes.\n *\n * @typedef {Record<string, Handler>} Handlers\n *   Handle nodes.\n *\n * @typedef {HFunctionProps & HFunctionNoProps & HFields} State\n *   Info passed around.\n */\n\nimport {visit} from 'unist-util-visit'\nimport {position, pointStart, pointEnd} from 'unist-util-position'\nimport {generated} from 'unist-util-generated'\nimport {definitions} from 'mdast-util-definitions'\nimport {handlers} from './handlers/index.js'\n\nconst own = {}.hasOwnProperty\n\n/**\n * Create `state` from an mdast tree.\n *\n * @param {MdastNodes} tree\n *   mdast node to transform.\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {State}\n *   `state` function.\n */\nexport function createState(tree, options) {\n  const settings = options || {}\n  const dangerous = settings.allowDangerousHtml || false\n  /** @type {Record<string, MdastFootnoteDefinition>} */\n  const footnoteById = {}\n\n  // To do: next major: add `options` to state, remove:\n  // `dangerous`, `clobberPrefix`, `footnoteLabel`, `footnoteLabelTagName`,\n  // `footnoteLabelProperties`, `footnoteBackLabel`, `passThrough`,\n  // `unknownHandler`.\n\n  // To do: next major: move to `state.options.allowDangerousHtml`.\n  state.dangerous = dangerous\n  // To do: next major: move to `state.options`.\n  state.clobberPrefix =\n    settings.clobberPrefix === undefined || settings.clobberPrefix === null\n      ? 'user-content-'\n      : settings.clobberPrefix\n  // To do: next major: move to `state.options`.\n  state.footnoteLabel = settings.footnoteLabel || 'Footnotes'\n  // To do: next major: move to `state.options`.\n  state.footnoteLabelTagName = settings.footnoteLabelTagName || 'h2'\n  // To do: next major: move to `state.options`.\n  state.footnoteLabelProperties = settings.footnoteLabelProperties || {\n    className: ['sr-only']\n  }\n  // To do: next major: move to `state.options`.\n  state.footnoteBackLabel = settings.footnoteBackLabel || 'Back to content'\n  // To do: next major: move to `state.options`.\n  state.unknownHandler = settings.unknownHandler\n  // To do: next major: move to `state.options`.\n  state.passThrough = settings.passThrough\n\n  state.handlers = {...handlers, ...settings.handlers}\n\n  // To do: next major: replace utility with `definitionById` object, so we\n  // only walk once (as we need footnotes too).\n  state.definition = definitions(tree)\n  state.footnoteById = footnoteById\n  /** @type {Array<string>} */\n  state.footnoteOrder = []\n  /** @type {Record<string, number>} */\n  state.footnoteCounts = {}\n\n  state.patch = patch\n  state.applyData = applyData\n  state.one = oneBound\n  state.all = allBound\n  state.wrap = wrap\n  // To do: next major: remove `augment`.\n  state.augment = augment\n\n  visit(tree, 'footnoteDefinition', (definition) => {\n    const id = String(definition.identifier).toUpperCase()\n\n    // Mimick CM behavior of link definitions.\n    // See: <https://github.com/syntax-tree/mdast-util-definitions/blob/8290999/index.js#L26>.\n    if (!own.call(footnoteById, id)) {\n      footnoteById[id] = definition\n    }\n  })\n\n  // @ts-expect-error Hush, it’s fine!\n  return state\n\n  /**\n   * Finalise the created `right`, a hast node, from `left`, an mdast node.\n   *\n   * @param {MdastNodeWithData | PositionLike | null | undefined} left\n   * @param {HastElementContent} right\n   * @returns {HastElementContent}\n   */\n  /* c8 ignore start */\n  // To do: next major: remove.\n  function augment(left, right) {\n    // Handle `data.hName`, `data.hProperties, `data.hChildren`.\n    if (left && 'data' in left && left.data) {\n      /** @type {MdastData} */\n      const data = left.data\n\n      if (data.hName) {\n        if (right.type !== 'element') {\n          right = {\n            type: 'element',\n            tagName: '',\n            properties: {},\n            children: []\n          }\n        }\n\n        right.tagName = data.hName\n      }\n\n      if (right.type === 'element' && data.hProperties) {\n        right.properties = {...right.properties, ...data.hProperties}\n      }\n\n      if ('children' in right && right.children && data.hChildren) {\n        right.children = data.hChildren\n      }\n    }\n\n    if (left) {\n      const ctx = 'type' in left ? left : {position: left}\n\n      if (!generated(ctx)) {\n        // @ts-expect-error: fine.\n        right.position = {start: pointStart(ctx), end: pointEnd(ctx)}\n      }\n    }\n\n    return right\n  }\n  /* c8 ignore stop */\n\n  /**\n   * Create an element for `node`.\n   *\n   * @type {HFunctionProps}\n   */\n  /* c8 ignore start */\n  // To do: next major: remove.\n  function state(node, tagName, props, children) {\n    if (Array.isArray(props)) {\n      children = props\n      props = {}\n    }\n\n    // @ts-expect-error augmenting an element yields an element.\n    return augment(node, {\n      type: 'element',\n      tagName,\n      properties: props || {},\n      children: children || []\n    })\n  }\n  /* c8 ignore stop */\n\n  /**\n   * Transform an mdast node into a hast node.\n   *\n   * @param {MdastNodes} node\n   *   mdast node.\n   * @param {MdastParents | null | undefined} [parent]\n   *   Parent of `node`.\n   * @returns {HastElementContent | Array<HastElementContent> | null | undefined}\n   *   Resulting hast node.\n   */\n  function oneBound(node, parent) {\n    // @ts-expect-error: that’s a state :)\n    return one(state, node, parent)\n  }\n\n  /**\n   * Transform the children of an mdast node into hast nodes.\n   *\n   * @param {MdastNodes} parent\n   *   mdast node to compile\n   * @returns {Array<HastElementContent>}\n   *   Resulting hast nodes.\n   */\n  function allBound(parent) {\n    // @ts-expect-error: that’s a state :)\n    return all(state, parent)\n  }\n}\n\n/**\n * Copy a node’s positional info.\n *\n * @param {MdastNodes} from\n *   mdast node to copy from.\n * @param {HastNodes} to\n *   hast node to copy into.\n * @returns {void}\n *   Nothing.\n */\nfunction patch(from, to) {\n  if (from.position) to.position = position(from)\n}\n\n/**\n * Honor the `data` of `from` and maybe generate an element instead of `to`.\n *\n * @template {HastNodes} Type\n *   Node type.\n * @param {MdastNodes} from\n *   mdast node to use data from.\n * @param {Type} to\n *   hast node to change.\n * @returns {Type | HastElement}\n *   Nothing.\n */\nfunction applyData(from, to) {\n  /** @type {Type | HastElement} */\n  let result = to\n\n  // Handle `data.hName`, `data.hProperties, `data.hChildren`.\n  if (from && from.data) {\n    const hName = from.data.hName\n    const hChildren = from.data.hChildren\n    const hProperties = from.data.hProperties\n\n    if (typeof hName === 'string') {\n      // Transforming the node resulted in an element with a different name\n      // than wanted:\n      if (result.type === 'element') {\n        result.tagName = hName\n      }\n      // Transforming the node resulted in a non-element, which happens for\n      // raw, text, and root nodes (unless custom handlers are passed).\n      // The intent is likely to keep the content around (otherwise: pass\n      // `hChildren`).\n      else {\n        result = {\n          type: 'element',\n          tagName: hName,\n          properties: {},\n          children: []\n        }\n\n        // To do: next major: take the children from the `root`, or inject the\n        // raw/text/comment or so into the element?\n        // if ('children' in node) {\n        //   // @ts-expect-error: assume `children` are allowed in elements.\n        //   result.children = node.children\n        // } else {\n        //   // @ts-expect-error: assume `node` is allowed in elements.\n        //   result.children.push(node)\n        // }\n      }\n    }\n\n    if (result.type === 'element' && hProperties) {\n      result.properties = {...result.properties, ...hProperties}\n    }\n\n    if (\n      'children' in result &&\n      result.children &&\n      hChildren !== null &&\n      hChildren !== undefined\n    ) {\n      // @ts-expect-error: assume valid children are defined.\n      result.children = hChildren\n    }\n  }\n\n  return result\n}\n\n/**\n * Transform an mdast node into a hast node.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastNodes} node\n *   mdast node.\n * @param {MdastParents | null | undefined} [parent]\n *   Parent of `node`.\n * @returns {HastElementContent | Array<HastElementContent> | null | undefined}\n *   Resulting hast node.\n */\n// To do: next major: do not expose, keep bound.\nexport function one(state, node, parent) {\n  const type = node && node.type\n\n  // Fail on non-nodes.\n  if (!type) {\n    throw new Error('Expected node, got `' + node + '`')\n  }\n\n  if (own.call(state.handlers, type)) {\n    return state.handlers[type](state, node, parent)\n  }\n\n  if (state.passThrough && state.passThrough.includes(type)) {\n    // To do: next major: deep clone.\n    // @ts-expect-error: types of passed through nodes are expected to be added manually.\n    return 'children' in node ? {...node, children: all(state, node)} : node\n  }\n\n  if (state.unknownHandler) {\n    return state.unknownHandler(state, node, parent)\n  }\n\n  return defaultUnknownHandler(state, node)\n}\n\n/**\n * Transform the children of an mdast node into hast nodes.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastNodes} parent\n *   mdast node to compile\n * @returns {Array<HastElementContent>}\n *   Resulting hast nodes.\n */\n// To do: next major: do not expose, keep bound.\nexport function all(state, parent) {\n  /** @type {Array<HastElementContent>} */\n  const values = []\n\n  if ('children' in parent) {\n    const nodes = parent.children\n    let index = -1\n    while (++index < nodes.length) {\n      const result = one(state, nodes[index], parent)\n\n      // To do: see if we van clean this? Can we merge texts?\n      if (result) {\n        if (index && nodes[index - 1].type === 'break') {\n          if (!Array.isArray(result) && result.type === 'text') {\n            result.value = result.value.replace(/^\\s+/, '')\n          }\n\n          if (!Array.isArray(result) && result.type === 'element') {\n            const head = result.children[0]\n\n            if (head && head.type === 'text') {\n              head.value = head.value.replace(/^\\s+/, '')\n            }\n          }\n        }\n\n        if (Array.isArray(result)) {\n          values.push(...result)\n        } else {\n          values.push(result)\n        }\n      }\n    }\n  }\n\n  return values\n}\n\n/**\n * Transform an unknown node.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastNodes} node\n *   Unknown mdast node.\n * @returns {HastText | HastElement}\n *   Resulting hast node.\n */\nfunction defaultUnknownHandler(state, node) {\n  const data = node.data || {}\n  /** @type {HastText | HastElement} */\n  const result =\n    'value' in node &&\n    !(own.call(data, 'hProperties') || own.call(data, 'hChildren'))\n      ? {type: 'text', value: node.value}\n      : {\n          type: 'element',\n          tagName: 'div',\n          properties: {},\n          children: all(state, node)\n        }\n\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n\n/**\n * Wrap `nodes` with line endings between each node.\n *\n * @template {HastContent} Type\n *   Node type.\n * @param {Array<Type>} nodes\n *   List of nodes to wrap.\n * @param {boolean | null | undefined} [loose=false]\n *   Whether to add line endings at start and end.\n * @returns {Array<Type | HastText>}\n *   Wrapped nodes.\n */\nexport function wrap(nodes, loose) {\n  /** @type {Array<Type | HastText>} */\n  const result = []\n  let index = -1\n\n  if (loose) {\n    result.push({type: 'text', value: '\\n'})\n  }\n\n  while (++index < nodes.length) {\n    if (index) result.push({type: 'text', value: '\\n'})\n    result.push(nodes[index])\n  }\n\n  if (loose && nodes.length > 0) {\n    result.push({type: 'text', value: '\\n'})\n  }\n\n  return result\n}\n","/**\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef NodeLike\n * @property {PositionLike | null | undefined} [position]\n */\n\n/**\n * Check if `node` is generated.\n *\n * @param {NodeLike | null | undefined} [node]\n *   Node to check.\n * @returns {boolean}\n *   Whether `node` is generated (does not have positional info).\n */\nexport function generated(node) {\n  return (\n    !node ||\n    !node.position ||\n    !node.position.start ||\n    !node.position.start.line ||\n    !node.position.start.column ||\n    !node.position.end ||\n    !node.position.end.line ||\n    !node.position.end.column\n  )\n}\n","/**\n * @typedef {import('hast').Content} HastContent\n * @typedef {import('hast').Root} HastRoot\n *\n * @typedef {import('mdast').Content} MdastContent\n * @typedef {import('mdast').Root} MdastRoot\n *\n * @typedef {import('./state.js').Options} Options\n */\n\n/**\n * @typedef {HastRoot | HastContent} HastNodes\n * @typedef {MdastRoot | MdastContent} MdastNodes\n */\n\nimport {footer} from './footer.js'\nimport {createState} from './state.js'\n\n/**\n * Transform mdast to hast.\n *\n * ##### Notes\n *\n * ###### HTML\n *\n * Raw HTML is available in mdast as `html` nodes and can be embedded in hast\n * as semistandard `raw` nodes.\n * Most utilities ignore `raw` nodes but two notable ones don’t:\n *\n * *   `hast-util-to-html` also has an option `allowDangerousHtml` which will\n *     output the raw HTML.\n *     This is typically discouraged as noted by the option name but is useful\n *     if you completely trust authors\n * *   `hast-util-raw` can handle the raw embedded HTML strings by parsing them\n *     into standard hast nodes (`element`, `text`, etc).\n *     This is a heavy task as it needs a full HTML parser, but it is the only\n *     way to support untrusted content\n *\n * ###### Footnotes\n *\n * Many options supported here relate to footnotes.\n * Footnotes are not specified by CommonMark, which we follow by default.\n * They are supported by GitHub, so footnotes can be enabled in markdown with\n * `mdast-util-gfm`.\n *\n * The options `footnoteBackLabel` and `footnoteLabel` define natural language\n * that explains footnotes, which is hidden for sighted users but shown to\n * assistive technology.\n * When your page is not in English, you must define translated values.\n *\n * Back references use ARIA attributes, but the section label itself uses a\n * heading that is hidden with an `sr-only` class.\n * To show it to sighted users, define different attributes in\n * `footnoteLabelProperties`.\n *\n * ###### Clobbering\n *\n * Footnotes introduces a problem, as it links footnote calls to footnote\n * definitions on the page through `id` attributes generated from user content,\n * which results in DOM clobbering.\n *\n * DOM clobbering is this:\n *\n * ```html\n * <p id=x></p>\n * <script>alert(x) // `x` now refers to the DOM `p#x` element</script>\n * ```\n *\n * Elements by their ID are made available by browsers on the `window` object,\n * which is a security risk.\n * Using a prefix solves this problem.\n *\n * More information on how to handle clobbering and the prefix is explained in\n * Example: headings (DOM clobbering) in `rehype-sanitize`.\n *\n * ###### Unknown nodes\n *\n * Unknown nodes are nodes with a type that isn’t in `handlers` or `passThrough`.\n * The default behavior for unknown nodes is:\n *\n * *   when the node has a `value` (and doesn’t have `data.hName`,\n *     `data.hProperties`, or `data.hChildren`, see later), create a hast `text`\n *     node\n * *   otherwise, create a `<div>` element (which could be changed with\n *     `data.hName`), with its children mapped from mdast to hast as well\n *\n * This behavior can be changed by passing an `unknownHandler`.\n *\n * @param {MdastNodes} tree\n *   mdast tree.\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {HastNodes | null | undefined}\n *   hast tree.\n */\n// To do: next major: always return a single `root`.\nexport function toHast(tree, options) {\n  const state = createState(tree, options)\n  const node = state.one(tree, null)\n  const foot = footer(state)\n\n  if (foot) {\n    // @ts-expect-error If there’s a footer, there were definitions, meaning block\n    // content.\n    // So assume `node` is a parent node.\n    node.children.push({type: 'text', value: '\\n'}, foot)\n  }\n\n  // To do: next major: always return root?\n  return Array.isArray(node) ? {type: 'root', children: node} : node\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n *\n * @typedef {import('./state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Generate a hast footer for called footnote definitions.\n *\n * @param {State} state\n *   Info passed around.\n * @returns {Element | undefined}\n *   `section` element or `undefined`.\n */\nexport function footer(state) {\n  /** @type {Array<ElementContent>} */\n  const listItems = []\n  let index = -1\n\n  while (++index < state.footnoteOrder.length) {\n    const def = state.footnoteById[state.footnoteOrder[index]]\n\n    if (!def) {\n      continue\n    }\n\n    const content = state.all(def)\n    const id = String(def.identifier).toUpperCase()\n    const safeId = normalizeUri(id.toLowerCase())\n    let referenceIndex = 0\n    /** @type {Array<ElementContent>} */\n    const backReferences = []\n\n    while (++referenceIndex <= state.footnoteCounts[id]) {\n      /** @type {Element} */\n      const backReference = {\n        type: 'element',\n        tagName: 'a',\n        properties: {\n          href:\n            '#' +\n            state.clobberPrefix +\n            'fnref-' +\n            safeId +\n            (referenceIndex > 1 ? '-' + referenceIndex : ''),\n          dataFootnoteBackref: true,\n          className: ['data-footnote-backref'],\n          ariaLabel: state.footnoteBackLabel\n        },\n        children: [{type: 'text', value: '↩'}]\n      }\n\n      if (referenceIndex > 1) {\n        backReference.children.push({\n          type: 'element',\n          tagName: 'sup',\n          children: [{type: 'text', value: String(referenceIndex)}]\n        })\n      }\n\n      if (backReferences.length > 0) {\n        backReferences.push({type: 'text', value: ' '})\n      }\n\n      backReferences.push(backReference)\n    }\n\n    const tail = content[content.length - 1]\n\n    if (tail && tail.type === 'element' && tail.tagName === 'p') {\n      const tailTail = tail.children[tail.children.length - 1]\n      if (tailTail && tailTail.type === 'text') {\n        tailTail.value += ' '\n      } else {\n        tail.children.push({type: 'text', value: ' '})\n      }\n\n      tail.children.push(...backReferences)\n    } else {\n      content.push(...backReferences)\n    }\n\n    /** @type {Element} */\n    const listItem = {\n      type: 'element',\n      tagName: 'li',\n      properties: {id: state.clobberPrefix + 'fn-' + safeId},\n      children: state.wrap(content, true)\n    }\n\n    state.patch(def, listItem)\n\n    listItems.push(listItem)\n  }\n\n  if (listItems.length === 0) {\n    return\n  }\n\n  return {\n    type: 'element',\n    tagName: 'section',\n    properties: {dataFootnotes: true, className: ['footnotes']},\n    children: [\n      {\n        type: 'element',\n        tagName: state.footnoteLabelTagName,\n        properties: {\n          // To do: use structured clone.\n          ...JSON.parse(JSON.stringify(state.footnoteLabelProperties)),\n          id: 'footnote-label'\n        },\n        children: [{type: 'text', value: state.footnoteLabel}]\n      },\n      {type: 'text', value: '\\n'},\n      {\n        type: 'element',\n        tagName: 'ol',\n        properties: {},\n        children: state.wrap(listItems, true)\n      },\n      {type: 'text', value: '\\n'}\n    ]\n  }\n}\n","/**\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('mdast').Root} MdastRoot\n * @typedef {import('mdast-util-to-hast').Options} Options\n * @typedef {import('unified').Processor<any, any, any, any>} Processor\n *\n * @typedef {import('mdast-util-to-hast')} DoNotTouchAsThisImportIncludesRawInTree\n */\n\nimport {toHast} from 'mdast-util-to-hast'\n\n// Note: the `<MdastRoot, HastRoot>` overload doesn’t seem to work :'(\n\n/**\n * Plugin that turns markdown into HTML to support rehype.\n *\n * *   If a destination processor is given, that processor runs with a new HTML\n *     (hast) tree (bridge-mode).\n *     As the given processor runs with a hast tree, and rehype plugins support\n *     hast, that means rehype plugins can be used with the given processor.\n *     The hast tree is discarded in the end.\n *     It’s highly unlikely that you want to do this.\n * *   The common case is to not pass a destination processor, in which case the\n *     current processor continues running with a new HTML (hast) tree\n *     (mutate-mode).\n *     As the current processor continues with a hast tree, and rehype plugins\n *     support hast, that means rehype plugins can be used after\n *     `remark-rehype`.\n *     It’s likely that this is what you want to do.\n *\n * @param destination\n *   Optional unified processor.\n * @param options\n *   Options passed to `mdast-util-to-hast`.\n */\nconst remarkRehype =\n  /** @type {(import('unified').Plugin<[Processor, Options?]|[null|undefined, Options?]|[Options]|[], MdastRoot>)} */\n  (\n    function (destination, options) {\n      return destination && 'run' in destination\n        ? bridge(destination, options)\n        : mutate(destination || options)\n    }\n  )\n\nexport default remarkRehype\n\n/**\n * Bridge-mode.\n * Runs the destination with the new hast tree.\n *\n * @type {import('unified').Plugin<[Processor, Options?], MdastRoot>}\n */\nfunction bridge(destination, options) {\n  return (node, file, next) => {\n    destination.run(toHast(node, options), file, (error) => {\n      next(error)\n    })\n  }\n}\n\n/**\n * Mutate-mode.\n * Further plugins run on the hast tree.\n *\n * @type {import('unified').Plugin<[Options?]|void[], MdastRoot, HastRoot>}\n */\nfunction mutate(options) {\n  // @ts-expect-error: assume a corresponding node is returned by `toHast`.\n  return (node) => toHast(node, options)\n}\n","/**\n * @typedef {import('./info.js').Info} Info\n * @typedef {Record<string, Info>} Properties\n * @typedef {Record<string, string>} Normal\n */\n\nexport class Schema {\n  /**\n   * @constructor\n   * @param {Properties} property\n   * @param {Normal} normal\n   * @param {string} [space]\n   */\n  constructor(property, normal, space) {\n    this.property = property\n    this.normal = normal\n    if (space) {\n      this.space = space\n    }\n  }\n}\n\n/** @type {Properties} */\nSchema.prototype.property = {}\n/** @type {Normal} */\nSchema.prototype.normal = {}\n/** @type {string|null} */\nSchema.prototype.space = null\n","/**\n * @typedef {import('./schema.js').Properties} Properties\n * @typedef {import('./schema.js').Normal} Normal\n */\n\nimport {Schema} from './schema.js'\n\n/**\n * @param {Schema[]} definitions\n * @param {string} [space]\n * @returns {Schema}\n */\nexport function merge(definitions, space) {\n  /** @type {Properties} */\n  const property = {}\n  /** @type {Normal} */\n  const normal = {}\n  let index = -1\n\n  while (++index < definitions.length) {\n    Object.assign(property, definitions[index].property)\n    Object.assign(normal, definitions[index].normal)\n  }\n\n  return new Schema(property, normal, space)\n}\n","/**\n * @param {string} value\n * @returns {string}\n */\nexport function normalize(value) {\n  return value.toLowerCase()\n}\n","export class Info {\n  /**\n   * @constructor\n   * @param {string} property\n   * @param {string} attribute\n   */\n  constructor(property, attribute) {\n    /** @type {string} */\n    this.property = property\n    /** @type {string} */\n    this.attribute = attribute\n  }\n}\n\n/** @type {string|null} */\nInfo.prototype.space = null\nInfo.prototype.boolean = false\nInfo.prototype.booleanish = false\nInfo.prototype.overloadedBoolean = false\nInfo.prototype.number = false\nInfo.prototype.commaSeparated = false\nInfo.prototype.spaceSeparated = false\nInfo.prototype.commaOrSpaceSeparated = false\nInfo.prototype.mustUseProperty = false\nInfo.prototype.defined = false\n","let powers = 0\n\nexport const boolean = increment()\nexport const booleanish = increment()\nexport const overloadedBoolean = increment()\nexport const number = increment()\nexport const spaceSeparated = increment()\nexport const commaSeparated = increment()\nexport const commaOrSpaceSeparated = increment()\n\nfunction increment() {\n  return 2 ** ++powers\n}\n","import {Info} from './info.js'\nimport * as types from './types.js'\n\n/** @type {Array<keyof types>} */\n// @ts-expect-error: hush.\nconst checks = Object.keys(types)\n\nexport class DefinedInfo extends Info {\n  /**\n   * @constructor\n   * @param {string} property\n   * @param {string} attribute\n   * @param {number|null} [mask]\n   * @param {string} [space]\n   */\n  constructor(property, attribute, mask, space) {\n    let index = -1\n\n    super(property, attribute)\n\n    mark(this, 'space', space)\n\n    if (typeof mask === 'number') {\n      while (++index < checks.length) {\n        const check = checks[index]\n        mark(this, checks[index], (mask & types[check]) === types[check])\n      }\n    }\n  }\n}\n\nDefinedInfo.prototype.defined = true\n\n/**\n * @param {DefinedInfo} values\n * @param {string} key\n * @param {unknown} value\n */\nfunction mark(values, key, value) {\n  if (value) {\n    // @ts-expect-error: assume `value` matches the expected value of `key`.\n    values[key] = value\n  }\n}\n","/**\n * @typedef {import('./schema.js').Properties} Properties\n * @typedef {import('./schema.js').Normal} Normal\n *\n * @typedef {Record<string, string>} Attributes\n *\n * @typedef {Object} Definition\n * @property {Record<string, number|null>} properties\n * @property {(attributes: Attributes, property: string) => string} transform\n * @property {string} [space]\n * @property {Attributes} [attributes]\n * @property {Array<string>} [mustUseProperty]\n */\n\nimport {normalize} from '../normalize.js'\nimport {Schema} from './schema.js'\nimport {DefinedInfo} from './defined-info.js'\n\nconst own = {}.hasOwnProperty\n\n/**\n * @param {Definition} definition\n * @returns {Schema}\n */\nexport function create(definition) {\n  /** @type {Properties} */\n  const property = {}\n  /** @type {Normal} */\n  const normal = {}\n  /** @type {string} */\n  let prop\n\n  for (prop in definition.properties) {\n    if (own.call(definition.properties, prop)) {\n      const value = definition.properties[prop]\n      const info = new DefinedInfo(\n        prop,\n        definition.transform(definition.attributes || {}, prop),\n        value,\n        definition.space\n      )\n\n      if (\n        definition.mustUseProperty &&\n        definition.mustUseProperty.includes(prop)\n      ) {\n        info.mustUseProperty = true\n      }\n\n      property[prop] = info\n\n      normal[normalize(prop)] = prop\n      normal[normalize(info.attribute)] = prop\n    }\n  }\n\n  return new Schema(property, normal, definition.space)\n}\n","import {create} from './util/create.js'\n\nexport const xlink = create({\n  space: 'xlink',\n  transform(_, prop) {\n    return 'xlink:' + prop.slice(5).toLowerCase()\n  },\n  properties: {\n    xLinkActuate: null,\n    xLinkArcRole: null,\n    xLinkHref: null,\n    xLinkRole: null,\n    xLinkShow: null,\n    xLinkTitle: null,\n    xLinkType: null\n  }\n})\n","import {create} from './util/create.js'\n\nexport const xml = create({\n  space: 'xml',\n  transform(_, prop) {\n    return 'xml:' + prop.slice(3).toLowerCase()\n  },\n  properties: {xmlLang: null, xmlBase: null, xmlSpace: null}\n})\n","/**\n * @param {Record<string, string>} attributes\n * @param {string} attribute\n * @returns {string}\n */\nexport function caseSensitiveTransform(attributes, attribute) {\n  return attribute in attributes ? attributes[attribute] : attribute\n}\n","import {caseSensitiveTransform} from './case-sensitive-transform.js'\n\n/**\n * @param {Record<string, string>} attributes\n * @param {string} property\n * @returns {string}\n */\nexport function caseInsensitiveTransform(attributes, property) {\n  return caseSensitiveTransform(attributes, property.toLowerCase())\n}\n","import {create} from './util/create.js'\nimport {caseInsensitiveTransform} from './util/case-insensitive-transform.js'\n\nexport const xmlns = create({\n  space: 'xmlns',\n  attributes: {xmlnsxlink: 'xmlns:xlink'},\n  transform: caseInsensitiveTransform,\n  properties: {xmlns: null, xmlnsXLink: null}\n})\n","import {booleanish, number, spaceSeparated} from './util/types.js'\nimport {create} from './util/create.js'\n\nexport const aria = create({\n  transform(_, prop) {\n    return prop === 'role' ? prop : 'aria-' + prop.slice(4).toLowerCase()\n  },\n  properties: {\n    ariaActiveDescendant: null,\n    ariaAtomic: booleanish,\n    ariaAutoComplete: null,\n    ariaBusy: booleanish,\n    ariaChecked: booleanish,\n    ariaColCount: number,\n    ariaColIndex: number,\n    ariaColSpan: number,\n    ariaControls: spaceSeparated,\n    ariaCurrent: null,\n    ariaDescribedBy: spaceSeparated,\n    ariaDetails: null,\n    ariaDisabled: booleanish,\n    ariaDropEffect: spaceSeparated,\n    ariaErrorMessage: null,\n    ariaExpanded: booleanish,\n    ariaFlowTo: spaceSeparated,\n    ariaGrabbed: booleanish,\n    ariaHasPopup: null,\n    ariaHidden: booleanish,\n    ariaInvalid: null,\n    ariaKeyShortcuts: null,\n    ariaLabel: null,\n    ariaLabelledBy: spaceSeparated,\n    ariaLevel: number,\n    ariaLive: null,\n    ariaModal: booleanish,\n    ariaMultiLine: booleanish,\n    ariaMultiSelectable: booleanish,\n    ariaOrientation: null,\n    ariaOwns: spaceSeparated,\n    ariaPlaceholder: null,\n    ariaPosInSet: number,\n    ariaPressed: booleanish,\n    ariaReadOnly: booleanish,\n    ariaRelevant: null,\n    ariaRequired: booleanish,\n    ariaRoleDescription: spaceSeparated,\n    ariaRowCount: number,\n    ariaRowIndex: number,\n    ariaRowSpan: number,\n    ariaSelected: booleanish,\n    ariaSetSize: number,\n    ariaSort: null,\n    ariaValueMax: number,\n    ariaValueMin: number,\n    ariaValueNow: number,\n    ariaValueText: null,\n    role: null\n  }\n})\n","import {\n  boolean,\n  overloadedBoolean,\n  booleanish,\n  number,\n  spaceSeparated,\n  commaSeparated\n} from './util/types.js'\nimport {create} from './util/create.js'\nimport {caseInsensitiveTransform} from './util/case-insensitive-transform.js'\n\nexport const html = create({\n  space: 'html',\n  attributes: {\n    acceptcharset: 'accept-charset',\n    classname: 'class',\n    htmlfor: 'for',\n    httpequiv: 'http-equiv'\n  },\n  transform: caseInsensitiveTransform,\n  mustUseProperty: ['checked', 'multiple', 'muted', 'selected'],\n  properties: {\n    // Standard Properties.\n    abbr: null,\n    accept: commaSeparated,\n    acceptCharset: spaceSeparated,\n    accessKey: spaceSeparated,\n    action: null,\n    allow: null,\n    allowFullScreen: boolean,\n    allowPaymentRequest: boolean,\n    allowUserMedia: boolean,\n    alt: null,\n    as: null,\n    async: boolean,\n    autoCapitalize: null,\n    autoComplete: spaceSeparated,\n    autoFocus: boolean,\n    autoPlay: boolean,\n    blocking: spaceSeparated,\n    capture: boolean,\n    charSet: null,\n    checked: boolean,\n    cite: null,\n    className: spaceSeparated,\n    cols: number,\n    colSpan: null,\n    content: null,\n    contentEditable: booleanish,\n    controls: boolean,\n    controlsList: spaceSeparated,\n    coords: number | commaSeparated,\n    crossOrigin: null,\n    data: null,\n    dateTime: null,\n    decoding: null,\n    default: boolean,\n    defer: boolean,\n    dir: null,\n    dirName: null,\n    disabled: boolean,\n    download: overloadedBoolean,\n    draggable: booleanish,\n    encType: null,\n    enterKeyHint: null,\n    fetchPriority: null,\n    form: null,\n    formAction: null,\n    formEncType: null,\n    formMethod: null,\n    formNoValidate: boolean,\n    formTarget: null,\n    headers: spaceSeparated,\n    height: number,\n    hidden: boolean,\n    high: number,\n    href: null,\n    hrefLang: null,\n    htmlFor: spaceSeparated,\n    httpEquiv: spaceSeparated,\n    id: null,\n    imageSizes: null,\n    imageSrcSet: null,\n    inert: boolean,\n    inputMode: null,\n    integrity: null,\n    is: null,\n    isMap: boolean,\n    itemId: null,\n    itemProp: spaceSeparated,\n    itemRef: spaceSeparated,\n    itemScope: boolean,\n    itemType: spaceSeparated,\n    kind: null,\n    label: null,\n    lang: null,\n    language: null,\n    list: null,\n    loading: null,\n    loop: boolean,\n    low: number,\n    manifest: null,\n    max: null,\n    maxLength: number,\n    media: null,\n    method: null,\n    min: null,\n    minLength: number,\n    multiple: boolean,\n    muted: boolean,\n    name: null,\n    nonce: null,\n    noModule: boolean,\n    noValidate: boolean,\n    onAbort: null,\n    onAfterPrint: null,\n    onAuxClick: null,\n    onBeforeMatch: null,\n    onBeforePrint: null,\n    onBeforeToggle: null,\n    onBeforeUnload: null,\n    onBlur: null,\n    onCancel: null,\n    onCanPlay: null,\n    onCanPlayThrough: null,\n    onChange: null,\n    onClick: null,\n    onClose: null,\n    onContextLost: null,\n    onContextMenu: null,\n    onContextRestored: null,\n    onCopy: null,\n    onCueChange: null,\n    onCut: null,\n    onDblClick: null,\n    onDrag: null,\n    onDragEnd: null,\n    onDragEnter: null,\n    onDragExit: null,\n    onDragLeave: null,\n    onDragOver: null,\n    onDragStart: null,\n    onDrop: null,\n    onDurationChange: null,\n    onEmptied: null,\n    onEnded: null,\n    onError: null,\n    onFocus: null,\n    onFormData: null,\n    onHashChange: null,\n    onInput: null,\n    onInvalid: null,\n    onKeyDown: null,\n    onKeyPress: null,\n    onKeyUp: null,\n    onLanguageChange: null,\n    onLoad: null,\n    onLoadedData: null,\n    onLoadedMetadata: null,\n    onLoadEnd: null,\n    onLoadStart: null,\n    onMessage: null,\n    onMessageError: null,\n    onMouseDown: null,\n    onMouseEnter: null,\n    onMouseLeave: null,\n    onMouseMove: null,\n    onMouseOut: null,\n    onMouseOver: null,\n    onMouseUp: null,\n    onOffline: null,\n    onOnline: null,\n    onPageHide: null,\n    onPageShow: null,\n    onPaste: null,\n    onPause: null,\n    onPlay: null,\n    onPlaying: null,\n    onPopState: null,\n    onProgress: null,\n    onRateChange: null,\n    onRejectionHandled: null,\n    onReset: null,\n    onResize: null,\n    onScroll: null,\n    onScrollEnd: null,\n    onSecurityPolicyViolation: null,\n    onSeeked: null,\n    onSeeking: null,\n    onSelect: null,\n    onSlotChange: null,\n    onStalled: null,\n    onStorage: null,\n    onSubmit: null,\n    onSuspend: null,\n    onTimeUpdate: null,\n    onToggle: null,\n    onUnhandledRejection: null,\n    onUnload: null,\n    onVolumeChange: null,\n    onWaiting: null,\n    onWheel: null,\n    open: boolean,\n    optimum: number,\n    pattern: null,\n    ping: spaceSeparated,\n    placeholder: null,\n    playsInline: boolean,\n    popover: null,\n    popoverTarget: null,\n    popoverTargetAction: null,\n    poster: null,\n    preload: null,\n    readOnly: boolean,\n    referrerPolicy: null,\n    rel: spaceSeparated,\n    required: boolean,\n    reversed: boolean,\n    rows: number,\n    rowSpan: number,\n    sandbox: spaceSeparated,\n    scope: null,\n    scoped: boolean,\n    seamless: boolean,\n    selected: boolean,\n    shadowRootDelegatesFocus: boolean,\n    shadowRootMode: null,\n    shape: null,\n    size: number,\n    sizes: null,\n    slot: null,\n    span: number,\n    spellCheck: booleanish,\n    src: null,\n    srcDoc: null,\n    srcLang: null,\n    srcSet: null,\n    start: number,\n    step: null,\n    style: null,\n    tabIndex: number,\n    target: null,\n    title: null,\n    translate: null,\n    type: null,\n    typeMustMatch: boolean,\n    useMap: null,\n    value: booleanish,\n    width: number,\n    wrap: null,\n\n    // Legacy.\n    // See: https://html.spec.whatwg.org/#other-elements,-attributes-and-apis\n    align: null, // Several. Use CSS `text-align` instead,\n    aLink: null, // `<body>`. Use CSS `a:active {color}` instead\n    archive: spaceSeparated, // `<object>`. List of URIs to archives\n    axis: null, // `<td>` and `<th>`. Use `scope` on `<th>`\n    background: null, // `<body>`. Use CSS `background-image` instead\n    bgColor: null, // `<body>` and table elements. Use CSS `background-color` instead\n    border: number, // `<table>`. Use CSS `border-width` instead,\n    borderColor: null, // `<table>`. Use CSS `border-color` instead,\n    bottomMargin: number, // `<body>`\n    cellPadding: null, // `<table>`\n    cellSpacing: null, // `<table>`\n    char: null, // Several table elements. When `align=char`, sets the character to align on\n    charOff: null, // Several table elements. When `char`, offsets the alignment\n    classId: null, // `<object>`\n    clear: null, // `<br>`. Use CSS `clear` instead\n    code: null, // `<object>`\n    codeBase: null, // `<object>`\n    codeType: null, // `<object>`\n    color: null, // `<font>` and `<hr>`. Use CSS instead\n    compact: boolean, // Lists. Use CSS to reduce space between items instead\n    declare: boolean, // `<object>`\n    event: null, // `<script>`\n    face: null, // `<font>`. Use CSS instead\n    frame: null, // `<table>`\n    frameBorder: null, // `<iframe>`. Use CSS `border` instead\n    hSpace: number, // `<img>` and `<object>`\n    leftMargin: number, // `<body>`\n    link: null, // `<body>`. Use CSS `a:link {color: *}` instead\n    longDesc: null, // `<frame>`, `<iframe>`, and `<img>`. Use an `<a>`\n    lowSrc: null, // `<img>`. Use a `<picture>`\n    marginHeight: number, // `<body>`\n    marginWidth: number, // `<body>`\n    noResize: boolean, // `<frame>`\n    noHref: boolean, // `<area>`. Use no href instead of an explicit `nohref`\n    noShade: boolean, // `<hr>`. Use background-color and height instead of borders\n    noWrap: boolean, // `<td>` and `<th>`\n    object: null, // `<applet>`\n    profile: null, // `<head>`\n    prompt: null, // `<isindex>`\n    rev: null, // `<link>`\n    rightMargin: number, // `<body>`\n    rules: null, // `<table>`\n    scheme: null, // `<meta>`\n    scrolling: booleanish, // `<frame>`. Use overflow in the child context\n    standby: null, // `<object>`\n    summary: null, // `<table>`\n    text: null, // `<body>`. Use CSS `color` instead\n    topMargin: number, // `<body>`\n    valueType: null, // `<param>`\n    version: null, // `<html>`. Use a doctype.\n    vAlign: null, // Several. Use CSS `vertical-align` instead\n    vLink: null, // `<body>`. Use CSS `a:visited {color}` instead\n    vSpace: number, // `<img>` and `<object>`\n\n    // Non-standard Properties.\n    allowTransparency: null,\n    autoCorrect: null,\n    autoSave: null,\n    disablePictureInPicture: boolean,\n    disableRemotePlayback: boolean,\n    prefix: null,\n    property: null,\n    results: number,\n    security: null,\n    unselectable: null\n  }\n})\n","import {\n  boolean,\n  number,\n  spaceSeparated,\n  commaSeparated,\n  commaOrSpaceSeparated\n} from './util/types.js'\nimport {create} from './util/create.js'\nimport {caseSensitiveTransform} from './util/case-sensitive-transform.js'\n\nexport const svg = create({\n  space: 'svg',\n  attributes: {\n    accentHeight: 'accent-height',\n    alignmentBaseline: 'alignment-baseline',\n    arabicForm: 'arabic-form',\n    baselineShift: 'baseline-shift',\n    capHeight: 'cap-height',\n    className: 'class',\n    clipPath: 'clip-path',\n    clipRule: 'clip-rule',\n    colorInterpolation: 'color-interpolation',\n    colorInterpolationFilters: 'color-interpolation-filters',\n    colorProfile: 'color-profile',\n    colorRendering: 'color-rendering',\n    crossOrigin: 'crossorigin',\n    dataType: 'datatype',\n    dominantBaseline: 'dominant-baseline',\n    enableBackground: 'enable-background',\n    fillOpacity: 'fill-opacity',\n    fillRule: 'fill-rule',\n    floodColor: 'flood-color',\n    floodOpacity: 'flood-opacity',\n    fontFamily: 'font-family',\n    fontSize: 'font-size',\n    fontSizeAdjust: 'font-size-adjust',\n    fontStretch: 'font-stretch',\n    fontStyle: 'font-style',\n    fontVariant: 'font-variant',\n    fontWeight: 'font-weight',\n    glyphName: 'glyph-name',\n    glyphOrientationHorizontal: 'glyph-orientation-horizontal',\n    glyphOrientationVertical: 'glyph-orientation-vertical',\n    hrefLang: 'hreflang',\n    horizAdvX: 'horiz-adv-x',\n    horizOriginX: 'horiz-origin-x',\n    horizOriginY: 'horiz-origin-y',\n    imageRendering: 'image-rendering',\n    letterSpacing: 'letter-spacing',\n    lightingColor: 'lighting-color',\n    markerEnd: 'marker-end',\n    markerMid: 'marker-mid',\n    markerStart: 'marker-start',\n    navDown: 'nav-down',\n    navDownLeft: 'nav-down-left',\n    navDownRight: 'nav-down-right',\n    navLeft: 'nav-left',\n    navNext: 'nav-next',\n    navPrev: 'nav-prev',\n    navRight: 'nav-right',\n    navUp: 'nav-up',\n    navUpLeft: 'nav-up-left',\n    navUpRight: 'nav-up-right',\n    onAbort: 'onabort',\n    onActivate: 'onactivate',\n    onAfterPrint: 'onafterprint',\n    onBeforePrint: 'onbeforeprint',\n    onBegin: 'onbegin',\n    onCancel: 'oncancel',\n    onCanPlay: 'oncanplay',\n    onCanPlayThrough: 'oncanplaythrough',\n    onChange: 'onchange',\n    onClick: 'onclick',\n    onClose: 'onclose',\n    onCopy: 'oncopy',\n    onCueChange: 'oncuechange',\n    onCut: 'oncut',\n    onDblClick: 'ondblclick',\n    onDrag: 'ondrag',\n    onDragEnd: 'ondragend',\n    onDragEnter: 'ondragenter',\n    onDragExit: 'ondragexit',\n    onDragLeave: 'ondragleave',\n    onDragOver: 'ondragover',\n    onDragStart: 'ondragstart',\n    onDrop: 'ondrop',\n    onDurationChange: 'ondurationchange',\n    onEmptied: 'onemptied',\n    onEnd: 'onend',\n    onEnded: 'onended',\n    onError: 'onerror',\n    onFocus: 'onfocus',\n    onFocusIn: 'onfocusin',\n    onFocusOut: 'onfocusout',\n    onHashChange: 'onhashchange',\n    onInput: 'oninput',\n    onInvalid: 'oninvalid',\n    onKeyDown: 'onkeydown',\n    onKeyPress: 'onkeypress',\n    onKeyUp: 'onkeyup',\n    onLoad: 'onload',\n    onLoadedData: 'onloadeddata',\n    onLoadedMetadata: 'onloadedmetadata',\n    onLoadStart: 'onloadstart',\n    onMessage: 'onmessage',\n    onMouseDown: 'onmousedown',\n    onMouseEnter: 'onmouseenter',\n    onMouseLeave: 'onmouseleave',\n    onMouseMove: 'onmousemove',\n    onMouseOut: 'onmouseout',\n    onMouseOver: 'onmouseover',\n    onMouseUp: 'onmouseup',\n    onMouseWheel: 'onmousewheel',\n    onOffline: 'onoffline',\n    onOnline: 'ononline',\n    onPageHide: 'onpagehide',\n    onPageShow: 'onpageshow',\n    onPaste: 'onpaste',\n    onPause: 'onpause',\n    onPlay: 'onplay',\n    onPlaying: 'onplaying',\n    onPopState: 'onpopstate',\n    onProgress: 'onprogress',\n    onRateChange: 'onratechange',\n    onRepeat: 'onrepeat',\n    onReset: 'onreset',\n    onResize: 'onresize',\n    onScroll: 'onscroll',\n    onSeeked: 'onseeked',\n    onSeeking: 'onseeking',\n    onSelect: 'onselect',\n    onShow: 'onshow',\n    onStalled: 'onstalled',\n    onStorage: 'onstorage',\n    onSubmit: 'onsubmit',\n    onSuspend: 'onsuspend',\n    onTimeUpdate: 'ontimeupdate',\n    onToggle: 'ontoggle',\n    onUnload: 'onunload',\n    onVolumeChange: 'onvolumechange',\n    onWaiting: 'onwaiting',\n    onZoom: 'onzoom',\n    overlinePosition: 'overline-position',\n    overlineThickness: 'overline-thickness',\n    paintOrder: 'paint-order',\n    panose1: 'panose-1',\n    pointerEvents: 'pointer-events',\n    referrerPolicy: 'referrerpolicy',\n    renderingIntent: 'rendering-intent',\n    shapeRendering: 'shape-rendering',\n    stopColor: 'stop-color',\n    stopOpacity: 'stop-opacity',\n    strikethroughPosition: 'strikethrough-position',\n    strikethroughThickness: 'strikethrough-thickness',\n    strokeDashArray: 'stroke-dasharray',\n    strokeDashOffset: 'stroke-dashoffset',\n    strokeLineCap: 'stroke-linecap',\n    strokeLineJoin: 'stroke-linejoin',\n    strokeMiterLimit: 'stroke-miterlimit',\n    strokeOpacity: 'stroke-opacity',\n    strokeWidth: 'stroke-width',\n    tabIndex: 'tabindex',\n    textAnchor: 'text-anchor',\n    textDecoration: 'text-decoration',\n    textRendering: 'text-rendering',\n    transformOrigin: 'transform-origin',\n    typeOf: 'typeof',\n    underlinePosition: 'underline-position',\n    underlineThickness: 'underline-thickness',\n    unicodeBidi: 'unicode-bidi',\n    unicodeRange: 'unicode-range',\n    unitsPerEm: 'units-per-em',\n    vAlphabetic: 'v-alphabetic',\n    vHanging: 'v-hanging',\n    vIdeographic: 'v-ideographic',\n    vMathematical: 'v-mathematical',\n    vectorEffect: 'vector-effect',\n    vertAdvY: 'vert-adv-y',\n    vertOriginX: 'vert-origin-x',\n    vertOriginY: 'vert-origin-y',\n    wordSpacing: 'word-spacing',\n    writingMode: 'writing-mode',\n    xHeight: 'x-height',\n    // These were camelcased in Tiny. Now lowercased in SVG 2\n    playbackOrder: 'playbackorder',\n    timelineBegin: 'timelinebegin'\n  },\n  transform: caseSensitiveTransform,\n  properties: {\n    about: commaOrSpaceSeparated,\n    accentHeight: number,\n    accumulate: null,\n    additive: null,\n    alignmentBaseline: null,\n    alphabetic: number,\n    amplitude: number,\n    arabicForm: null,\n    ascent: number,\n    attributeName: null,\n    attributeType: null,\n    azimuth: number,\n    bandwidth: null,\n    baselineShift: null,\n    baseFrequency: null,\n    baseProfile: null,\n    bbox: null,\n    begin: null,\n    bias: number,\n    by: null,\n    calcMode: null,\n    capHeight: number,\n    className: spaceSeparated,\n    clip: null,\n    clipPath: null,\n    clipPathUnits: null,\n    clipRule: null,\n    color: null,\n    colorInterpolation: null,\n    colorInterpolationFilters: null,\n    colorProfile: null,\n    colorRendering: null,\n    content: null,\n    contentScriptType: null,\n    contentStyleType: null,\n    crossOrigin: null,\n    cursor: null,\n    cx: null,\n    cy: null,\n    d: null,\n    dataType: null,\n    defaultAction: null,\n    descent: number,\n    diffuseConstant: number,\n    direction: null,\n    display: null,\n    dur: null,\n    divisor: number,\n    dominantBaseline: null,\n    download: boolean,\n    dx: null,\n    dy: null,\n    edgeMode: null,\n    editable: null,\n    elevation: number,\n    enableBackground: null,\n    end: null,\n    event: null,\n    exponent: number,\n    externalResourcesRequired: null,\n    fill: null,\n    fillOpacity: number,\n    fillRule: null,\n    filter: null,\n    filterRes: null,\n    filterUnits: null,\n    floodColor: null,\n    floodOpacity: null,\n    focusable: null,\n    focusHighlight: null,\n    fontFamily: null,\n    fontSize: null,\n    fontSizeAdjust: null,\n    fontStretch: null,\n    fontStyle: null,\n    fontVariant: null,\n    fontWeight: null,\n    format: null,\n    fr: null,\n    from: null,\n    fx: null,\n    fy: null,\n    g1: commaSeparated,\n    g2: commaSeparated,\n    glyphName: commaSeparated,\n    glyphOrientationHorizontal: null,\n    glyphOrientationVertical: null,\n    glyphRef: null,\n    gradientTransform: null,\n    gradientUnits: null,\n    handler: null,\n    hanging: number,\n    hatchContentUnits: null,\n    hatchUnits: null,\n    height: null,\n    href: null,\n    hrefLang: null,\n    horizAdvX: number,\n    horizOriginX: number,\n    horizOriginY: number,\n    id: null,\n    ideographic: number,\n    imageRendering: null,\n    initialVisibility: null,\n    in: null,\n    in2: null,\n    intercept: number,\n    k: number,\n    k1: number,\n    k2: number,\n    k3: number,\n    k4: number,\n    kernelMatrix: commaOrSpaceSeparated,\n    kernelUnitLength: null,\n    keyPoints: null, // SEMI_COLON_SEPARATED\n    keySplines: null, // SEMI_COLON_SEPARATED\n    keyTimes: null, // SEMI_COLON_SEPARATED\n    kerning: null,\n    lang: null,\n    lengthAdjust: null,\n    letterSpacing: null,\n    lightingColor: null,\n    limitingConeAngle: number,\n    local: null,\n    markerEnd: null,\n    markerMid: null,\n    markerStart: null,\n    markerHeight: null,\n    markerUnits: null,\n    markerWidth: null,\n    mask: null,\n    maskContentUnits: null,\n    maskUnits: null,\n    mathematical: null,\n    max: null,\n    media: null,\n    mediaCharacterEncoding: null,\n    mediaContentEncodings: null,\n    mediaSize: number,\n    mediaTime: null,\n    method: null,\n    min: null,\n    mode: null,\n    name: null,\n    navDown: null,\n    navDownLeft: null,\n    navDownRight: null,\n    navLeft: null,\n    navNext: null,\n    navPrev: null,\n    navRight: null,\n    navUp: null,\n    navUpLeft: null,\n    navUpRight: null,\n    numOctaves: null,\n    observer: null,\n    offset: null,\n    onAbort: null,\n    onActivate: null,\n    onAfterPrint: null,\n    onBeforePrint: null,\n    onBegin: null,\n    onCancel: null,\n    onCanPlay: null,\n    onCanPlayThrough: null,\n    onChange: null,\n    onClick: null,\n    onClose: null,\n    onCopy: null,\n    onCueChange: null,\n    onCut: null,\n    onDblClick: null,\n    onDrag: null,\n    onDragEnd: null,\n    onDragEnter: null,\n    onDragExit: null,\n    onDragLeave: null,\n    onDragOver: null,\n    onDragStart: null,\n    onDrop: null,\n    onDurationChange: null,\n    onEmptied: null,\n    onEnd: null,\n    onEnded: null,\n    onError: null,\n    onFocus: null,\n    onFocusIn: null,\n    onFocusOut: null,\n    onHashChange: null,\n    onInput: null,\n    onInvalid: null,\n    onKeyDown: null,\n    onKeyPress: null,\n    onKeyUp: null,\n    onLoad: null,\n    onLoadedData: null,\n    onLoadedMetadata: null,\n    onLoadStart: null,\n    onMessage: null,\n    onMouseDown: null,\n    onMouseEnter: null,\n    onMouseLeave: null,\n    onMouseMove: null,\n    onMouseOut: null,\n    onMouseOver: null,\n    onMouseUp: null,\n    onMouseWheel: null,\n    onOffline: null,\n    onOnline: null,\n    onPageHide: null,\n    onPageShow: null,\n    onPaste: null,\n    onPause: null,\n    onPlay: null,\n    onPlaying: null,\n    onPopState: null,\n    onProgress: null,\n    onRateChange: null,\n    onRepeat: null,\n    onReset: null,\n    onResize: null,\n    onScroll: null,\n    onSeeked: null,\n    onSeeking: null,\n    onSelect: null,\n    onShow: null,\n    onStalled: null,\n    onStorage: null,\n    onSubmit: null,\n    onSuspend: null,\n    onTimeUpdate: null,\n    onToggle: null,\n    onUnload: null,\n    onVolumeChange: null,\n    onWaiting: null,\n    onZoom: null,\n    opacity: null,\n    operator: null,\n    order: null,\n    orient: null,\n    orientation: null,\n    origin: null,\n    overflow: null,\n    overlay: null,\n    overlinePosition: number,\n    overlineThickness: number,\n    paintOrder: null,\n    panose1: null,\n    path: null,\n    pathLength: number,\n    patternContentUnits: null,\n    patternTransform: null,\n    patternUnits: null,\n    phase: null,\n    ping: spaceSeparated,\n    pitch: null,\n    playbackOrder: null,\n    pointerEvents: null,\n    points: null,\n    pointsAtX: number,\n    pointsAtY: number,\n    pointsAtZ: number,\n    preserveAlpha: null,\n    preserveAspectRatio: null,\n    primitiveUnits: null,\n    propagate: null,\n    property: commaOrSpaceSeparated,\n    r: null,\n    radius: null,\n    referrerPolicy: null,\n    refX: null,\n    refY: null,\n    rel: commaOrSpaceSeparated,\n    rev: commaOrSpaceSeparated,\n    renderingIntent: null,\n    repeatCount: null,\n    repeatDur: null,\n    requiredExtensions: commaOrSpaceSeparated,\n    requiredFeatures: commaOrSpaceSeparated,\n    requiredFonts: commaOrSpaceSeparated,\n    requiredFormats: commaOrSpaceSeparated,\n    resource: null,\n    restart: null,\n    result: null,\n    rotate: null,\n    rx: null,\n    ry: null,\n    scale: null,\n    seed: null,\n    shapeRendering: null,\n    side: null,\n    slope: null,\n    snapshotTime: null,\n    specularConstant: number,\n    specularExponent: number,\n    spreadMethod: null,\n    spacing: null,\n    startOffset: null,\n    stdDeviation: null,\n    stemh: null,\n    stemv: null,\n    stitchTiles: null,\n    stopColor: null,\n    stopOpacity: null,\n    strikethroughPosition: number,\n    strikethroughThickness: number,\n    string: null,\n    stroke: null,\n    strokeDashArray: commaOrSpaceSeparated,\n    strokeDashOffset: null,\n    strokeLineCap: null,\n    strokeLineJoin: null,\n    strokeMiterLimit: number,\n    strokeOpacity: number,\n    strokeWidth: null,\n    style: null,\n    surfaceScale: number,\n    syncBehavior: null,\n    syncBehaviorDefault: null,\n    syncMaster: null,\n    syncTolerance: null,\n    syncToleranceDefault: null,\n    systemLanguage: commaOrSpaceSeparated,\n    tabIndex: number,\n    tableValues: null,\n    target: null,\n    targetX: number,\n    targetY: number,\n    textAnchor: null,\n    textDecoration: null,\n    textRendering: null,\n    textLength: null,\n    timelineBegin: null,\n    title: null,\n    transformBehavior: null,\n    type: null,\n    typeOf: commaOrSpaceSeparated,\n    to: null,\n    transform: null,\n    transformOrigin: null,\n    u1: null,\n    u2: null,\n    underlinePosition: number,\n    underlineThickness: number,\n    unicode: null,\n    unicodeBidi: null,\n    unicodeRange: null,\n    unitsPerEm: number,\n    values: null,\n    vAlphabetic: number,\n    vMathematical: number,\n    vectorEffect: null,\n    vHanging: number,\n    vIdeographic: number,\n    version: null,\n    vertAdvY: number,\n    vertOriginX: number,\n    vertOriginY: number,\n    viewBox: null,\n    viewTarget: null,\n    visibility: null,\n    width: null,\n    widths: null,\n    wordSpacing: null,\n    writingMode: null,\n    x: null,\n    x1: null,\n    x2: null,\n    xChannelSelector: null,\n    xHeight: number,\n    y: null,\n    y1: null,\n    y2: null,\n    yChannelSelector: null,\n    z: null,\n    zoomAndPan: null\n  }\n})\n","/**\n * @typedef {import('./lib/util/info.js').Info} Info\n * @typedef {import('./lib/util/schema.js').Schema} Schema\n */\n\nimport {merge} from './lib/util/merge.js'\nimport {xlink} from './lib/xlink.js'\nimport {xml} from './lib/xml.js'\nimport {xmlns} from './lib/xmlns.js'\nimport {aria} from './lib/aria.js'\nimport {html as htmlBase} from './lib/html.js'\nimport {svg as svgBase} from './lib/svg.js'\n\nexport {find} from './lib/find.js'\nexport {hastToReact} from './lib/hast-to-react.js'\nexport {normalize} from './lib/normalize.js'\nexport const html = merge([xml, xlink, xmlns, aria, htmlBase], 'html')\nexport const svg = merge([xml, xlink, xmlns, aria, svgBase], 'svg')\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n */\n\n/**\n * @typedef {Record<string, unknown>} Props\n * @typedef {null | undefined | string | Props | TestFunctionAnything | Array<string | Props | TestFunctionAnything>} Test\n *   Check for an arbitrary node, unaware of TypeScript inferral.\n *\n * @callback TestFunctionAnything\n *   Check if a node passes a test, unaware of TypeScript inferral.\n * @param {unknown} this\n *   The given context.\n * @param {Node} node\n *   A node.\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean | void}\n *   Whether this node passes the test.\n */\n\n/**\n * @template {Node} Kind\n *   Node type.\n * @typedef {Kind['type'] | Partial<Kind> | TestFunctionPredicate<Kind> | Array<Kind['type'] | Partial<Kind> | TestFunctionPredicate<Kind>>} PredicateTest\n *   Check for a node that can be inferred by TypeScript.\n */\n\n/**\n * Check if a node passes a certain test.\n *\n * @template {Node} Kind\n *   Node type.\n * @callback TestFunctionPredicate\n *   Complex test function for a node that can be inferred by TypeScript.\n * @param {Node} node\n *   A node.\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {node is Kind}\n *   Whether this node passes the test.\n */\n\n/**\n * @callback AssertAnything\n *   Check that an arbitrary value is a node, unaware of TypeScript inferral.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean}\n *   Whether this is a node and passes a test.\n */\n\n/**\n * Check if a node is a node and passes a certain node test.\n *\n * @template {Node} Kind\n *   Node type.\n * @callback AssertPredicate\n *   Check that an arbitrary value is a specific node, aware of TypeScript.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {node is Kind}\n *   Whether this is a node and passes a test.\n */\n\n/**\n * Check if `node` is a `Node` and whether it passes the given test.\n *\n * @param node\n *   Thing to check, typically `Node`.\n * @param test\n *   A check for a specific node.\n * @param index\n *   The node’s position in its parent.\n * @param parent\n *   The node’s parent.\n * @returns\n *   Whether `node` is a node and passes a test.\n */\nexport const is =\n  /**\n   * @type {(\n   *   (() => false) &\n   *   (<Kind extends Node = Node>(node: unknown, test: PredicateTest<Kind>, index: number, parent: Parent, context?: unknown) => node is Kind) &\n   *   (<Kind extends Node = Node>(node: unknown, test: PredicateTest<Kind>, index?: null | undefined, parent?: null | undefined, context?: unknown) => node is Kind) &\n   *   ((node: unknown, test: Test, index: number, parent: Parent, context?: unknown) => boolean) &\n   *   ((node: unknown, test?: Test, index?: null | undefined, parent?: null | undefined, context?: unknown) => boolean)\n   * )}\n   */\n  (\n    /**\n     * @param {unknown} [node]\n     * @param {Test} [test]\n     * @param {number | null | undefined} [index]\n     * @param {Parent | null | undefined} [parent]\n     * @param {unknown} [context]\n     * @returns {boolean}\n     */\n    // eslint-disable-next-line max-params\n    function is(node, test, index, parent, context) {\n      const check = convert(test)\n\n      if (\n        index !== undefined &&\n        index !== null &&\n        (typeof index !== 'number' ||\n          index < 0 ||\n          index === Number.POSITIVE_INFINITY)\n      ) {\n        throw new Error('Expected positive finite index')\n      }\n\n      if (\n        parent !== undefined &&\n        parent !== null &&\n        (!is(parent) || !parent.children)\n      ) {\n        throw new Error('Expected parent node')\n      }\n\n      if (\n        (parent === undefined || parent === null) !==\n        (index === undefined || index === null)\n      ) {\n        throw new Error('Expected both parent and index')\n      }\n\n      // @ts-expect-error Looks like a node.\n      return node && node.type && typeof node.type === 'string'\n        ? Boolean(check.call(context, node, index, parent))\n        : false\n    }\n  )\n\n/**\n * Generate an assertion from a test.\n *\n * Useful if you’re going to test many nodes, for example when creating a\n * utility where something else passes a compatible test.\n *\n * The created function is a bit faster because it expects valid input only:\n * a `node`, `index`, and `parent`.\n *\n * @param test\n *   *   when nullish, checks if `node` is a `Node`.\n *   *   when `string`, works like passing `(node) => node.type === test`.\n *   *   when `function` checks if function passed the node is true.\n *   *   when `object`, checks that all keys in test are in node, and that they have (strictly) equal values.\n *   *   when `array`, checks if any one of the subtests pass.\n * @returns\n *   An assertion.\n */\nexport const convert =\n  /**\n   * @type {(\n   *   (<Kind extends Node>(test: PredicateTest<Kind>) => AssertPredicate<Kind>) &\n   *   ((test?: Test) => AssertAnything)\n   * )}\n   */\n  (\n    /**\n     * @param {Test} [test]\n     * @returns {AssertAnything}\n     */\n    function (test) {\n      if (test === undefined || test === null) {\n        return ok\n      }\n\n      if (typeof test === 'string') {\n        return typeFactory(test)\n      }\n\n      if (typeof test === 'object') {\n        return Array.isArray(test) ? anyFactory(test) : propsFactory(test)\n      }\n\n      if (typeof test === 'function') {\n        return castFactory(test)\n      }\n\n      throw new Error('Expected function, string, or object as test')\n    }\n  )\n\n/**\n * @param {Array<string | Props | TestFunctionAnything>} tests\n * @returns {AssertAnything}\n */\nfunction anyFactory(tests) {\n  /** @type {Array<AssertAnything>} */\n  const checks = []\n  let index = -1\n\n  while (++index < tests.length) {\n    checks[index] = convert(tests[index])\n  }\n\n  return castFactory(any)\n\n  /**\n   * @this {unknown}\n   * @param {Array<unknown>} parameters\n   * @returns {boolean}\n   */\n  function any(...parameters) {\n    let index = -1\n\n    while (++index < checks.length) {\n      if (checks[index].call(this, ...parameters)) return true\n    }\n\n    return false\n  }\n}\n\n/**\n * Turn an object into a test for a node with a certain fields.\n *\n * @param {Props} check\n * @returns {AssertAnything}\n */\nfunction propsFactory(check) {\n  return castFactory(all)\n\n  /**\n   * @param {Node} node\n   * @returns {boolean}\n   */\n  function all(node) {\n    /** @type {string} */\n    let key\n\n    for (key in check) {\n      // @ts-expect-error: hush, it sure works as an index.\n      if (node[key] !== check[key]) return false\n    }\n\n    return true\n  }\n}\n\n/**\n * Turn a string into a test for a node with a certain type.\n *\n * @param {string} check\n * @returns {AssertAnything}\n */\nfunction typeFactory(check) {\n  return castFactory(type)\n\n  /**\n   * @param {Node} node\n   */\n  function type(node) {\n    return node && node.type === check\n  }\n}\n\n/**\n * Turn a custom test into a test for a node that passes that test.\n *\n * @param {TestFunctionAnything} check\n * @returns {AssertAnything}\n */\nfunction castFactory(check) {\n  return assertion\n\n  /**\n   * @this {unknown}\n   * @param {unknown} node\n   * @param {Array<unknown>} parameters\n   * @returns {boolean}\n   */\n  function assertion(node, ...parameters) {\n    return Boolean(\n      node &&\n        typeof node === 'object' &&\n        'type' in node &&\n        // @ts-expect-error: fine.\n        Boolean(check.call(this, node, ...parameters))\n    )\n  }\n}\n\nfunction ok() {\n  return true\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n * @typedef {import('unist-util-is').Test} Test\n */\n\n/**\n * @typedef {boolean | 'skip'} Action\n *   Union of the action types.\n *\n * @typedef {number} Index\n *   Move to the sibling at `index` next (after node itself is completely\n *   traversed).\n *\n *   Useful if mutating the tree, such as removing the node the visitor is\n *   currently on, or any of its previous siblings.\n *   Results less than 0 or greater than or equal to `children.length` stop\n *   traversing the parent.\n *\n * @typedef {[(Action | null | undefined | void)?, (Index | null | undefined)?]} ActionTuple\n *   List with one or two values, the first an action, the second an index.\n *\n * @typedef {Action | ActionTuple | Index | null | undefined | void} VisitorResult\n *   Any value that can be returned from a visitor.\n */\n\n/**\n * @template {Node} [Visited=Node]\n *   Visited node type.\n * @template {Parent} [Ancestor=Parent]\n *   Ancestor type.\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform the parent of node (the last of `ancestors`).\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of an ancestor still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Array<Ancestor>} ancestors\n *   Ancestors of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   Tree type.\n * @template {Test} [Check=string]\n *   Test type.\n * @typedef {Visitor<import('./complex-types.js').Matches<import('./complex-types.js').InclusiveDescendant<Tree>, Check>, Extract<import('./complex-types.js').InclusiveDescendant<Tree>, Parent>>} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parents`.\n */\n\nimport {convert} from 'unist-util-is'\nimport {color} from './color.js'\n\n/**\n * Continue traversing as normal.\n */\nexport const CONTINUE = true\n\n/**\n * Stop traversing immediately.\n */\nexport const EXIT = false\n\n/**\n * Do not traverse this node’s children.\n */\nexport const SKIP = 'skip'\n\n/**\n * Visit nodes, with ancestral information.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @param tree\n *   Tree to traverse.\n * @param test\n *   `unist-util-is`-compatible test\n * @param visitor\n *   Handle each node.\n * @param reverse\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns\n *   Nothing.\n */\nexport const visitParents =\n  /**\n   * @type {(\n   *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: BuildVisitor<Tree, Check>, reverse?: boolean | null | undefined) => void) &\n   *   (<Tree extends Node>(tree: Tree, visitor: BuildVisitor<Tree>, reverse?: boolean | null | undefined) => void)\n   * )}\n   */\n  (\n    /**\n     * @param {Node} tree\n     * @param {Test} test\n     * @param {Visitor<Node>} visitor\n     * @param {boolean | null | undefined} [reverse]\n     * @returns {void}\n     */\n    function (tree, test, visitor, reverse) {\n      if (typeof test === 'function' && typeof visitor !== 'function') {\n        reverse = visitor\n        // @ts-expect-error no visitor given, so `visitor` is test.\n        visitor = test\n        test = null\n      }\n\n      const is = convert(test)\n      const step = reverse ? -1 : 1\n\n      factory(tree, undefined, [])()\n\n      /**\n       * @param {Node} node\n       * @param {number | undefined} index\n       * @param {Array<Parent>} parents\n       */\n      function factory(node, index, parents) {\n        /** @type {Record<string, unknown>} */\n        // @ts-expect-error: hush\n        const value = node && typeof node === 'object' ? node : {}\n\n        if (typeof value.type === 'string') {\n          const name =\n            // `hast`\n            typeof value.tagName === 'string'\n              ? value.tagName\n              : // `xast`\n              typeof value.name === 'string'\n              ? value.name\n              : undefined\n\n          Object.defineProperty(visit, 'name', {\n            value:\n              'node (' + color(node.type + (name ? '<' + name + '>' : '')) + ')'\n          })\n        }\n\n        return visit\n\n        function visit() {\n          /** @type {ActionTuple} */\n          let result = []\n          /** @type {ActionTuple} */\n          let subresult\n          /** @type {number} */\n          let offset\n          /** @type {Array<Parent>} */\n          let grandparents\n\n          if (!test || is(node, index, parents[parents.length - 1] || null)) {\n            result = toResult(visitor(node, parents))\n\n            if (result[0] === EXIT) {\n              return result\n            }\n          }\n\n          // @ts-expect-error looks like a parent.\n          if (node.children && result[0] !== SKIP) {\n            // @ts-expect-error looks like a parent.\n            offset = (reverse ? node.children.length : -1) + step\n            // @ts-expect-error looks like a parent.\n            grandparents = parents.concat(node)\n\n            // @ts-expect-error looks like a parent.\n            while (offset > -1 && offset < node.children.length) {\n              // @ts-expect-error looks like a parent.\n              subresult = factory(node.children[offset], offset, grandparents)()\n\n              if (subresult[0] === EXIT) {\n                return subresult\n              }\n\n              offset =\n                typeof subresult[1] === 'number' ? subresult[1] : offset + step\n            }\n          }\n\n          return result\n        }\n      }\n    }\n  )\n\n/**\n * Turn a return value into a clean result.\n *\n * @param {VisitorResult} value\n *   Valid return values from visitors.\n * @returns {ActionTuple}\n *   Clean result.\n */\nfunction toResult(value) {\n  if (Array.isArray(value)) {\n    return value\n  }\n\n  if (typeof value === 'number') {\n    return [CONTINUE, value]\n  }\n\n  return [value]\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n * @typedef {import('unist-util-is').Test} Test\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n */\n\n/**\n * Check if `Child` can be a child of `Ancestor`.\n *\n * Returns the ancestor when `Child` can be a child of `Ancestor`, or returns\n * `never`.\n *\n * @template {Node} Ancestor\n *   Node type.\n * @template {Node} Child\n *   Node type.\n * @typedef {(\n *   Ancestor extends Parent\n *     ? Child extends Ancestor['children'][number]\n *       ? Ancestor\n *       : never\n *     : never\n * )} ParentsOf\n */\n\n/**\n * @template {Node} [Visited=Node]\n *   Visited node type.\n * @template {Parent} [Ancestor=Parent]\n *   Ancestor type.\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform `parent`.\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of `parent` still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Visited extends Node ? number | null : never} index\n *   Index of `node` in `parent`.\n * @param {Ancestor extends Node ? Ancestor | null : never} parent\n *   Parent of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n */\n\n/**\n * Build a typed `Visitor` function from a node and all possible parents.\n *\n * It will infer which values are passed as `node` and which as `parent`.\n *\n * @template {Node} Visited\n *   Node type.\n * @template {Parent} Ancestor\n *   Parent type.\n * @typedef {Visitor<Visited, ParentsOf<Ancestor, Visited>>} BuildVisitorFromMatch\n */\n\n/**\n * Build a typed `Visitor` function from a list of descendants and a test.\n *\n * It will infer which values are passed as `node` and which as `parent`.\n *\n * @template {Node} Descendant\n *   Node type.\n * @template {Test} Check\n *   Test type.\n * @typedef {(\n *   BuildVisitorFromMatch<\n *     import('unist-util-visit-parents/complex-types.js').Matches<Descendant, Check>,\n *     Extract<Descendant, Parent>\n *   >\n * )} BuildVisitorFromDescendants\n */\n\n/**\n * Build a typed `Visitor` function from a tree and a test.\n *\n * It will infer which values are passed as `node` and which as `parent`.\n *\n * @template {Node} [Tree=Node]\n *   Node type.\n * @template {Test} [Check=string]\n *   Test type.\n * @typedef {(\n *   BuildVisitorFromDescendants<\n *     import('unist-util-visit-parents/complex-types.js').InclusiveDescendant<Tree>,\n *     Check\n *   >\n * )} BuildVisitor\n */\n\nimport {visitParents} from 'unist-util-visit-parents'\n\n/**\n * Visit nodes.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @param tree\n *   Tree to traverse.\n * @param test\n *   `unist-util-is`-compatible test\n * @param visitor\n *   Handle each node.\n * @param reverse\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns\n *   Nothing.\n */\nexport const visit =\n  /**\n   * @type {(\n   *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: BuildVisitor<Tree, Check>, reverse?: boolean | null | undefined) => void) &\n   *   (<Tree extends Node>(tree: Tree, visitor: BuildVisitor<Tree>, reverse?: boolean | null | undefined) => void)\n   * )}\n   */\n  (\n    /**\n     * @param {Node} tree\n     * @param {Test} test\n     * @param {Visitor} visitor\n     * @param {boolean | null | undefined} [reverse]\n     * @returns {void}\n     */\n    function (tree, test, visitor, reverse) {\n      if (typeof test === 'function' && typeof visitor !== 'function') {\n        reverse = visitor\n        visitor = test\n        test = null\n      }\n\n      visitParents(tree, test, overload, reverse)\n\n      /**\n       * @param {Node} node\n       * @param {Array<Parent>} parents\n       */\n      function overload(node, parents) {\n        const parent = parents[parents.length - 1]\n        return visitor(\n          node,\n          parent ? parent.children.indexOf(node) : null,\n          parent\n        )\n      }\n    }\n  )\n\nexport {CONTINUE, EXIT, SKIP} from 'unist-util-visit-parents'\n","import {visit} from 'unist-util-visit'\n\n/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast').Element} Element\n *\n * @callback AllowElement\n * @param {Element} element\n * @param {number} index\n * @param {Element|Root} parent\n * @returns {boolean|undefined}\n *\n * @typedef Options\n * @property {Array<string>} [allowedElements]\n * @property {Array<string>} [disallowedElements=[]]\n * @property {AllowElement} [allowElement]\n * @property {boolean} [unwrapDisallowed=false]\n */\n\n/**\n * @type {import('unified').Plugin<[Options], Root>}\n */\nexport default function rehypeFilter(options) {\n  if (options.allowedElements && options.disallowedElements) {\n    throw new TypeError(\n      'Only one of `allowedElements` and `disallowedElements` should be defined'\n    )\n  }\n\n  if (\n    options.allowedElements ||\n    options.disallowedElements ||\n    options.allowElement\n  ) {\n    return (tree) => {\n      visit(tree, 'element', (node, index, parent_) => {\n        const parent = /** @type {Element|Root} */ (parent_)\n        /** @type {boolean|undefined} */\n        let remove\n\n        if (options.allowedElements) {\n          remove = !options.allowedElements.includes(node.tagName)\n        } else if (options.disallowedElements) {\n          remove = options.disallowedElements.includes(node.tagName)\n        }\n\n        if (!remove && options.allowElement && typeof index === 'number') {\n          remove = !options.allowElement(node, index, parent)\n        }\n\n        if (remove && typeof index === 'number') {\n          if (options.unwrapDisallowed && node.children) {\n            parent.children.splice(index, 1, ...node.children)\n          } else {\n            parent.children.splice(index, 1)\n          }\n\n          return index\n        }\n\n        return undefined\n      })\n    }\n  }\n}\n","/**\n * Check if the given value is *inter-element whitespace*.\n *\n * @param {unknown} thing\n *   Thing to check (typically `Node` or `string`).\n * @returns {boolean}\n *   Whether the `value` is inter-element whitespace (`boolean`): consisting of\n *   zero or more of space, tab (`\\t`), line feed (`\\n`), carriage return\n *   (`\\r`), or form feed (`\\f`).\n *   If a node is passed it must be a `Text` node, whose `value` field is\n *   checked.\n */\nexport function whitespace(thing) {\n  /** @type {string} */\n  const value =\n    // @ts-expect-error looks like a node.\n    thing && typeof thing === 'object' && thing.type === 'text'\n      ? // @ts-expect-error looks like a text.\n        thing.value || ''\n      : thing\n\n  // HTML whitespace expression.\n  // See <https://infra.spec.whatwg.org/#ascii-whitespace>.\n  return typeof value === 'string' && value.replace(/[ \\t\\n\\f\\r]/g, '') === ''\n}\n","/**\n * @typedef {import('./util/schema.js').Schema} Schema\n */\n\nimport {normalize} from './normalize.js'\nimport {DefinedInfo} from './util/defined-info.js'\nimport {Info} from './util/info.js'\n\nconst valid = /^data[-\\w.:]+$/i\nconst dash = /-[a-z]/g\nconst cap = /[A-Z]/g\n\n/**\n * @param {Schema} schema\n * @param {string} value\n * @returns {Info}\n */\nexport function find(schema, value) {\n  const normal = normalize(value)\n  let prop = value\n  let Type = Info\n\n  if (normal in schema.normal) {\n    return schema.property[schema.normal[normal]]\n  }\n\n  if (normal.length > 4 && normal.slice(0, 4) === 'data' && valid.test(value)) {\n    // Attribute or property.\n    if (value.charAt(4) === '-') {\n      // Turn it into a property.\n      const rest = value.slice(5).replace(dash, camelcase)\n      prop = 'data' + rest.charAt(0).toUpperCase() + rest.slice(1)\n    } else {\n      // Turn it into an attribute.\n      const rest = value.slice(4)\n\n      if (!dash.test(rest)) {\n        let dashes = rest.replace(cap, kebab)\n\n        if (dashes.charAt(0) !== '-') {\n          dashes = '-' + dashes\n        }\n\n        value = 'data' + dashes\n      }\n    }\n\n    Type = DefinedInfo\n  }\n\n  return new Type(prop, value)\n}\n\n/**\n * @param {string} $0\n * @returns {string}\n */\nfunction kebab($0) {\n  return '-' + $0.toLowerCase()\n}\n\n/**\n * @param {string} $0\n * @returns {string}\n */\nfunction camelcase($0) {\n  return $0.charAt(1).toUpperCase()\n}\n","/**\n * `hast` is close to `React`, but differs in a couple of cases.\n *\n * To get a React property from a hast property, check if it is in\n * `hastToReact`, if it is, then use the corresponding value,\n * otherwise, use the hast property.\n *\n * @type {Record<string, string>}\n */\nexport const hastToReact = {\n  classId: 'classID',\n  dataType: 'datatype',\n  itemId: 'itemID',\n  strokeDashArray: 'strokeDasharray',\n  strokeDashOffset: 'strokeDashoffset',\n  strokeLineCap: 'strokeLinecap',\n  strokeLineJoin: 'strokeLinejoin',\n  strokeMiterLimit: 'strokeMiterlimit',\n  typeOf: 'typeof',\n  xLinkActuate: 'xlinkActuate',\n  xLinkArcRole: 'xlinkArcrole',\n  xLinkHref: 'xlinkHref',\n  xLinkRole: 'xlinkRole',\n  xLinkShow: 'xlinkShow',\n  xLinkTitle: 'xlinkTitle',\n  xLinkType: 'xlinkType',\n  xmlnsXLink: 'xmlnsXlink'\n}\n","import StyleToObject from './index.js';\n\nexport default StyleToObject;\n","const protocols = ['http', 'https', 'mailto', 'tel']\n\n/**\n * @param {string} uri\n * @returns {string}\n */\nexport function uriTransformer(uri) {\n  const url = (uri || '').trim()\n  const first = url.charAt(0)\n\n  if (first === '#' || first === '/') {\n    return url\n  }\n\n  const colon = url.indexOf(':')\n  if (colon === -1) {\n    return url\n  }\n\n  let index = -1\n\n  while (++index < protocols.length) {\n    const protocol = protocols[index]\n\n    if (\n      colon === protocol.length &&\n      url.slice(0, protocol.length).toLowerCase() === protocol\n    ) {\n      return url\n    }\n  }\n\n  index = url.indexOf('?')\n  if (index !== -1 && colon > index) {\n    return url\n  }\n\n  index = url.indexOf('#')\n  if (index !== -1 && colon > index) {\n    return url\n  }\n\n  // eslint-disable-next-line no-script-url\n  return 'javascript:void(0)'\n}\n","/**\n * @template T\n * @typedef {import('react').ComponentType<T>} ComponentType<T>\n */\n\n/**\n * @template {import('react').ElementType} T\n * @typedef {import('react').ComponentPropsWithoutRef<T>} ComponentPropsWithoutRef<T>\n */\n\n/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('unist').Position} Position\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast').Text} Text\n * @typedef {import('hast').Comment} Comment\n * @typedef {import('hast').DocType} Doctype\n * @typedef {import('property-information').Info} Info\n * @typedef {import('property-information').Schema} Schema\n * @typedef {import('./complex-types.js').ReactMarkdownProps} ReactMarkdownProps\n *\n * @typedef Raw\n * @property {'raw'} type\n * @property {string} value\n *\n * @typedef Context\n * @property {Options} options\n * @property {Schema} schema\n * @property {number} listDepth\n *\n * @callback TransformLink\n * @param {string} href\n * @param {Array<ElementContent>} children\n * @param {string?} title\n * @returns {string}\n *\n * @callback TransformImage\n * @param {string} src\n * @param {string} alt\n * @param {string?} title\n * @returns {string}\n *\n * @typedef {import('react').HTMLAttributeAnchorTarget} TransformLinkTargetType\n *\n * @callback TransformLinkTarget\n * @param {string} href\n * @param {Array<ElementContent>} children\n * @param {string?} title\n * @returns {TransformLinkTargetType|undefined}\n *\n * @typedef {keyof JSX.IntrinsicElements} ReactMarkdownNames\n *\n * To do: is `data-sourcepos` typeable?\n *\n * @typedef {ComponentPropsWithoutRef<'code'> & ReactMarkdownProps & {inline?: boolean}} CodeProps\n * @typedef {ComponentPropsWithoutRef<'h1'> & ReactMarkdownProps & {level: number}} HeadingProps\n * @typedef {ComponentPropsWithoutRef<'li'> & ReactMarkdownProps & {checked: boolean|null, index: number, ordered: boolean}} LiProps\n * @typedef {ComponentPropsWithoutRef<'ol'> & ReactMarkdownProps & {depth: number, ordered: true}} OrderedListProps\n * @typedef {ComponentPropsWithoutRef<'td'> & ReactMarkdownProps & {style?: Record<string, unknown>, isHeader: false}} TableDataCellProps\n * @typedef {ComponentPropsWithoutRef<'th'> & ReactMarkdownProps & {style?: Record<string, unknown>, isHeader: true}} TableHeaderCellProps\n * @typedef {ComponentPropsWithoutRef<'tr'> & ReactMarkdownProps & {isHeader: boolean}} TableRowProps\n * @typedef {ComponentPropsWithoutRef<'ul'> & ReactMarkdownProps & {depth: number, ordered: false}} UnorderedListProps\n *\n * @typedef {ComponentType<CodeProps>} CodeComponent\n * @typedef {ComponentType<HeadingProps>} HeadingComponent\n * @typedef {ComponentType<LiProps>} LiComponent\n * @typedef {ComponentType<OrderedListProps>} OrderedListComponent\n * @typedef {ComponentType<TableDataCellProps>} TableDataCellComponent\n * @typedef {ComponentType<TableHeaderCellProps>} TableHeaderCellComponent\n * @typedef {ComponentType<TableRowProps>} TableRowComponent\n * @typedef {ComponentType<UnorderedListProps>} UnorderedListComponent\n *\n * @typedef SpecialComponents\n * @property {CodeComponent|ReactMarkdownNames} code\n * @property {HeadingComponent|ReactMarkdownNames} h1\n * @property {HeadingComponent|ReactMarkdownNames} h2\n * @property {HeadingComponent|ReactMarkdownNames} h3\n * @property {HeadingComponent|ReactMarkdownNames} h4\n * @property {HeadingComponent|ReactMarkdownNames} h5\n * @property {HeadingComponent|ReactMarkdownNames} h6\n * @property {LiComponent|ReactMarkdownNames} li\n * @property {OrderedListComponent|ReactMarkdownNames} ol\n * @property {TableDataCellComponent|ReactMarkdownNames} td\n * @property {TableHeaderCellComponent|ReactMarkdownNames} th\n * @property {TableRowComponent|ReactMarkdownNames} tr\n * @property {UnorderedListComponent|ReactMarkdownNames} ul\n *\n * @typedef {Partial<Omit<import('./complex-types.js').NormalComponents, keyof SpecialComponents> & SpecialComponents>} Components\n *\n * @typedef Options\n * @property {boolean} [sourcePos=false]\n * @property {boolean} [rawSourcePos=false]\n * @property {boolean} [skipHtml=false]\n * @property {boolean} [includeElementIndex=false]\n * @property {null|false|TransformLink} [transformLinkUri]\n * @property {TransformImage} [transformImageUri]\n * @property {TransformLinkTargetType|TransformLinkTarget} [linkTarget]\n * @property {Components} [components]\n */\n\nimport React from 'react'\nimport ReactIs from 'react-is'\nimport {whitespace} from 'hast-util-whitespace'\nimport {svg, find, hastToReact} from 'property-information'\nimport {stringify as spaces} from 'space-separated-tokens'\nimport {stringify as commas} from 'comma-separated-tokens'\nimport style from 'style-to-object'\nimport {uriTransformer} from './uri-transformer.js'\n\nconst own = {}.hasOwnProperty\n\n// The table-related elements that must not contain whitespace text according\n// to React.\nconst tableElements = new Set(['table', 'thead', 'tbody', 'tfoot', 'tr'])\n\n/**\n * @param {Context} context\n * @param {Element|Root} node\n */\nexport function childrenToReact(context, node) {\n  /** @type {Array<ReactNode>} */\n  const children = []\n  let childIndex = -1\n  /** @type {Comment|Doctype|Element|Raw|Text} */\n  let child\n\n  while (++childIndex < node.children.length) {\n    child = node.children[childIndex]\n\n    if (child.type === 'element') {\n      children.push(toReact(context, child, childIndex, node))\n    } else if (child.type === 'text') {\n      // Currently, a warning is triggered by react for *any* white space in\n      // tables.\n      // So we drop it.\n      // See: <https://github.com/facebook/react/pull/7081>.\n      // See: <https://github.com/facebook/react/pull/7515>.\n      // See: <https://github.com/remarkjs/remark-react/issues/64>.\n      // See: <https://github.com/remarkjs/react-markdown/issues/576>.\n      if (\n        node.type !== 'element' ||\n        !tableElements.has(node.tagName) ||\n        !whitespace(child)\n      ) {\n        children.push(child.value)\n      }\n    } else if (child.type === 'raw' && !context.options.skipHtml) {\n      // Default behavior is to show (encoded) HTML.\n      children.push(child.value)\n    }\n  }\n\n  return children\n}\n\n/**\n * @param {Context} context\n * @param {Element} node\n * @param {number} index\n * @param {Element|Root} parent\n */\nfunction toReact(context, node, index, parent) {\n  const options = context.options\n  const transform =\n    options.transformLinkUri === undefined\n      ? uriTransformer\n      : options.transformLinkUri\n  const parentSchema = context.schema\n  /** @type {ReactMarkdownNames} */\n  // @ts-expect-error assume a known HTML/SVG element.\n  const name = node.tagName\n  /** @type {Record<string, unknown>} */\n  const properties = {}\n  let schema = parentSchema\n  /** @type {string} */\n  let property\n\n  if (parentSchema.space === 'html' && name === 'svg') {\n    schema = svg\n    context.schema = schema\n  }\n\n  if (node.properties) {\n    for (property in node.properties) {\n      if (own.call(node.properties, property)) {\n        addProperty(properties, property, node.properties[property], context)\n      }\n    }\n  }\n\n  if (name === 'ol' || name === 'ul') {\n    context.listDepth++\n  }\n\n  const children = childrenToReact(context, node)\n\n  if (name === 'ol' || name === 'ul') {\n    context.listDepth--\n  }\n\n  // Restore parent schema.\n  context.schema = parentSchema\n\n  // Nodes created by plugins do not have positional info, in which case we use\n  // an object that matches the position interface.\n  const position = node.position || {\n    start: {line: null, column: null, offset: null},\n    end: {line: null, column: null, offset: null}\n  }\n  const component =\n    options.components && own.call(options.components, name)\n      ? options.components[name]\n      : name\n  const basic = typeof component === 'string' || component === React.Fragment\n\n  if (!ReactIs.isValidElementType(component)) {\n    throw new TypeError(\n      `Component for name \\`${name}\\` not defined or is not renderable`\n    )\n  }\n\n  properties.key = index\n\n  if (name === 'a' && options.linkTarget) {\n    properties.target =\n      typeof options.linkTarget === 'function'\n        ? options.linkTarget(\n            String(properties.href || ''),\n            node.children,\n            typeof properties.title === 'string' ? properties.title : null\n          )\n        : options.linkTarget\n  }\n\n  if (name === 'a' && transform) {\n    properties.href = transform(\n      String(properties.href || ''),\n      node.children,\n      typeof properties.title === 'string' ? properties.title : null\n    )\n  }\n\n  if (\n    !basic &&\n    name === 'code' &&\n    parent.type === 'element' &&\n    parent.tagName !== 'pre'\n  ) {\n    properties.inline = true\n  }\n\n  if (\n    !basic &&\n    (name === 'h1' ||\n      name === 'h2' ||\n      name === 'h3' ||\n      name === 'h4' ||\n      name === 'h5' ||\n      name === 'h6')\n  ) {\n    properties.level = Number.parseInt(name.charAt(1), 10)\n  }\n\n  if (name === 'img' && options.transformImageUri) {\n    properties.src = options.transformImageUri(\n      String(properties.src || ''),\n      String(properties.alt || ''),\n      typeof properties.title === 'string' ? properties.title : null\n    )\n  }\n\n  if (!basic && name === 'li' && parent.type === 'element') {\n    const input = getInputElement(node)\n    properties.checked =\n      input && input.properties ? Boolean(input.properties.checked) : null\n    properties.index = getElementsBeforeCount(parent, node)\n    properties.ordered = parent.tagName === 'ol'\n  }\n\n  if (!basic && (name === 'ol' || name === 'ul')) {\n    properties.ordered = name === 'ol'\n    properties.depth = context.listDepth\n  }\n\n  if (name === 'td' || name === 'th') {\n    if (properties.align) {\n      if (!properties.style) properties.style = {}\n      // @ts-expect-error assume `style` is an object\n      properties.style.textAlign = properties.align\n      delete properties.align\n    }\n\n    if (!basic) {\n      properties.isHeader = name === 'th'\n    }\n  }\n\n  if (!basic && name === 'tr' && parent.type === 'element') {\n    properties.isHeader = Boolean(parent.tagName === 'thead')\n  }\n\n  // If `sourcePos` is given, pass source information (line/column info from markdown source).\n  if (options.sourcePos) {\n    properties['data-sourcepos'] = flattenPosition(position)\n  }\n\n  if (!basic && options.rawSourcePos) {\n    properties.sourcePosition = node.position\n  }\n\n  // If `includeElementIndex` is given, pass node index info to components.\n  if (!basic && options.includeElementIndex) {\n    properties.index = getElementsBeforeCount(parent, node)\n    properties.siblingCount = getElementsBeforeCount(parent)\n  }\n\n  if (!basic) {\n    properties.node = node\n  }\n\n  // Ensure no React warnings are emitted for void elements w/ children.\n  return children.length > 0\n    ? React.createElement(component, properties, children)\n    : React.createElement(component, properties)\n}\n\n/**\n * @param {Element|Root} node\n * @returns {Element?}\n */\nfunction getInputElement(node) {\n  let index = -1\n\n  while (++index < node.children.length) {\n    const child = node.children[index]\n\n    if (child.type === 'element' && child.tagName === 'input') {\n      return child\n    }\n  }\n\n  return null\n}\n\n/**\n * @param {Element|Root} parent\n * @param {Element} [node]\n * @returns {number}\n */\nfunction getElementsBeforeCount(parent, node) {\n  let index = -1\n  let count = 0\n\n  while (++index < parent.children.length) {\n    if (parent.children[index] === node) break\n    if (parent.children[index].type === 'element') count++\n  }\n\n  return count\n}\n\n/**\n * @param {Record<string, unknown>} props\n * @param {string} prop\n * @param {unknown} value\n * @param {Context} ctx\n */\nfunction addProperty(props, prop, value, ctx) {\n  const info = find(ctx.schema, prop)\n  let result = value\n\n  // Ignore nullish and `NaN` values.\n  // eslint-disable-next-line no-self-compare\n  if (result === null || result === undefined || result !== result) {\n    return\n  }\n\n  // Accept `array`.\n  // Most props are space-separated.\n  if (Array.isArray(result)) {\n    result = info.commaSeparated ? commas(result) : spaces(result)\n  }\n\n  if (info.property === 'style' && typeof result === 'string') {\n    result = parseStyle(result)\n  }\n\n  if (info.space && info.property) {\n    props[\n      own.call(hastToReact, info.property)\n        ? hastToReact[info.property]\n        : info.property\n    ] = result\n  } else if (info.attribute) {\n    props[info.attribute] = result\n  }\n}\n\n/**\n * @param {string} value\n * @returns {Record<string, string>}\n */\nfunction parseStyle(value) {\n  /** @type {Record<string, string>} */\n  const result = {}\n\n  try {\n    style(value, iterator)\n  } catch {\n    // Silent.\n  }\n\n  return result\n\n  /**\n   * @param {string} name\n   * @param {string} v\n   */\n  function iterator(name, v) {\n    const k = name.slice(0, 4) === '-ms-' ? `ms-${name.slice(4)}` : name\n    result[k.replace(/-([a-z])/g, styleReplacer)] = v\n  }\n}\n\n/**\n * @param {unknown} _\n * @param {string} $1\n */\nfunction styleReplacer(_, $1) {\n  return $1.toUpperCase()\n}\n\n/**\n * @param {Position|{start: {line: null, column: null, offset: null}, end: {line: null, column: null, offset: null}}} pos\n * @returns {string}\n */\nfunction flattenPosition(pos) {\n  return [\n    pos.start.line,\n    ':',\n    pos.start.column,\n    '-',\n    pos.end.line,\n    ':',\n    pos.end.column\n  ]\n    .map(String)\n    .join('')\n}\n","/**\n * @typedef Options\n *   Configuration for `stringify`.\n * @property {boolean} [padLeft=true]\n *   Whether to pad a space before a token.\n * @property {boolean} [padRight=false]\n *   Whether to pad a space after a token.\n */\n\n/**\n * @typedef {Options} StringifyOptions\n *   Please use `StringifyOptions` instead.\n */\n\n/**\n * Parse comma-separated tokens to an array.\n *\n * @param {string} value\n *   Comma-separated tokens.\n * @returns {Array<string>}\n *   List of tokens.\n */\nexport function parse(value) {\n  /** @type {Array<string>} */\n  const tokens = []\n  const input = String(value || '')\n  let index = input.indexOf(',')\n  let start = 0\n  /** @type {boolean} */\n  let end = false\n\n  while (!end) {\n    if (index === -1) {\n      index = input.length\n      end = true\n    }\n\n    const token = input.slice(start, index).trim()\n\n    if (token || !end) {\n      tokens.push(token)\n    }\n\n    start = index + 1\n    index = input.indexOf(',', start)\n  }\n\n  return tokens\n}\n\n/**\n * Serialize an array of strings or numbers to comma-separated tokens.\n *\n * @param {Array<string|number>} values\n *   List of tokens.\n * @param {Options} [options]\n *   Configuration for `stringify` (optional).\n * @returns {string}\n *   Comma-separated tokens.\n */\nexport function stringify(values, options) {\n  const settings = options || {}\n\n  // Ensure the last empty entry is seen.\n  const input = values[values.length - 1] === '' ? [...values, ''] : values\n\n  return input\n    .join(\n      (settings.padRight ? ' ' : '') +\n        ',' +\n        (settings.padLeft === false ? '' : ' ')\n    )\n    .trim()\n}\n","/**\n * Parse space-separated tokens to an array of strings.\n *\n * @param {string} value\n *   Space-separated tokens.\n * @returns {Array<string>}\n *   List of tokens.\n */\nexport function parse(value) {\n  const input = String(value || '').trim()\n  return input ? input.split(/[ \\t\\n\\r\\f]+/g) : []\n}\n\n/**\n * Serialize an array of strings as space separated-tokens.\n *\n * @param {Array<string|number>} values\n *   List of tokens.\n * @returns {string}\n *   Space-separated tokens.\n */\nexport function stringify(values) {\n  return values.join(' ').trim()\n}\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('react').ReactElement<{}>} ReactElement\n * @typedef {import('unified').PluggableList} PluggableList\n * @typedef {import('hast').Root} Root\n * @typedef {import('./rehype-filter.js').Options} FilterOptions\n * @typedef {import('./ast-to-react.js').Options} TransformOptions\n *\n * @typedef CoreOptions\n * @property {string} children\n *\n * @typedef PluginOptions\n * @property {PluggableList} [remarkPlugins=[]]\n * @property {PluggableList} [rehypePlugins=[]]\n * @property {import('remark-rehype').Options | undefined} [remarkRehypeOptions={}]\n *\n * @typedef LayoutOptions\n * @property {string} [className]\n *\n * @typedef {CoreOptions & PluginOptions & LayoutOptions & FilterOptions & TransformOptions} ReactMarkdownOptions\n *\n * @typedef Deprecation\n * @property {string} id\n * @property {string} [to]\n */\n\nimport React from 'react'\nimport {VFile} from 'vfile'\nimport {unified} from 'unified'\nimport remarkParse from 'remark-parse'\nimport remarkRehype from 'remark-rehype'\nimport PropTypes from 'prop-types'\nimport {html} from 'property-information'\nimport rehypeFilter from './rehype-filter.js'\nimport {childrenToReact} from './ast-to-react.js'\n\nconst own = {}.hasOwnProperty\nconst changelog =\n  'https://github.com/remarkjs/react-markdown/blob/main/changelog.md'\n\n/** @type {Record<string, Deprecation>} */\nconst deprecated = {\n  plugins: {to: 'remarkPlugins', id: 'change-plugins-to-remarkplugins'},\n  renderers: {to: 'components', id: 'change-renderers-to-components'},\n  astPlugins: {id: 'remove-buggy-html-in-markdown-parser'},\n  allowDangerousHtml: {id: 'remove-buggy-html-in-markdown-parser'},\n  escapeHtml: {id: 'remove-buggy-html-in-markdown-parser'},\n  source: {to: 'children', id: 'change-source-to-children'},\n  allowNode: {\n    to: 'allowElement',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes'\n  },\n  allowedTypes: {\n    to: 'allowedElements',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes'\n  },\n  disallowedTypes: {\n    to: 'disallowedElements',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes'\n  },\n  includeNodeIndex: {\n    to: 'includeElementIndex',\n    id: 'change-includenodeindex-to-includeelementindex'\n  }\n}\n\n/**\n * React component to render markdown.\n *\n * @param {ReactMarkdownOptions} options\n * @returns {ReactElement}\n */\nexport function ReactMarkdown(options) {\n  for (const key in deprecated) {\n    if (own.call(deprecated, key) && own.call(options, key)) {\n      const deprecation = deprecated[key]\n      console.warn(\n        `[react-markdown] Warning: please ${\n          deprecation.to ? `use \\`${deprecation.to}\\` instead of` : 'remove'\n        } \\`${key}\\` (see <${changelog}#${deprecation.id}> for more info)`\n      )\n      delete deprecated[key]\n    }\n  }\n\n  const processor = unified()\n    .use(remarkParse)\n    .use(options.remarkPlugins || [])\n    .use(remarkRehype, {\n      ...options.remarkRehypeOptions,\n      allowDangerousHtml: true\n    })\n    .use(options.rehypePlugins || [])\n    .use(rehypeFilter, options)\n\n  const file = new VFile()\n\n  if (typeof options.children === 'string') {\n    file.value = options.children\n  } else if (options.children !== undefined && options.children !== null) {\n    console.warn(\n      `[react-markdown] Warning: please pass a string as \\`children\\` (not: \\`${options.children}\\`)`\n    )\n  }\n\n  const hastNode = processor.runSync(processor.parse(file), file)\n\n  if (hastNode.type !== 'root') {\n    throw new TypeError('Expected a `root` node')\n  }\n\n  /** @type {ReactElement} */\n  let result = React.createElement(\n    React.Fragment,\n    {},\n    childrenToReact({options, schema: html, listDepth: 0}, hastNode)\n  )\n\n  if (options.className) {\n    result = React.createElement('div', {className: options.className}, result)\n  }\n\n  return result\n}\n\nReactMarkdown.propTypes = {\n  // Core options:\n  children: PropTypes.string,\n  // Layout options:\n  className: PropTypes.string,\n  // Filter options:\n  allowElement: PropTypes.func,\n  allowedElements: PropTypes.arrayOf(PropTypes.string),\n  disallowedElements: PropTypes.arrayOf(PropTypes.string),\n  unwrapDisallowed: PropTypes.bool,\n  // Plugin options:\n  remarkPlugins: PropTypes.arrayOf(\n    PropTypes.oneOfType([\n      PropTypes.object,\n      PropTypes.func,\n      PropTypes.arrayOf(\n        PropTypes.oneOfType([\n          PropTypes.bool,\n          PropTypes.string,\n          PropTypes.object,\n          PropTypes.func,\n          PropTypes.arrayOf(\n            // prettier-ignore\n            // type-coverage:ignore-next-line\n            PropTypes.any\n          )\n        ])\n      )\n    ])\n  ),\n  rehypePlugins: PropTypes.arrayOf(\n    PropTypes.oneOfType([\n      PropTypes.object,\n      PropTypes.func,\n      PropTypes.arrayOf(\n        PropTypes.oneOfType([\n          PropTypes.bool,\n          PropTypes.string,\n          PropTypes.object,\n          PropTypes.func,\n          PropTypes.arrayOf(\n            // prettier-ignore\n            // type-coverage:ignore-next-line\n            PropTypes.any\n          )\n        ])\n      )\n    ])\n  ),\n  // Transform options:\n  sourcePos: PropTypes.bool,\n  rawSourcePos: PropTypes.bool,\n  skipHtml: PropTypes.bool,\n  includeElementIndex: PropTypes.bool,\n  transformLinkUri: PropTypes.oneOfType([PropTypes.func, PropTypes.bool]),\n  linkTarget: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  transformImageUri: PropTypes.func,\n  components: PropTypes.object\n}\n","/**\n * Count how often a character (or substring) is used in a string.\n *\n * @param {string} value\n *   Value to search in.\n * @param {string} character\n *   Character (or substring) to look for.\n * @return {number}\n *   Number of times `character` occurred in `value`.\n */\nexport function ccount(value, character) {\n  const source = String(value)\n\n  if (typeof character !== 'string') {\n    throw new TypeError('Expected character')\n  }\n\n  let count = 0\n  let index = source.indexOf(character)\n\n  while (index !== -1) {\n    count++\n    index = source.indexOf(character, index + character.length)\n  }\n\n  return count\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\n\nconst unicodePunctuationInternal = regexCheck(/\\p{P}/u)\n\n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlpha = regexCheck(/[A-Za-z]/)\n\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/)\n\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/)\n\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < 32 || code === 127)\n  )\n}\n\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiDigit = regexCheck(/\\d/)\n\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/)\n\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/)\n\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEnding(code) {\n  return code !== null && code < -2\n}\n\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEndingOrSpace(code) {\n  return code !== null && (code < 0 || code === 32)\n}\n\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownSpace(code) {\n  return code === -2 || code === -1 || code === 32\n}\n\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function unicodePunctuation(code) {\n  return asciiPunctuation(code) || unicodePunctuationInternal(code)\n}\n\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const unicodeWhitespace = regexCheck(/\\s/)\n\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n * @returns {(code: Code) => boolean}\n */\nfunction regexCheck(regex) {\n  return check\n\n  /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code\n   *   Character code.\n   * @returns {boolean}\n   *   Whether the character code matches the bound regex.\n   */\n  function check(code) {\n    return code !== null && code > -1 && regex.test(String.fromCharCode(code))\n  }\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n */\n\n/**\n * @template Fn\n * @template Fallback\n * @typedef {Fn extends (value: any) => value is infer Thing ? Thing : Fallback} Predicate\n */\n\n/**\n * @callback Check\n *   Check that an arbitrary value is a node.\n * @param {unknown} this\n *   The given context.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean}\n *   Whether this is a node and passes a test.\n *\n * @typedef {Record<string, unknown> | Node} Props\n *   Object to check for equivalence.\n *\n *   Note: `Node` is included as it is common but is not indexable.\n *\n * @typedef {Array<Props | TestFunction | string> | Props | TestFunction | string | null | undefined} Test\n *   Check for an arbitrary node.\n *\n * @callback TestFunction\n *   Check if a node passes a test.\n * @param {unknown} this\n *   The given context.\n * @param {Node} node\n *   A node.\n * @param {number | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean | undefined | void}\n *   Whether this node passes the test.\n *\n *   Note: `void` is included until TS sees no return as `undefined`.\n */\n\n/**\n * Check if `node` is a `Node` and whether it passes the given test.\n *\n * @param {unknown} node\n *   Thing to check, typically `Node`.\n * @param {Test} test\n *   A check for a specific node.\n * @param {number | null | undefined} index\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} parent\n *   The node’s parent.\n * @param {unknown} context\n *   Context object (`this`) to pass to `test` functions.\n * @returns {boolean}\n *   Whether `node` is a node and passes a test.\n */\nexport const is =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((node?: null | undefined) => false) &\n   *   ((node: unknown, test?: null | undefined, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((node: unknown, test?: Test, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => boolean)\n   * )}\n   */\n  (\n    /**\n     * @param {unknown} [node]\n     * @param {Test} [test]\n     * @param {number | null | undefined} [index]\n     * @param {Parent | null | undefined} [parent]\n     * @param {unknown} [context]\n     * @returns {boolean}\n     */\n    // eslint-disable-next-line max-params\n    function (node, test, index, parent, context) {\n      const check = convert(test)\n\n      if (\n        index !== undefined &&\n        index !== null &&\n        (typeof index !== 'number' ||\n          index < 0 ||\n          index === Number.POSITIVE_INFINITY)\n      ) {\n        throw new Error('Expected positive finite index')\n      }\n\n      if (\n        parent !== undefined &&\n        parent !== null &&\n        (!is(parent) || !parent.children)\n      ) {\n        throw new Error('Expected parent node')\n      }\n\n      if (\n        (parent === undefined || parent === null) !==\n        (index === undefined || index === null)\n      ) {\n        throw new Error('Expected both parent and index')\n      }\n\n      return looksLikeANode(node)\n        ? check.call(context, node, index, parent)\n        : false\n    }\n  )\n\n/**\n * Generate an assertion from a test.\n *\n * Useful if you’re going to test many nodes, for example when creating a\n * utility where something else passes a compatible test.\n *\n * The created function is a bit faster because it expects valid input only:\n * a `node`, `index`, and `parent`.\n *\n * @param {Test} test\n *   *   when nullish, checks if `node` is a `Node`.\n *   *   when `string`, works like passing `(node) => node.type === test`.\n *   *   when `function` checks if function passed the node is true.\n *   *   when `object`, checks that all keys in test are in node, and that they have (strictly) equal values.\n *   *   when `array`, checks if any one of the subtests pass.\n * @returns {Check}\n *   An assertion.\n */\nexport const convert =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((test?: null | undefined) => (node?: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((test?: Test) => Check)\n   * )}\n   */\n  (\n    /**\n     * @param {Test} [test]\n     * @returns {Check}\n     */\n    function (test) {\n      if (test === null || test === undefined) {\n        return ok\n      }\n\n      if (typeof test === 'function') {\n        return castFactory(test)\n      }\n\n      if (typeof test === 'object') {\n        return Array.isArray(test) ? anyFactory(test) : propsFactory(test)\n      }\n\n      if (typeof test === 'string') {\n        return typeFactory(test)\n      }\n\n      throw new Error('Expected function, string, or object as test')\n    }\n  )\n\n/**\n * @param {Array<Props | TestFunction | string>} tests\n * @returns {Check}\n */\nfunction anyFactory(tests) {\n  /** @type {Array<Check>} */\n  const checks = []\n  let index = -1\n\n  while (++index < tests.length) {\n    checks[index] = convert(tests[index])\n  }\n\n  return castFactory(any)\n\n  /**\n   * @this {unknown}\n   * @type {TestFunction}\n   */\n  function any(...parameters) {\n    let index = -1\n\n    while (++index < checks.length) {\n      if (checks[index].apply(this, parameters)) return true\n    }\n\n    return false\n  }\n}\n\n/**\n * Turn an object into a test for a node with a certain fields.\n *\n * @param {Props} check\n * @returns {Check}\n */\nfunction propsFactory(check) {\n  const checkAsRecord = /** @type {Record<string, unknown>} */ (check)\n\n  return castFactory(all)\n\n  /**\n   * @param {Node} node\n   * @returns {boolean}\n   */\n  function all(node) {\n    const nodeAsRecord = /** @type {Record<string, unknown>} */ (\n      /** @type {unknown} */ (node)\n    )\n\n    /** @type {string} */\n    let key\n\n    for (key in check) {\n      if (nodeAsRecord[key] !== checkAsRecord[key]) return false\n    }\n\n    return true\n  }\n}\n\n/**\n * Turn a string into a test for a node with a certain type.\n *\n * @param {string} check\n * @returns {Check}\n */\nfunction typeFactory(check) {\n  return castFactory(type)\n\n  /**\n   * @param {Node} node\n   */\n  function type(node) {\n    return node && node.type === check\n  }\n}\n\n/**\n * Turn a custom test into a test for a node that passes that test.\n *\n * @param {TestFunction} testFunction\n * @returns {Check}\n */\nfunction castFactory(testFunction) {\n  return check\n\n  /**\n   * @this {unknown}\n   * @type {Check}\n   */\n  function check(value, index, parent) {\n    return Boolean(\n      looksLikeANode(value) &&\n        testFunction.call(\n          this,\n          value,\n          typeof index === 'number' ? index : undefined,\n          parent || undefined\n        )\n    )\n  }\n}\n\nfunction ok() {\n  return true\n}\n\n/**\n * @param {unknown} value\n * @returns {value is Node}\n */\nfunction looksLikeANode(value) {\n  return value !== null && typeof value === 'object' && 'type' in value\n}\n","/**\n * @typedef {import('unist').Node} UnistNode\n * @typedef {import('unist').Parent} UnistParent\n */\n\n/**\n * @typedef {Exclude<import('unist-util-is').Test, undefined> | undefined} Test\n *   Test from `unist-util-is`.\n *\n *   Note: we have remove and add `undefined`, because otherwise when generating\n *   automatic `.d.ts` files, TS tries to flatten paths from a local perspective,\n *   which doesn’t work when publishing on npm.\n */\n\n/**\n * @typedef {(\n *   Fn extends (value: any) => value is infer Thing\n *   ? Thing\n *   : Fallback\n * )} Predicate\n *   Get the value of a type guard `Fn`.\n * @template Fn\n *   Value; typically function that is a type guard (such as `(x): x is Y`).\n * @template Fallback\n *   Value to yield if `Fn` is not a type guard.\n */\n\n/**\n * @typedef {(\n *   Check extends null | undefined // No test.\n *   ? Value\n *   : Value extends {type: Check} // String (type) test.\n *   ? Value\n *   : Value extends Check // Partial test.\n *   ? Value\n *   : Check extends Function // Function test.\n *   ? Predicate<Check, Value> extends Value\n *     ? Predicate<Check, Value>\n *     : never\n *   : never // Some other test?\n * )} MatchesOne\n *   Check whether a node matches a primitive check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test, but not arrays.\n */\n\n/**\n * @typedef {(\n *   Check extends Array<any>\n *   ? MatchesOne<Value, Check[keyof Check]>\n *   : MatchesOne<Value, Check>\n * )} Matches\n *   Check whether a node matches a check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test.\n */\n\n/**\n * @typedef {0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10} Uint\n *   Number; capped reasonably.\n */\n\n/**\n * @typedef {I extends 0 ? 1 : I extends 1 ? 2 : I extends 2 ? 3 : I extends 3 ? 4 : I extends 4 ? 5 : I extends 5 ? 6 : I extends 6 ? 7 : I extends 7 ? 8 : I extends 8 ? 9 : 10} Increment\n *   Increment a number in the type system.\n * @template {Uint} [I=0]\n *   Index.\n */\n\n/**\n * @typedef {(\n *   Node extends UnistParent\n *   ? Node extends {children: Array<infer Children>}\n *     ? Child extends Children ? Node : never\n *     : never\n *   : never\n * )} InternalParent\n *   Collect nodes that can be parents of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {InternalParent<InclusiveDescendant<Tree>, Child>} Parent\n *   Collect nodes in `Tree` that can be parents of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Depth extends Max\n *   ? never\n *   :\n *     | InternalParent<Node, Child>\n *     | InternalAncestor<Node, InternalParent<Node, Child>, Max, Increment<Depth>>\n * )} InternalAncestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {InternalAncestor<InclusiveDescendant<Tree>, Child>} Ancestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Tree extends UnistParent\n *     ? Depth extends Max\n *       ? Tree\n *       : Tree | InclusiveDescendant<Tree['children'][number], Max, Increment<Depth>>\n *     : Tree\n * )} InclusiveDescendant\n *   Collect all (inclusive) descendants of `Tree`.\n *\n *   > 👉 **Note**: for performance reasons, this seems to be the fastest way to\n *   > recurse without actually running into an infinite loop, which the\n *   > previous version did.\n *   >\n *   > Practically, a max of `2` is typically enough assuming a `Root` is\n *   > passed, but it doesn’t improve performance.\n *   > It gets higher with `List > ListItem > Table > TableRow > TableCell`.\n *   > Using up to `10` doesn’t hurt or help either.\n * @template {UnistNode} Tree\n *   Tree type.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {'skip' | boolean} Action\n *   Union of the action types.\n *\n * @typedef {number} Index\n *   Move to the sibling at `index` next (after node itself is completely\n *   traversed).\n *\n *   Useful if mutating the tree, such as removing the node the visitor is\n *   currently on, or any of its previous siblings.\n *   Results less than 0 or greater than or equal to `children.length` stop\n *   traversing the parent.\n *\n * @typedef {[(Action | null | undefined | void)?, (Index | null | undefined)?]} ActionTuple\n *   List with one or two values, the first an action, the second an index.\n *\n * @typedef {Action | ActionTuple | Index | null | undefined | void} VisitorResult\n *   Any value that can be returned from a visitor.\n */\n\n/**\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform the parent of node (the last of `ancestors`).\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of an ancestor still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Array<VisitedParents>} ancestors\n *   Ancestors of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n * @template {UnistNode} [Visited=UnistNode]\n *   Visited node type.\n * @template {UnistParent} [VisitedParents=UnistParent]\n *   Ancestor type.\n */\n\n/**\n * @typedef {Visitor<Matches<InclusiveDescendant<Tree>, Check>, Ancestor<Tree, Matches<InclusiveDescendant<Tree>, Check>>>} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parents`.\n * @template {UnistNode} [Tree=UnistNode]\n *   Tree type.\n * @template {Test} [Check=Test]\n *   Test type.\n */\n\nimport {convert} from 'unist-util-is'\nimport {color} from 'unist-util-visit-parents/do-not-use-color'\n\n/** @type {Readonly<ActionTuple>} */\nconst empty = []\n\n/**\n * Continue traversing as normal.\n */\nexport const CONTINUE = true\n\n/**\n * Stop traversing immediately.\n */\nexport const EXIT = false\n\n/**\n * Do not traverse this node’s children.\n */\nexport const SKIP = 'skip'\n\n/**\n * Visit nodes, with ancestral information.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @overload\n * @param {Tree} tree\n * @param {Check} check\n * @param {BuildVisitor<Tree, Check>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @overload\n * @param {Tree} tree\n * @param {BuildVisitor<Tree>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @param {UnistNode} tree\n *   Tree to traverse.\n * @param {Visitor | Test} test\n *   `unist-util-is`-compatible test\n * @param {Visitor | boolean | null | undefined} [visitor]\n *   Handle each node.\n * @param {boolean | null | undefined} [reverse]\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns {undefined}\n *   Nothing.\n *\n * @template {UnistNode} Tree\n *   Node type.\n * @template {Test} Check\n *   `unist-util-is`-compatible test.\n */\nexport function visitParents(tree, test, visitor, reverse) {\n  /** @type {Test} */\n  let check\n\n  if (typeof test === 'function' && typeof visitor !== 'function') {\n    reverse = visitor\n    // @ts-expect-error no visitor given, so `visitor` is test.\n    visitor = test\n  } else {\n    // @ts-expect-error visitor given, so `test` isn’t a visitor.\n    check = test\n  }\n\n  const is = convert(check)\n  const step = reverse ? -1 : 1\n\n  factory(tree, undefined, [])()\n\n  /**\n   * @param {UnistNode} node\n   * @param {number | undefined} index\n   * @param {Array<UnistParent>} parents\n   */\n  function factory(node, index, parents) {\n    const value = /** @type {Record<string, unknown>} */ (\n      node && typeof node === 'object' ? node : {}\n    )\n\n    if (typeof value.type === 'string') {\n      const name =\n        // `hast`\n        typeof value.tagName === 'string'\n          ? value.tagName\n          : // `xast`\n          typeof value.name === 'string'\n          ? value.name\n          : undefined\n\n      Object.defineProperty(visit, 'name', {\n        value:\n          'node (' + color(node.type + (name ? '<' + name + '>' : '')) + ')'\n      })\n    }\n\n    return visit\n\n    function visit() {\n      /** @type {Readonly<ActionTuple>} */\n      let result = empty\n      /** @type {Readonly<ActionTuple>} */\n      let subresult\n      /** @type {number} */\n      let offset\n      /** @type {Array<UnistParent>} */\n      let grandparents\n\n      if (!test || is(node, index, parents[parents.length - 1] || undefined)) {\n        // @ts-expect-error: `visitor` is now a visitor.\n        result = toResult(visitor(node, parents))\n\n        if (result[0] === EXIT) {\n          return result\n        }\n      }\n\n      if ('children' in node && node.children) {\n        const nodeAsParent = /** @type {UnistParent} */ (node)\n\n        if (nodeAsParent.children && result[0] !== SKIP) {\n          offset = (reverse ? nodeAsParent.children.length : -1) + step\n          grandparents = parents.concat(nodeAsParent)\n\n          while (offset > -1 && offset < nodeAsParent.children.length) {\n            const child = nodeAsParent.children[offset]\n\n            subresult = factory(child, offset, grandparents)()\n\n            if (subresult[0] === EXIT) {\n              return subresult\n            }\n\n            offset =\n              typeof subresult[1] === 'number' ? subresult[1] : offset + step\n          }\n        }\n      }\n\n      return result\n    }\n  }\n}\n\n/**\n * Turn a return value into a clean result.\n *\n * @param {VisitorResult} value\n *   Valid return values from visitors.\n * @returns {Readonly<ActionTuple>}\n *   Clean result.\n */\nfunction toResult(value) {\n  if (Array.isArray(value)) {\n    return value\n  }\n\n  if (typeof value === 'number') {\n    return [CONTINUE, value]\n  }\n\n  return value === null || value === undefined ? empty : [value]\n}\n","/**\n * @typedef {import('mdast').Nodes} Nodes\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').Text} Text\n * @typedef {import('unist-util-visit-parents').Test} Test\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n */\n\n/**\n * @typedef RegExpMatchObject\n *   Info on the match.\n * @property {number} index\n *   The index of the search at which the result was found.\n * @property {string} input\n *   A copy of the search string in the text node.\n * @property {[...Array<Parents>, Text]} stack\n *   All ancestors of the text node, where the last node is the text itself.\n *\n * @typedef {RegExp | string} Find\n *   Pattern to find.\n *\n *   Strings are escaped and then turned into global expressions.\n *\n * @typedef {Array<FindAndReplaceTuple>} FindAndReplaceList\n *   Several find and replaces, in array form.\n *\n * @typedef {[Find, Replace?]} FindAndReplaceTuple\n *   Find and replace in tuple form.\n *\n * @typedef {ReplaceFunction | string | null | undefined} Replace\n *   Thing to replace with.\n *\n * @callback ReplaceFunction\n *   Callback called when a search matches.\n * @param {...any} parameters\n *   The parameters are the result of corresponding search expression:\n *\n *   * `value` (`string`) — whole match\n *   * `...capture` (`Array<string>`) — matches from regex capture groups\n *   * `match` (`RegExpMatchObject`) — info on the match\n * @returns {Array<PhrasingContent> | PhrasingContent | string | false | null | undefined}\n *   Thing to replace with.\n *\n *   * when `null`, `undefined`, `''`, remove the match\n *   * …or when `false`, do not replace at all\n *   * …or when `string`, replace with a text node of that value\n *   * …or when `Node` or `Array<Node>`, replace with those nodes\n *\n * @typedef {[RegExp, ReplaceFunction]} Pair\n *   Normalized find and replace.\n *\n * @typedef {Array<Pair>} Pairs\n *   All find and replaced.\n *\n * @typedef Options\n *   Configuration.\n * @property {Test | null | undefined} [ignore]\n *   Test for which nodes to ignore (optional).\n */\n\nimport escape from 'escape-string-regexp'\nimport {visitParents} from 'unist-util-visit-parents'\nimport {convert} from 'unist-util-is'\n\n/**\n * Find patterns in a tree and replace them.\n *\n * The algorithm searches the tree in *preorder* for complete values in `Text`\n * nodes.\n * Partial matches are not supported.\n *\n * @param {Nodes} tree\n *   Tree to change.\n * @param {FindAndReplaceList | FindAndReplaceTuple} list\n *   Patterns to find.\n * @param {Options | null | undefined} [options]\n *   Configuration (when `find` is not `Find`).\n * @returns {undefined}\n *   Nothing.\n */\nexport function findAndReplace(tree, list, options) {\n  const settings = options || {}\n  const ignored = convert(settings.ignore || [])\n  const pairs = toPairs(list)\n  let pairIndex = -1\n\n  while (++pairIndex < pairs.length) {\n    visitParents(tree, 'text', visitor)\n  }\n\n  /** @type {import('unist-util-visit-parents').BuildVisitor<Root, 'text'>} */\n  function visitor(node, parents) {\n    let index = -1\n    /** @type {Parents | undefined} */\n    let grandparent\n\n    while (++index < parents.length) {\n      const parent = parents[index]\n      /** @type {Array<Nodes> | undefined} */\n      const siblings = grandparent ? grandparent.children : undefined\n\n      if (\n        ignored(\n          parent,\n          siblings ? siblings.indexOf(parent) : undefined,\n          grandparent\n        )\n      ) {\n        return\n      }\n\n      grandparent = parent\n    }\n\n    if (grandparent) {\n      return handler(node, parents)\n    }\n  }\n\n  /**\n   * Handle a text node which is not in an ignored parent.\n   *\n   * @param {Text} node\n   *   Text node.\n   * @param {Array<Parents>} parents\n   *   Parents.\n   * @returns {VisitorResult}\n   *   Result.\n   */\n  function handler(node, parents) {\n    const parent = parents[parents.length - 1]\n    const find = pairs[pairIndex][0]\n    const replace = pairs[pairIndex][1]\n    let start = 0\n    /** @type {Array<Nodes>} */\n    const siblings = parent.children\n    const index = siblings.indexOf(node)\n    let change = false\n    /** @type {Array<PhrasingContent>} */\n    let nodes = []\n\n    find.lastIndex = 0\n\n    let match = find.exec(node.value)\n\n    while (match) {\n      const position = match.index\n      /** @type {RegExpMatchObject} */\n      const matchObject = {\n        index: match.index,\n        input: match.input,\n        stack: [...parents, node]\n      }\n      let value = replace(...match, matchObject)\n\n      if (typeof value === 'string') {\n        value = value.length > 0 ? {type: 'text', value} : undefined\n      }\n\n      // It wasn’t a match after all.\n      if (value === false) {\n        // False acts as if there was no match.\n        // So we need to reset `lastIndex`, which currently being at the end of\n        // the current match, to the beginning.\n        find.lastIndex = position + 1\n      } else {\n        if (start !== position) {\n          nodes.push({\n            type: 'text',\n            value: node.value.slice(start, position)\n          })\n        }\n\n        if (Array.isArray(value)) {\n          nodes.push(...value)\n        } else if (value) {\n          nodes.push(value)\n        }\n\n        start = position + match[0].length\n        change = true\n      }\n\n      if (!find.global) {\n        break\n      }\n\n      match = find.exec(node.value)\n    }\n\n    if (change) {\n      if (start < node.value.length) {\n        nodes.push({type: 'text', value: node.value.slice(start)})\n      }\n\n      parent.children.splice(index, 1, ...nodes)\n    } else {\n      nodes = [node]\n    }\n\n    return index + nodes.length\n  }\n}\n\n/**\n * Turn a tuple or a list of tuples into pairs.\n *\n * @param {FindAndReplaceList | FindAndReplaceTuple} tupleOrList\n *   Schema.\n * @returns {Pairs}\n *   Clean pairs.\n */\nfunction toPairs(tupleOrList) {\n  /** @type {Pairs} */\n  const result = []\n\n  if (!Array.isArray(tupleOrList)) {\n    throw new TypeError('Expected find and replace tuple or list of tuples')\n  }\n\n  /** @type {FindAndReplaceList} */\n  // @ts-expect-error: correct.\n  const list =\n    !tupleOrList[0] || Array.isArray(tupleOrList[0])\n      ? tupleOrList\n      : [tupleOrList]\n\n  let index = -1\n\n  while (++index < list.length) {\n    const tuple = list[index]\n    result.push([toExpression(tuple[0]), toFunction(tuple[1])])\n  }\n\n  return result\n}\n\n/**\n * Turn a find into an expression.\n *\n * @param {Find} find\n *   Find.\n * @returns {RegExp}\n *   Expression.\n */\nfunction toExpression(find) {\n  return typeof find === 'string' ? new RegExp(escape(find), 'g') : find\n}\n\n/**\n * Turn a replace into a function.\n *\n * @param {Replace} replace\n *   Replace.\n * @returns {ReplaceFunction}\n *   Function.\n */\nfunction toFunction(replace) {\n  return typeof replace === 'function'\n    ? replace\n    : function () {\n        return replace\n      }\n}\n","export default function escapeStringRegexp(string) {\n\tif (typeof string !== 'string') {\n\t\tthrow new TypeError('Expected a string');\n\t}\n\n\t// Escape characters with special meaning either inside or outside character sets.\n\t// Use a simple backslash escape when it’s always valid, and a `\\xnn` escape when the simpler form would be disallowed by Unicode patterns’ stricter grammar.\n\treturn string\n\t\t.replace(/[|\\\\{}()[\\]^$+*?.]/g, '\\\\$&')\n\t\t.replace(/-/g, '\\\\x2d');\n}\n","/**\n * @typedef {import('mdast').Link} Link\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n *\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-from-markdown').Transform} FromMarkdownTransform\n *\n * @typedef {import('mdast-util-to-markdown').ConstructName} ConstructName\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n *\n * @typedef {import('mdast-util-find-and-replace').RegExpMatchObject} RegExpMatchObject\n * @typedef {import('mdast-util-find-and-replace').ReplaceFunction} ReplaceFunction\n */\n\nimport {ccount} from 'ccount'\nimport {ok as assert} from 'devlop'\nimport {unicodePunctuation, unicodeWhitespace} from 'micromark-util-character'\nimport {findAndReplace} from 'mdast-util-find-and-replace'\n\n/** @type {ConstructName} */\nconst inConstruct = 'phrasing'\n/** @type {Array<ConstructName>} */\nconst notInConstruct = ['autolink', 'link', 'image', 'label']\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM autolink\n * literals in markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM autolink literals.\n */\nexport function gfmAutolinkLiteralFromMarkdown() {\n  return {\n    transforms: [transformGfmAutolinkLiterals],\n    enter: {\n      literalAutolink: enterLiteralAutolink,\n      literalAutolinkEmail: enterLiteralAutolinkValue,\n      literalAutolinkHttp: enterLiteralAutolinkValue,\n      literalAutolinkWww: enterLiteralAutolinkValue\n    },\n    exit: {\n      literalAutolink: exitLiteralAutolink,\n      literalAutolinkEmail: exitLiteralAutolinkEmail,\n      literalAutolinkHttp: exitLiteralAutolinkHttp,\n      literalAutolinkWww: exitLiteralAutolinkWww\n    }\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM autolink\n * literals in markdown.\n *\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM autolink literals.\n */\nexport function gfmAutolinkLiteralToMarkdown() {\n  return {\n    unsafe: [\n      {\n        character: '@',\n        before: '[+\\\\-.\\\\w]',\n        after: '[\\\\-.\\\\w]',\n        inConstruct,\n        notInConstruct\n      },\n      {\n        character: '.',\n        before: '[Ww]',\n        after: '[\\\\-.\\\\w]',\n        inConstruct,\n        notInConstruct\n      },\n      {\n        character: ':',\n        before: '[ps]',\n        after: '\\\\/',\n        inConstruct,\n        notInConstruct\n      }\n    ]\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterLiteralAutolink(token) {\n  this.enter({type: 'link', title: null, url: '', children: []}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterLiteralAutolinkValue(token) {\n  this.config.enter.autolinkProtocol.call(this, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolinkHttp(token) {\n  this.config.exit.autolinkProtocol.call(this, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolinkWww(token) {\n  this.config.exit.data.call(this, token)\n  const node = this.stack[this.stack.length - 1]\n  assert(node.type === 'link')\n  node.url = 'http://' + this.sliceSerialize(token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolinkEmail(token) {\n  this.config.exit.autolinkEmail.call(this, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolink(token) {\n  this.exit(token)\n}\n\n/** @type {FromMarkdownTransform} */\nfunction transformGfmAutolinkLiterals(tree) {\n  findAndReplace(\n    tree,\n    [\n      [/(https?:\\/\\/|www(?=\\.))([-.\\w]+)([^ \\t\\r\\n]*)/gi, findUrl],\n      [/([-.\\w+]+)@([-\\w]+(?:\\.[-\\w]+)+)/g, findEmail]\n    ],\n    {ignore: ['link', 'linkReference']}\n  )\n}\n\n/**\n * @type {ReplaceFunction}\n * @param {string} _\n * @param {string} protocol\n * @param {string} domain\n * @param {string} path\n * @param {RegExpMatchObject} match\n * @returns {Array<PhrasingContent> | Link | false}\n */\n// eslint-disable-next-line max-params\nfunction findUrl(_, protocol, domain, path, match) {\n  let prefix = ''\n\n  // Not an expected previous character.\n  if (!previous(match)) {\n    return false\n  }\n\n  // Treat `www` as part of the domain.\n  if (/^w/i.test(protocol)) {\n    domain = protocol + domain\n    protocol = ''\n    prefix = 'http://'\n  }\n\n  if (!isCorrectDomain(domain)) {\n    return false\n  }\n\n  const parts = splitUrl(domain + path)\n\n  if (!parts[0]) return false\n\n  /** @type {Link} */\n  const result = {\n    type: 'link',\n    title: null,\n    url: prefix + protocol + parts[0],\n    children: [{type: 'text', value: protocol + parts[0]}]\n  }\n\n  if (parts[1]) {\n    return [result, {type: 'text', value: parts[1]}]\n  }\n\n  return result\n}\n\n/**\n * @type {ReplaceFunction}\n * @param {string} _\n * @param {string} atext\n * @param {string} label\n * @param {RegExpMatchObject} match\n * @returns {Link | false}\n */\nfunction findEmail(_, atext, label, match) {\n  if (\n    // Not an expected previous character.\n    !previous(match, true) ||\n    // Label ends in not allowed character.\n    /[-\\d_]$/.test(label)\n  ) {\n    return false\n  }\n\n  return {\n    type: 'link',\n    title: null,\n    url: 'mailto:' + atext + '@' + label,\n    children: [{type: 'text', value: atext + '@' + label}]\n  }\n}\n\n/**\n * @param {string} domain\n * @returns {boolean}\n */\nfunction isCorrectDomain(domain) {\n  const parts = domain.split('.')\n\n  if (\n    parts.length < 2 ||\n    (parts[parts.length - 1] &&\n      (/_/.test(parts[parts.length - 1]) ||\n        !/[a-zA-Z\\d]/.test(parts[parts.length - 1]))) ||\n    (parts[parts.length - 2] &&\n      (/_/.test(parts[parts.length - 2]) ||\n        !/[a-zA-Z\\d]/.test(parts[parts.length - 2])))\n  ) {\n    return false\n  }\n\n  return true\n}\n\n/**\n * @param {string} url\n * @returns {[string, string | undefined]}\n */\nfunction splitUrl(url) {\n  const trailExec = /[!\"&'),.:;<>?\\]}]+$/.exec(url)\n\n  if (!trailExec) {\n    return [url, undefined]\n  }\n\n  url = url.slice(0, trailExec.index)\n\n  let trail = trailExec[0]\n  let closingParenIndex = trail.indexOf(')')\n  const openingParens = ccount(url, '(')\n  let closingParens = ccount(url, ')')\n\n  while (closingParenIndex !== -1 && openingParens > closingParens) {\n    url += trail.slice(0, closingParenIndex + 1)\n    trail = trail.slice(closingParenIndex + 1)\n    closingParenIndex = trail.indexOf(')')\n    closingParens++\n  }\n\n  return [url, trail]\n}\n\n/**\n * @param {RegExpMatchObject} match\n * @param {boolean | null | undefined} [email=false]\n * @returns {boolean}\n */\nfunction previous(match, email) {\n  const code = match.input.charCodeAt(match.index - 1)\n\n  return (\n    (match.index === 0 ||\n      unicodeWhitespace(code) ||\n      unicodePunctuation(code)) &&\n    (!email || code !== 47)\n  )\n}\n","/**\n * Normalize an identifier (as found in references, definitions).\n *\n * Collapses markdown whitespace, trim, and then lower- and uppercase.\n *\n * Some characters are considered “uppercase”, such as U+03F4 (`ϴ`), but if their\n * lowercase counterpart (U+03B8 (`θ`)) is uppercased will result in a different\n * uppercase character (U+0398 (`Θ`)).\n * So, to get a canonical form, we perform both lower- and uppercase.\n *\n * Using uppercase last makes sure keys will never interact with default\n * prototypal values (such as `constructor`): nothing in the prototype of\n * `Object` is uppercase.\n *\n * @param {string} value\n *   Identifier to normalize.\n * @returns {string}\n *   Normalized identifier.\n */\nexport function normalizeIdentifier(value) {\n  return (\n    value\n      // Collapse markdown whitespace.\n      .replace(/[\\t\\n\\r ]+/g, ' ')\n      // Trim.\n      .replace(/^ | $/g, '')\n      // Some characters are considered “uppercase”, but if their lowercase\n      // counterpart is uppercased will result in a different uppercase\n      // character.\n      // Hence, to get that form, we perform both lower- and uppercase.\n      // Upper case makes sure keys will not interact with default prototypal\n      // methods: no method is uppercase.\n      .toLowerCase()\n      .toUpperCase()\n  )\n}\n","/**\n * @typedef {import('mdast').FootnoteDefinition} FootnoteDefinition\n * @typedef {import('mdast').FootnoteReference} FootnoteReference\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Map} Map\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n */\n\nimport {ok as assert} from 'devlop'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\n\nfootnoteReference.peek = footnoteReferencePeek\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM footnotes\n * in markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown`.\n */\nexport function gfmFootnoteFromMarkdown() {\n  return {\n    enter: {\n      gfmFootnoteDefinition: enterFootnoteDefinition,\n      gfmFootnoteDefinitionLabelString: enterFootnoteDefinitionLabelString,\n      gfmFootnoteCall: enterFootnoteCall,\n      gfmFootnoteCallString: enterFootnoteCallString\n    },\n    exit: {\n      gfmFootnoteDefinition: exitFootnoteDefinition,\n      gfmFootnoteDefinitionLabelString: exitFootnoteDefinitionLabelString,\n      gfmFootnoteCall: exitFootnoteCall,\n      gfmFootnoteCallString: exitFootnoteCallString\n    }\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM footnotes\n * in markdown.\n *\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown`.\n */\nexport function gfmFootnoteToMarkdown() {\n  return {\n    // This is on by default already.\n    unsafe: [{character: '[', inConstruct: ['phrasing', 'label', 'reference']}],\n    handlers: {footnoteDefinition, footnoteReference}\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteDefinition(token) {\n  this.enter(\n    {type: 'footnoteDefinition', identifier: '', label: '', children: []},\n    token\n  )\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteDefinitionLabelString() {\n  this.buffer()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteDefinitionLabelString(token) {\n  const label = this.resume()\n  const node = this.stack[this.stack.length - 1]\n  assert(node.type === 'footnoteDefinition')\n  node.label = label\n  node.identifier = normalizeIdentifier(\n    this.sliceSerialize(token)\n  ).toLowerCase()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteDefinition(token) {\n  this.exit(token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteCall(token) {\n  this.enter({type: 'footnoteReference', identifier: '', label: ''}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteCallString() {\n  this.buffer()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteCallString(token) {\n  const label = this.resume()\n  const node = this.stack[this.stack.length - 1]\n  assert(node.type === 'footnoteReference')\n  node.label = label\n  node.identifier = normalizeIdentifier(\n    this.sliceSerialize(token)\n  ).toLowerCase()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteCall(token) {\n  this.exit(token)\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {FootnoteReference} node\n */\nfunction footnoteReference(node, _, state, info) {\n  const tracker = state.createTracker(info)\n  let value = tracker.move('[^')\n  const exit = state.enter('footnoteReference')\n  const subexit = state.enter('reference')\n  value += tracker.move(\n    state.safe(state.associationId(node), {\n      ...tracker.current(),\n      before: value,\n      after: ']'\n    })\n  )\n  subexit()\n  exit()\n  value += tracker.move(']')\n  return value\n}\n\n/** @type {ToMarkdownHandle} */\nfunction footnoteReferencePeek() {\n  return '['\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {FootnoteDefinition} node\n */\nfunction footnoteDefinition(node, _, state, info) {\n  const tracker = state.createTracker(info)\n  let value = tracker.move('[^')\n  const exit = state.enter('footnoteDefinition')\n  const subexit = state.enter('label')\n  value += tracker.move(\n    state.safe(state.associationId(node), {\n      ...tracker.current(),\n      before: value,\n      after: ']'\n    })\n  )\n  subexit()\n  value += tracker.move(\n    ']:' + (node.children && node.children.length > 0 ? ' ' : '')\n  )\n  tracker.shift(4)\n  value += tracker.move(\n    state.indentLines(state.containerFlow(node, tracker.current()), map)\n  )\n  exit()\n\n  return value\n}\n\n/** @type {Map} */\nfunction map(line, index, blank) {\n  if (index === 0) {\n    return line\n  }\n\n  return (blank ? '' : '    ') + line\n}\n","/**\n * @typedef {import('mdast').Delete} Delete\n *\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n *\n * @typedef {import('mdast-util-to-markdown').ConstructName} ConstructName\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n */\n\n/**\n * List of constructs that occur in phrasing (paragraphs, headings), but cannot\n * contain strikethrough.\n * So they sort of cancel each other out.\n * Note: could use a better name.\n *\n * Note: keep in sync with: <https://github.com/syntax-tree/mdast-util-to-markdown/blob/8ce8dbf/lib/unsafe.js#L14>\n *\n * @type {Array<ConstructName>}\n */\nconst constructsWithoutStrikethrough = [\n  'autolink',\n  'destinationLiteral',\n  'destinationRaw',\n  'reference',\n  'titleQuote',\n  'titleApostrophe'\n]\n\nhandleDelete.peek = peekDelete\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM\n * strikethrough in markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown` to enable GFM strikethrough.\n */\nexport function gfmStrikethroughFromMarkdown() {\n  return {\n    canContainEols: ['delete'],\n    enter: {strikethrough: enterStrikethrough},\n    exit: {strikethrough: exitStrikethrough}\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM\n * strikethrough in markdown.\n *\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM strikethrough.\n */\nexport function gfmStrikethroughToMarkdown() {\n  return {\n    unsafe: [\n      {\n        character: '~',\n        inConstruct: 'phrasing',\n        notInConstruct: constructsWithoutStrikethrough\n      }\n    ],\n    handlers: {delete: handleDelete}\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterStrikethrough(token) {\n  this.enter({type: 'delete', children: []}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitStrikethrough(token) {\n  this.exit(token)\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {Delete} node\n */\nfunction handleDelete(node, _, state, info) {\n  const tracker = state.createTracker(info)\n  const exit = state.enter('strikethrough')\n  let value = tracker.move('~~')\n  value += state.containerPhrasing(node, {\n    ...tracker.current(),\n    before: value,\n    after: '~'\n  })\n  value += tracker.move('~~')\n  exit()\n  return value\n}\n\n/** @type {ToMarkdownHandle} */\nfunction peekDelete() {\n  return '~'\n}\n","/**\n * @typedef Options\n *   Configuration (optional).\n * @property {string|null|ReadonlyArray<string|null|undefined>} [align]\n *   One style for all columns, or styles for their respective columns.\n *   Each style is either `'l'` (left), `'r'` (right), or `'c'` (center).\n *   Other values are treated as `''`, which doesn’t place the colon in the\n *   alignment row but does align left.\n *   *Only the lowercased first character is used, so `Right` is fine.*\n * @property {boolean} [padding=true]\n *   Whether to add a space of padding between delimiters and cells.\n *\n *   When `true`, there is padding:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there is no padding:\n *\n *   ```markdown\n *   |Alpha|B    |\n *   |-----|-----|\n *   |C    |Delta|\n *   ```\n * @property {boolean} [delimiterStart=true]\n *   Whether to begin each row with the delimiter.\n *\n *   > 👉 **Note**: please don’t use this: it could create fragile structures\n *   > that aren’t understandable to some markdown parsers.\n *\n *   When `true`, there are starting delimiters:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there are no starting delimiters:\n *\n *   ```markdown\n *   Alpha | B     |\n *   ----- | ----- |\n *   C     | Delta |\n *   ```\n * @property {boolean} [delimiterEnd=true]\n *   Whether to end each row with the delimiter.\n *\n *   > 👉 **Note**: please don’t use this: it could create fragile structures\n *   > that aren’t understandable to some markdown parsers.\n *\n *   When `true`, there are ending delimiters:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there are no ending delimiters:\n *\n *   ```markdown\n *   | Alpha | B\n *   | ----- | -----\n *   | C     | Delta\n *   ```\n * @property {boolean} [alignDelimiters=true]\n *   Whether to align the delimiters.\n *   By default, they are aligned:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   Pass `false` to make them staggered:\n *\n *   ```markdown\n *   | Alpha | B |\n *   | - | - |\n *   | C | Delta |\n *   ```\n * @property {(value: string) => number} [stringLength]\n *   Function to detect the length of table cell content.\n *   This is used when aligning the delimiters (`|`) between table cells.\n *   Full-width characters and emoji mess up delimiter alignment when viewing\n *   the markdown source.\n *   To fix this, you can pass this function, which receives the cell content\n *   and returns its “visible” size.\n *   Note that what is and isn’t visible depends on where the text is displayed.\n *\n *   Without such a function, the following:\n *\n *   ```js\n *   markdownTable([\n *     ['Alpha', 'Bravo'],\n *     ['中文', 'Charlie'],\n *     ['👩‍❤️‍👩', 'Delta']\n *   ])\n *   ```\n *\n *   Yields:\n *\n *   ```markdown\n *   | Alpha | Bravo |\n *   | - | - |\n *   | 中文 | Charlie |\n *   | 👩‍❤️‍👩 | Delta |\n *   ```\n *\n *   With [`string-width`](https://github.com/sindresorhus/string-width):\n *\n *   ```js\n *   import stringWidth from 'string-width'\n *\n *   markdownTable(\n *     [\n *       ['Alpha', 'Bravo'],\n *       ['中文', 'Charlie'],\n *       ['👩‍❤️‍👩', 'Delta']\n *     ],\n *     {stringLength: stringWidth}\n *   )\n *   ```\n *\n *   Yields:\n *\n *   ```markdown\n *   | Alpha | Bravo   |\n *   | ----- | ------- |\n *   | 中文  | Charlie |\n *   | 👩‍❤️‍👩    | Delta   |\n *   ```\n */\n\n/**\n * @typedef {Options} MarkdownTableOptions\n * @todo\n *   Remove next major.\n */\n\n/**\n * Generate a markdown ([GFM](https://docs.github.com/en/github/writing-on-github/working-with-advanced-formatting/organizing-information-with-tables)) table..\n *\n * @param {ReadonlyArray<ReadonlyArray<string|null|undefined>>} table\n *   Table data (matrix of strings).\n * @param {Options} [options]\n *   Configuration (optional).\n * @returns {string}\n */\nexport function markdownTable(table, options = {}) {\n  const align = (options.align || []).concat()\n  const stringLength = options.stringLength || defaultStringLength\n  /** @type {Array<number>} Character codes as symbols for alignment per column. */\n  const alignments = []\n  /** @type {Array<Array<string>>} Cells per row. */\n  const cellMatrix = []\n  /** @type {Array<Array<number>>} Sizes of each cell per row. */\n  const sizeMatrix = []\n  /** @type {Array<number>} */\n  const longestCellByColumn = []\n  let mostCellsPerRow = 0\n  let rowIndex = -1\n\n  // This is a superfluous loop if we don’t align delimiters, but otherwise we’d\n  // do superfluous work when aligning, so optimize for aligning.\n  while (++rowIndex < table.length) {\n    /** @type {Array<string>} */\n    const row = []\n    /** @type {Array<number>} */\n    const sizes = []\n    let columnIndex = -1\n\n    if (table[rowIndex].length > mostCellsPerRow) {\n      mostCellsPerRow = table[rowIndex].length\n    }\n\n    while (++columnIndex < table[rowIndex].length) {\n      const cell = serialize(table[rowIndex][columnIndex])\n\n      if (options.alignDelimiters !== false) {\n        const size = stringLength(cell)\n        sizes[columnIndex] = size\n\n        if (\n          longestCellByColumn[columnIndex] === undefined ||\n          size > longestCellByColumn[columnIndex]\n        ) {\n          longestCellByColumn[columnIndex] = size\n        }\n      }\n\n      row.push(cell)\n    }\n\n    cellMatrix[rowIndex] = row\n    sizeMatrix[rowIndex] = sizes\n  }\n\n  // Figure out which alignments to use.\n  let columnIndex = -1\n\n  if (typeof align === 'object' && 'length' in align) {\n    while (++columnIndex < mostCellsPerRow) {\n      alignments[columnIndex] = toAlignment(align[columnIndex])\n    }\n  } else {\n    const code = toAlignment(align)\n\n    while (++columnIndex < mostCellsPerRow) {\n      alignments[columnIndex] = code\n    }\n  }\n\n  // Inject the alignment row.\n  columnIndex = -1\n  /** @type {Array<string>} */\n  const row = []\n  /** @type {Array<number>} */\n  const sizes = []\n\n  while (++columnIndex < mostCellsPerRow) {\n    const code = alignments[columnIndex]\n    let before = ''\n    let after = ''\n\n    if (code === 99 /* `c` */) {\n      before = ':'\n      after = ':'\n    } else if (code === 108 /* `l` */) {\n      before = ':'\n    } else if (code === 114 /* `r` */) {\n      after = ':'\n    }\n\n    // There *must* be at least one hyphen-minus in each alignment cell.\n    let size =\n      options.alignDelimiters === false\n        ? 1\n        : Math.max(\n            1,\n            longestCellByColumn[columnIndex] - before.length - after.length\n          )\n\n    const cell = before + '-'.repeat(size) + after\n\n    if (options.alignDelimiters !== false) {\n      size = before.length + size + after.length\n\n      if (size > longestCellByColumn[columnIndex]) {\n        longestCellByColumn[columnIndex] = size\n      }\n\n      sizes[columnIndex] = size\n    }\n\n    row[columnIndex] = cell\n  }\n\n  // Inject the alignment row.\n  cellMatrix.splice(1, 0, row)\n  sizeMatrix.splice(1, 0, sizes)\n\n  rowIndex = -1\n  /** @type {Array<string>} */\n  const lines = []\n\n  while (++rowIndex < cellMatrix.length) {\n    const row = cellMatrix[rowIndex]\n    const sizes = sizeMatrix[rowIndex]\n    columnIndex = -1\n    /** @type {Array<string>} */\n    const line = []\n\n    while (++columnIndex < mostCellsPerRow) {\n      const cell = row[columnIndex] || ''\n      let before = ''\n      let after = ''\n\n      if (options.alignDelimiters !== false) {\n        const size =\n          longestCellByColumn[columnIndex] - (sizes[columnIndex] || 0)\n        const code = alignments[columnIndex]\n\n        if (code === 114 /* `r` */) {\n          before = ' '.repeat(size)\n        } else if (code === 99 /* `c` */) {\n          if (size % 2) {\n            before = ' '.repeat(size / 2 + 0.5)\n            after = ' '.repeat(size / 2 - 0.5)\n          } else {\n            before = ' '.repeat(size / 2)\n            after = before\n          }\n        } else {\n          after = ' '.repeat(size)\n        }\n      }\n\n      if (options.delimiterStart !== false && !columnIndex) {\n        line.push('|')\n      }\n\n      if (\n        options.padding !== false &&\n        // Don’t add the opening space if we’re not aligning and the cell is\n        // empty: there will be a closing space.\n        !(options.alignDelimiters === false && cell === '') &&\n        (options.delimiterStart !== false || columnIndex)\n      ) {\n        line.push(' ')\n      }\n\n      if (options.alignDelimiters !== false) {\n        line.push(before)\n      }\n\n      line.push(cell)\n\n      if (options.alignDelimiters !== false) {\n        line.push(after)\n      }\n\n      if (options.padding !== false) {\n        line.push(' ')\n      }\n\n      if (\n        options.delimiterEnd !== false ||\n        columnIndex !== mostCellsPerRow - 1\n      ) {\n        line.push('|')\n      }\n    }\n\n    lines.push(\n      options.delimiterEnd === false\n        ? line.join('').replace(/ +$/, '')\n        : line.join('')\n    )\n  }\n\n  return lines.join('\\n')\n}\n\n/**\n * @param {string|null|undefined} [value]\n * @returns {string}\n */\nfunction serialize(value) {\n  return value === null || value === undefined ? '' : String(value)\n}\n\n/**\n * @param {string} value\n * @returns {number}\n */\nfunction defaultStringLength(value) {\n  return value.length\n}\n\n/**\n * @param {string|null|undefined} value\n * @returns {number}\n */\nfunction toAlignment(value) {\n  const code = typeof value === 'string' ? value.codePointAt(0) : 0\n\n  return code === 67 /* `C` */ || code === 99 /* `c` */\n    ? 99 /* `c` */\n    : code === 76 /* `L` */ || code === 108 /* `l` */\n    ? 108 /* `l` */\n    : code === 82 /* `R` */ || code === 114 /* `r` */\n    ? 114 /* `r` */\n    : 0\n}\n","/**\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').Map} Map\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {Blockquote} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function blockquote(node, _, state, info) {\n  const exit = state.enter('blockquote')\n  const tracker = state.createTracker(info)\n  tracker.move('> ')\n  tracker.shift(2)\n  const value = state.indentLines(\n    state.containerFlow(node, tracker.current()),\n    map\n  )\n  exit()\n  return value\n}\n\n/** @type {Map} */\nfunction map(line, _, blank) {\n  return '>' + (blank ? '' : ' ') + line\n}\n","/**\n * @typedef {import('../types.js').ConstructName} ConstructName\n * @typedef {import('../types.js').Unsafe} Unsafe\n */\n\n/**\n * @param {Array<ConstructName>} stack\n * @param {Unsafe} pattern\n * @returns {boolean}\n */\nexport function patternInScope(stack, pattern) {\n  return (\n    listInScope(stack, pattern.inConstruct, true) &&\n    !listInScope(stack, pattern.notInConstruct, false)\n  )\n}\n\n/**\n * @param {Array<ConstructName>} stack\n * @param {Unsafe['inConstruct']} list\n * @param {boolean} none\n * @returns {boolean}\n */\nfunction listInScope(stack, list, none) {\n  if (typeof list === 'string') {\n    list = [list]\n  }\n\n  if (!list || list.length === 0) {\n    return none\n  }\n\n  let index = -1\n\n  while (++index < list.length) {\n    if (stack.includes(list[index])) {\n      return true\n    }\n  }\n\n  return false\n}\n","/**\n * @typedef {import('mdast').Break} Break\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimport {patternInScope} from '../util/pattern-in-scope.js'\n\n/**\n * @param {Break} _\n * @param {Parents | undefined} _1\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function hardBreak(_, _1, state, info) {\n  let index = -1\n\n  while (++index < state.unsafe.length) {\n    // If we can’t put eols in this construct (setext headings, tables), use a\n    // space instead.\n    if (\n      state.unsafe[index].character === '\\n' &&\n      patternInScope(state.stack, state.unsafe[index])\n    ) {\n      return /[ \\t]/.test(info.before) ? '' : ' '\n    }\n  }\n\n  return '\\\\\\n'\n}\n","/**\n * @typedef {import('mdast').Code} Code\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').Map} Map\n * @typedef {import('../types.js').State} State\n */\n\nimport {longestStreak} from 'longest-streak'\nimport {formatCodeAsIndented} from '../util/format-code-as-indented.js'\nimport {checkFence} from '../util/check-fence.js'\n\n/**\n * @param {Code} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function code(node, _, state, info) {\n  const marker = checkFence(state)\n  const raw = node.value || ''\n  const suffix = marker === '`' ? 'GraveAccent' : 'Tilde'\n\n  if (formatCodeAsIndented(node, state)) {\n    const exit = state.enter('codeIndented')\n    const value = state.indentLines(raw, map)\n    exit()\n    return value\n  }\n\n  const tracker = state.createTracker(info)\n  const sequence = marker.repeat(Math.max(longestStreak(raw, marker) + 1, 3))\n  const exit = state.enter('codeFenced')\n  let value = tracker.move(sequence)\n\n  if (node.lang) {\n    const subexit = state.enter(`codeFencedLang${suffix}`)\n    value += tracker.move(\n      state.safe(node.lang, {\n        before: value,\n        after: ' ',\n        encode: ['`'],\n        ...tracker.current()\n      })\n    )\n    subexit()\n  }\n\n  if (node.lang && node.meta) {\n    const subexit = state.enter(`codeFencedMeta${suffix}`)\n    value += tracker.move(' ')\n    value += tracker.move(\n      state.safe(node.meta, {\n        before: value,\n        after: '\\n',\n        encode: ['`'],\n        ...tracker.current()\n      })\n    )\n    subexit()\n  }\n\n  value += tracker.move('\\n')\n\n  if (raw) {\n    value += tracker.move(raw + '\\n')\n  }\n\n  value += tracker.move(sequence)\n  exit()\n  return value\n}\n\n/** @type {Map} */\nfunction map(line, _, blank) {\n  return (blank ? '' : '    ') + line\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['quote'], null | undefined>}\n */\nexport function checkQuote(state) {\n  const marker = state.options.quote || '\"'\n\n  if (marker !== '\"' && marker !== \"'\") {\n    throw new Error(\n      'Cannot serialize title with `' +\n        marker +\n        '` for `options.quote`, expected `\"`, or `\\'`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimport {checkEmphasis} from '../util/check-emphasis.js'\n\nemphasis.peek = emphasisPeek\n\n// To do: there are cases where emphasis cannot “form” depending on the\n// previous or next character of sequences.\n// There’s no way around that though, except for injecting zero-width stuff.\n// Do we need to safeguard against that?\n/**\n * @param {Emphasis} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function emphasis(node, _, state, info) {\n  const marker = checkEmphasis(state)\n  const exit = state.enter('emphasis')\n  const tracker = state.createTracker(info)\n  let value = tracker.move(marker)\n  value += tracker.move(\n    state.containerPhrasing(node, {\n      before: value,\n      after: marker,\n      ...tracker.current()\n    })\n  )\n  value += tracker.move(marker)\n  exit()\n  return value\n}\n\n/**\n * @param {Emphasis} _\n * @param {Parents | undefined} _1\n * @param {State} state\n * @returns {string}\n */\nfunction emphasisPeek(_, _1, state) {\n  return state.options.emphasis || '*'\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['emphasis'], null | undefined>}\n */\nexport function checkEmphasis(state) {\n  const marker = state.options.emphasis || '*'\n\n  if (marker !== '*' && marker !== '_') {\n    throw new Error(\n      'Cannot serialize emphasis with `' +\n        marker +\n        '` for `options.emphasis`, expected `*`, or `_`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n */\n\n/**\n * @template Fn\n * @template Fallback\n * @typedef {Fn extends (value: any) => value is infer Thing ? Thing : Fallback} Predicate\n */\n\n/**\n * @callback Check\n *   Check that an arbitrary value is a node.\n * @param {unknown} this\n *   The given context.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean}\n *   Whether this is a node and passes a test.\n *\n * @typedef {Record<string, unknown> | Node} Props\n *   Object to check for equivalence.\n *\n *   Note: `Node` is included as it is common but is not indexable.\n *\n * @typedef {Array<Props | TestFunction | string> | Props | TestFunction | string | null | undefined} Test\n *   Check for an arbitrary node.\n *\n * @callback TestFunction\n *   Check if a node passes a test.\n * @param {unknown} this\n *   The given context.\n * @param {Node} node\n *   A node.\n * @param {number | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean | undefined | void}\n *   Whether this node passes the test.\n *\n *   Note: `void` is included until TS sees no return as `undefined`.\n */\n\n/**\n * Check if `node` is a `Node` and whether it passes the given test.\n *\n * @param {unknown} node\n *   Thing to check, typically `Node`.\n * @param {Test} test\n *   A check for a specific node.\n * @param {number | null | undefined} index\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} parent\n *   The node’s parent.\n * @param {unknown} context\n *   Context object (`this`) to pass to `test` functions.\n * @returns {boolean}\n *   Whether `node` is a node and passes a test.\n */\nexport const is =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((node?: null | undefined) => false) &\n   *   ((node: unknown, test?: null | undefined, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((node: unknown, test?: Test, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => boolean)\n   * )}\n   */\n  (\n    /**\n     * @param {unknown} [node]\n     * @param {Test} [test]\n     * @param {number | null | undefined} [index]\n     * @param {Parent | null | undefined} [parent]\n     * @param {unknown} [context]\n     * @returns {boolean}\n     */\n    // eslint-disable-next-line max-params\n    function (node, test, index, parent, context) {\n      const check = convert(test)\n\n      if (\n        index !== undefined &&\n        index !== null &&\n        (typeof index !== 'number' ||\n          index < 0 ||\n          index === Number.POSITIVE_INFINITY)\n      ) {\n        throw new Error('Expected positive finite index')\n      }\n\n      if (\n        parent !== undefined &&\n        parent !== null &&\n        (!is(parent) || !parent.children)\n      ) {\n        throw new Error('Expected parent node')\n      }\n\n      if (\n        (parent === undefined || parent === null) !==\n        (index === undefined || index === null)\n      ) {\n        throw new Error('Expected both parent and index')\n      }\n\n      return looksLikeANode(node)\n        ? check.call(context, node, index, parent)\n        : false\n    }\n  )\n\n/**\n * Generate an assertion from a test.\n *\n * Useful if you’re going to test many nodes, for example when creating a\n * utility where something else passes a compatible test.\n *\n * The created function is a bit faster because it expects valid input only:\n * a `node`, `index`, and `parent`.\n *\n * @param {Test} test\n *   *   when nullish, checks if `node` is a `Node`.\n *   *   when `string`, works like passing `(node) => node.type === test`.\n *   *   when `function` checks if function passed the node is true.\n *   *   when `object`, checks that all keys in test are in node, and that they have (strictly) equal values.\n *   *   when `array`, checks if any one of the subtests pass.\n * @returns {Check}\n *   An assertion.\n */\nexport const convert =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((test?: null | undefined) => (node?: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((test?: Test) => Check)\n   * )}\n   */\n  (\n    /**\n     * @param {Test} [test]\n     * @returns {Check}\n     */\n    function (test) {\n      if (test === null || test === undefined) {\n        return ok\n      }\n\n      if (typeof test === 'function') {\n        return castFactory(test)\n      }\n\n      if (typeof test === 'object') {\n        return Array.isArray(test) ? anyFactory(test) : propsFactory(test)\n      }\n\n      if (typeof test === 'string') {\n        return typeFactory(test)\n      }\n\n      throw new Error('Expected function, string, or object as test')\n    }\n  )\n\n/**\n * @param {Array<Props | TestFunction | string>} tests\n * @returns {Check}\n */\nfunction anyFactory(tests) {\n  /** @type {Array<Check>} */\n  const checks = []\n  let index = -1\n\n  while (++index < tests.length) {\n    checks[index] = convert(tests[index])\n  }\n\n  return castFactory(any)\n\n  /**\n   * @this {unknown}\n   * @type {TestFunction}\n   */\n  function any(...parameters) {\n    let index = -1\n\n    while (++index < checks.length) {\n      if (checks[index].apply(this, parameters)) return true\n    }\n\n    return false\n  }\n}\n\n/**\n * Turn an object into a test for a node with a certain fields.\n *\n * @param {Props} check\n * @returns {Check}\n */\nfunction propsFactory(check) {\n  const checkAsRecord = /** @type {Record<string, unknown>} */ (check)\n\n  return castFactory(all)\n\n  /**\n   * @param {Node} node\n   * @returns {boolean}\n   */\n  function all(node) {\n    const nodeAsRecord = /** @type {Record<string, unknown>} */ (\n      /** @type {unknown} */ (node)\n    )\n\n    /** @type {string} */\n    let key\n\n    for (key in check) {\n      if (nodeAsRecord[key] !== checkAsRecord[key]) return false\n    }\n\n    return true\n  }\n}\n\n/**\n * Turn a string into a test for a node with a certain type.\n *\n * @param {string} check\n * @returns {Check}\n */\nfunction typeFactory(check) {\n  return castFactory(type)\n\n  /**\n   * @param {Node} node\n   */\n  function type(node) {\n    return node && node.type === check\n  }\n}\n\n/**\n * Turn a custom test into a test for a node that passes that test.\n *\n * @param {TestFunction} testFunction\n * @returns {Check}\n */\nfunction castFactory(testFunction) {\n  return check\n\n  /**\n   * @this {unknown}\n   * @type {Check}\n   */\n  function check(value, index, parent) {\n    return Boolean(\n      looksLikeANode(value) &&\n        testFunction.call(\n          this,\n          value,\n          typeof index === 'number' ? index : undefined,\n          parent || undefined\n        )\n    )\n  }\n}\n\nfunction ok() {\n  return true\n}\n\n/**\n * @param {unknown} value\n * @returns {value is Node}\n */\nfunction looksLikeANode(value) {\n  return value !== null && typeof value === 'object' && 'type' in value\n}\n","/**\n * @typedef {import('unist').Node} UnistNode\n * @typedef {import('unist').Parent} UnistParent\n */\n\n/**\n * @typedef {Exclude<import('unist-util-is').Test, undefined> | undefined} Test\n *   Test from `unist-util-is`.\n *\n *   Note: we have remove and add `undefined`, because otherwise when generating\n *   automatic `.d.ts` files, TS tries to flatten paths from a local perspective,\n *   which doesn’t work when publishing on npm.\n */\n\n/**\n * @typedef {(\n *   Fn extends (value: any) => value is infer Thing\n *   ? Thing\n *   : Fallback\n * )} Predicate\n *   Get the value of a type guard `Fn`.\n * @template Fn\n *   Value; typically function that is a type guard (such as `(x): x is Y`).\n * @template Fallback\n *   Value to yield if `Fn` is not a type guard.\n */\n\n/**\n * @typedef {(\n *   Check extends null | undefined // No test.\n *   ? Value\n *   : Value extends {type: Check} // String (type) test.\n *   ? Value\n *   : Value extends Check // Partial test.\n *   ? Value\n *   : Check extends Function // Function test.\n *   ? Predicate<Check, Value> extends Value\n *     ? Predicate<Check, Value>\n *     : never\n *   : never // Some other test?\n * )} MatchesOne\n *   Check whether a node matches a primitive check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test, but not arrays.\n */\n\n/**\n * @typedef {(\n *   Check extends Array<any>\n *   ? MatchesOne<Value, Check[keyof Check]>\n *   : MatchesOne<Value, Check>\n * )} Matches\n *   Check whether a node matches a check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test.\n */\n\n/**\n * @typedef {0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10} Uint\n *   Number; capped reasonably.\n */\n\n/**\n * @typedef {I extends 0 ? 1 : I extends 1 ? 2 : I extends 2 ? 3 : I extends 3 ? 4 : I extends 4 ? 5 : I extends 5 ? 6 : I extends 6 ? 7 : I extends 7 ? 8 : I extends 8 ? 9 : 10} Increment\n *   Increment a number in the type system.\n * @template {Uint} [I=0]\n *   Index.\n */\n\n/**\n * @typedef {(\n *   Node extends UnistParent\n *   ? Node extends {children: Array<infer Children>}\n *     ? Child extends Children ? Node : never\n *     : never\n *   : never\n * )} InternalParent\n *   Collect nodes that can be parents of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {InternalParent<InclusiveDescendant<Tree>, Child>} Parent\n *   Collect nodes in `Tree` that can be parents of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Depth extends Max\n *   ? never\n *   :\n *     | InternalParent<Node, Child>\n *     | InternalAncestor<Node, InternalParent<Node, Child>, Max, Increment<Depth>>\n * )} InternalAncestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {InternalAncestor<InclusiveDescendant<Tree>, Child>} Ancestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Tree extends UnistParent\n *     ? Depth extends Max\n *       ? Tree\n *       : Tree | InclusiveDescendant<Tree['children'][number], Max, Increment<Depth>>\n *     : Tree\n * )} InclusiveDescendant\n *   Collect all (inclusive) descendants of `Tree`.\n *\n *   > 👉 **Note**: for performance reasons, this seems to be the fastest way to\n *   > recurse without actually running into an infinite loop, which the\n *   > previous version did.\n *   >\n *   > Practically, a max of `2` is typically enough assuming a `Root` is\n *   > passed, but it doesn’t improve performance.\n *   > It gets higher with `List > ListItem > Table > TableRow > TableCell`.\n *   > Using up to `10` doesn’t hurt or help either.\n * @template {UnistNode} Tree\n *   Tree type.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {'skip' | boolean} Action\n *   Union of the action types.\n *\n * @typedef {number} Index\n *   Move to the sibling at `index` next (after node itself is completely\n *   traversed).\n *\n *   Useful if mutating the tree, such as removing the node the visitor is\n *   currently on, or any of its previous siblings.\n *   Results less than 0 or greater than or equal to `children.length` stop\n *   traversing the parent.\n *\n * @typedef {[(Action | null | undefined | void)?, (Index | null | undefined)?]} ActionTuple\n *   List with one or two values, the first an action, the second an index.\n *\n * @typedef {Action | ActionTuple | Index | null | undefined | void} VisitorResult\n *   Any value that can be returned from a visitor.\n */\n\n/**\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform the parent of node (the last of `ancestors`).\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of an ancestor still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Array<VisitedParents>} ancestors\n *   Ancestors of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n * @template {UnistNode} [Visited=UnistNode]\n *   Visited node type.\n * @template {UnistParent} [VisitedParents=UnistParent]\n *   Ancestor type.\n */\n\n/**\n * @typedef {Visitor<Matches<InclusiveDescendant<Tree>, Check>, Ancestor<Tree, Matches<InclusiveDescendant<Tree>, Check>>>} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parents`.\n * @template {UnistNode} [Tree=UnistNode]\n *   Tree type.\n * @template {Test} [Check=Test]\n *   Test type.\n */\n\nimport {convert} from 'unist-util-is'\nimport {color} from 'unist-util-visit-parents/do-not-use-color'\n\n/** @type {Readonly<ActionTuple>} */\nconst empty = []\n\n/**\n * Continue traversing as normal.\n */\nexport const CONTINUE = true\n\n/**\n * Stop traversing immediately.\n */\nexport const EXIT = false\n\n/**\n * Do not traverse this node’s children.\n */\nexport const SKIP = 'skip'\n\n/**\n * Visit nodes, with ancestral information.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @overload\n * @param {Tree} tree\n * @param {Check} check\n * @param {BuildVisitor<Tree, Check>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @overload\n * @param {Tree} tree\n * @param {BuildVisitor<Tree>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @param {UnistNode} tree\n *   Tree to traverse.\n * @param {Visitor | Test} test\n *   `unist-util-is`-compatible test\n * @param {Visitor | boolean | null | undefined} [visitor]\n *   Handle each node.\n * @param {boolean | null | undefined} [reverse]\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns {undefined}\n *   Nothing.\n *\n * @template {UnistNode} Tree\n *   Node type.\n * @template {Test} Check\n *   `unist-util-is`-compatible test.\n */\nexport function visitParents(tree, test, visitor, reverse) {\n  /** @type {Test} */\n  let check\n\n  if (typeof test === 'function' && typeof visitor !== 'function') {\n    reverse = visitor\n    // @ts-expect-error no visitor given, so `visitor` is test.\n    visitor = test\n  } else {\n    // @ts-expect-error visitor given, so `test` isn’t a visitor.\n    check = test\n  }\n\n  const is = convert(check)\n  const step = reverse ? -1 : 1\n\n  factory(tree, undefined, [])()\n\n  /**\n   * @param {UnistNode} node\n   * @param {number | undefined} index\n   * @param {Array<UnistParent>} parents\n   */\n  function factory(node, index, parents) {\n    const value = /** @type {Record<string, unknown>} */ (\n      node && typeof node === 'object' ? node : {}\n    )\n\n    if (typeof value.type === 'string') {\n      const name =\n        // `hast`\n        typeof value.tagName === 'string'\n          ? value.tagName\n          : // `xast`\n          typeof value.name === 'string'\n          ? value.name\n          : undefined\n\n      Object.defineProperty(visit, 'name', {\n        value:\n          'node (' + color(node.type + (name ? '<' + name + '>' : '')) + ')'\n      })\n    }\n\n    return visit\n\n    function visit() {\n      /** @type {Readonly<ActionTuple>} */\n      let result = empty\n      /** @type {Readonly<ActionTuple>} */\n      let subresult\n      /** @type {number} */\n      let offset\n      /** @type {Array<UnistParent>} */\n      let grandparents\n\n      if (!test || is(node, index, parents[parents.length - 1] || undefined)) {\n        // @ts-expect-error: `visitor` is now a visitor.\n        result = toResult(visitor(node, parents))\n\n        if (result[0] === EXIT) {\n          return result\n        }\n      }\n\n      if ('children' in node && node.children) {\n        const nodeAsParent = /** @type {UnistParent} */ (node)\n\n        if (nodeAsParent.children && result[0] !== SKIP) {\n          offset = (reverse ? nodeAsParent.children.length : -1) + step\n          grandparents = parents.concat(nodeAsParent)\n\n          while (offset > -1 && offset < nodeAsParent.children.length) {\n            const child = nodeAsParent.children[offset]\n\n            subresult = factory(child, offset, grandparents)()\n\n            if (subresult[0] === EXIT) {\n              return subresult\n            }\n\n            offset =\n              typeof subresult[1] === 'number' ? subresult[1] : offset + step\n          }\n        }\n      }\n\n      return result\n    }\n  }\n}\n\n/**\n * Turn a return value into a clean result.\n *\n * @param {VisitorResult} value\n *   Valid return values from visitors.\n * @returns {Readonly<ActionTuple>}\n *   Clean result.\n */\nfunction toResult(value) {\n  if (Array.isArray(value)) {\n    return value\n  }\n\n  if (typeof value === 'number') {\n    return [CONTINUE, value]\n  }\n\n  return value === null || value === undefined ? empty : [value]\n}\n","/**\n * @typedef {import('mdast').Nodes} Nodes\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [includeImageAlt=true]\n *   Whether to use `alt` for `image`s (default: `true`).\n * @property {boolean | null | undefined} [includeHtml=true]\n *   Whether to use `value` of HTML (default: `true`).\n */\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Get the text content of a node or list of nodes.\n *\n * Prefers the node’s plain-text fields, otherwise serializes its children,\n * and if the given value is an array, serialize the nodes in it.\n *\n * @param {unknown} [value]\n *   Thing to serialize, typically `Node`.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {string}\n *   Serialized `value`.\n */\nexport function toString(value, options) {\n  const settings = options || emptyOptions\n  const includeImageAlt =\n    typeof settings.includeImageAlt === 'boolean'\n      ? settings.includeImageAlt\n      : true\n  const includeHtml =\n    typeof settings.includeHtml === 'boolean' ? settings.includeHtml : true\n\n  return one(value, includeImageAlt, includeHtml)\n}\n\n/**\n * One node or several nodes.\n *\n * @param {unknown} value\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized node.\n */\nfunction one(value, includeImageAlt, includeHtml) {\n  if (node(value)) {\n    if ('value' in value) {\n      return value.type === 'html' && !includeHtml ? '' : value.value\n    }\n\n    if (includeImageAlt && 'alt' in value && value.alt) {\n      return value.alt\n    }\n\n    if ('children' in value) {\n      return all(value.children, includeImageAlt, includeHtml)\n    }\n  }\n\n  if (Array.isArray(value)) {\n    return all(value, includeImageAlt, includeHtml)\n  }\n\n  return ''\n}\n\n/**\n * Serialize a list of nodes.\n *\n * @param {Array<unknown>} values\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized nodes.\n */\nfunction all(values, includeImageAlt, includeHtml) {\n  /** @type {Array<string>} */\n  const result = []\n  let index = -1\n\n  while (++index < values.length) {\n    result[index] = one(values[index], includeImageAlt, includeHtml)\n  }\n\n  return result.join('')\n}\n\n/**\n * Check if `value` looks like a node.\n *\n * @param {unknown} value\n *   Thing.\n * @returns {value is Nodes}\n *   Whether `value` is a node.\n */\nfunction node(value) {\n  return Boolean(value && typeof value === 'object')\n}\n","/**\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('../types.js').State} State\n */\n\nimport {EXIT, visit} from 'unist-util-visit'\nimport {toString} from 'mdast-util-to-string'\n\n/**\n * @param {Heading} node\n * @param {State} state\n * @returns {boolean}\n */\nexport function formatHeadingAsSetext(node, state) {\n  let literalWithBreak = false\n\n  // Look for literals with a line break.\n  // Note that this also\n  visit(node, function (node) {\n    if (\n      ('value' in node && /\\r?\\n|\\r/.test(node.value)) ||\n      node.type === 'break'\n    ) {\n      literalWithBreak = true\n      return EXIT\n    }\n  })\n\n  return Boolean(\n    (!node.depth || node.depth < 3) &&\n      toString(node) &&\n      (state.options.setext || literalWithBreak)\n  )\n}\n","/**\n * @typedef {import('unist').Node} UnistNode\n * @typedef {import('unist').Parent} UnistParent\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n */\n\n/**\n * @typedef {Exclude<import('unist-util-is').Test, undefined> | undefined} Test\n *   Test from `unist-util-is`.\n *\n *   Note: we have remove and add `undefined`, because otherwise when generating\n *   automatic `.d.ts` files, TS tries to flatten paths from a local perspective,\n *   which doesn’t work when publishing on npm.\n */\n\n// To do: use types from `unist-util-visit-parents` when it’s released.\n\n/**\n * @typedef {(\n *   Fn extends (value: any) => value is infer Thing\n *   ? Thing\n *   : Fallback\n * )} Predicate\n *   Get the value of a type guard `Fn`.\n * @template Fn\n *   Value; typically function that is a type guard (such as `(x): x is Y`).\n * @template Fallback\n *   Value to yield if `Fn` is not a type guard.\n */\n\n/**\n * @typedef {(\n *   Check extends null | undefined // No test.\n *   ? Value\n *   : Value extends {type: Check} // String (type) test.\n *   ? Value\n *   : Value extends Check // Partial test.\n *   ? Value\n *   : Check extends Function // Function test.\n *   ? Predicate<Check, Value> extends Value\n *     ? Predicate<Check, Value>\n *     : never\n *   : never // Some other test?\n * )} MatchesOne\n *   Check whether a node matches a primitive check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test, but not arrays.\n */\n\n/**\n * @typedef {(\n *   Check extends Array<any>\n *   ? MatchesOne<Value, Check[keyof Check]>\n *   : MatchesOne<Value, Check>\n * )} Matches\n *   Check whether a node matches a check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test.\n */\n\n/**\n * @typedef {0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10} Uint\n *   Number; capped reasonably.\n */\n\n/**\n * @typedef {I extends 0 ? 1 : I extends 1 ? 2 : I extends 2 ? 3 : I extends 3 ? 4 : I extends 4 ? 5 : I extends 5 ? 6 : I extends 6 ? 7 : I extends 7 ? 8 : I extends 8 ? 9 : 10} Increment\n *   Increment a number in the type system.\n * @template {Uint} [I=0]\n *   Index.\n */\n\n/**\n * @typedef {(\n *   Node extends UnistParent\n *   ? Node extends {children: Array<infer Children>}\n *     ? Child extends Children ? Node : never\n *     : never\n *   : never\n * )} InternalParent\n *   Collect nodes that can be parents of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {InternalParent<InclusiveDescendant<Tree>, Child>} Parent\n *   Collect nodes in `Tree` that can be parents of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Depth extends Max\n *   ? never\n *   :\n *     | InternalParent<Node, Child>\n *     | InternalAncestor<Node, InternalParent<Node, Child>, Max, Increment<Depth>>\n * )} InternalAncestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {(\n *   Tree extends UnistParent\n *     ? Depth extends Max\n *       ? Tree\n *       : Tree | InclusiveDescendant<Tree['children'][number], Max, Increment<Depth>>\n *     : Tree\n * )} InclusiveDescendant\n *   Collect all (inclusive) descendants of `Tree`.\n *\n *   > 👉 **Note**: for performance reasons, this seems to be the fastest way to\n *   > recurse without actually running into an infinite loop, which the\n *   > previous version did.\n *   >\n *   > Practically, a max of `2` is typically enough assuming a `Root` is\n *   > passed, but it doesn’t improve performance.\n *   > It gets higher with `List > ListItem > Table > TableRow > TableCell`.\n *   > Using up to `10` doesn’t hurt or help either.\n * @template {UnistNode} Tree\n *   Tree type.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform `parent`.\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of `parent` still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Visited extends UnistNode ? number | undefined : never} index\n *   Index of `node` in `parent`.\n * @param {Ancestor extends UnistParent ? Ancestor | undefined : never} parent\n *   Parent of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n * @template {UnistNode} [Visited=UnistNode]\n *   Visited node type.\n * @template {UnistParent} [Ancestor=UnistParent]\n *   Ancestor type.\n */\n\n/**\n * @typedef {Visitor<Visited, Parent<Ancestor, Visited>>} BuildVisitorFromMatch\n *   Build a typed `Visitor` function from a node and all possible parents.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} Visited\n *   Node type.\n * @template {UnistParent} Ancestor\n *   Parent type.\n */\n\n/**\n * @typedef {(\n *   BuildVisitorFromMatch<\n *     Matches<Descendant, Check>,\n *     Extract<Descendant, UnistParent>\n *   >\n * )} BuildVisitorFromDescendants\n *   Build a typed `Visitor` function from a list of descendants and a test.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} Descendant\n *   Node type.\n * @template {Test} Check\n *   Test type.\n */\n\n/**\n * @typedef {(\n *   BuildVisitorFromDescendants<\n *     InclusiveDescendant<Tree>,\n *     Check\n *   >\n * )} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} [Tree=UnistNode]\n *   Node type.\n * @template {Test} [Check=Test]\n *   Test type.\n */\n\nimport {visitParents} from 'unist-util-visit-parents'\n\nexport {CONTINUE, EXIT, SKIP} from 'unist-util-visit-parents'\n\n/**\n * Visit nodes.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @overload\n * @param {Tree} tree\n * @param {Check} check\n * @param {BuildVisitor<Tree, Check>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @overload\n * @param {Tree} tree\n * @param {BuildVisitor<Tree>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @param {UnistNode} tree\n *   Tree to traverse.\n * @param {Visitor | Test} testOrVisitor\n *   `unist-util-is`-compatible test (optional, omit to pass a visitor).\n * @param {Visitor | boolean | null | undefined} [visitorOrReverse]\n *   Handle each node (when test is omitted, pass `reverse`).\n * @param {boolean | null | undefined} [maybeReverse=false]\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns {undefined}\n *   Nothing.\n *\n * @template {UnistNode} Tree\n *   Node type.\n * @template {Test} Check\n *   `unist-util-is`-compatible test.\n */\nexport function visit(tree, testOrVisitor, visitorOrReverse, maybeReverse) {\n  /** @type {boolean | null | undefined} */\n  let reverse\n  /** @type {Test} */\n  let test\n  /** @type {Visitor} */\n  let visitor\n\n  if (\n    typeof testOrVisitor === 'function' &&\n    typeof visitorOrReverse !== 'function'\n  ) {\n    test = undefined\n    visitor = testOrVisitor\n    reverse = visitorOrReverse\n  } else {\n    // @ts-expect-error: assume the overload with test was given.\n    test = testOrVisitor\n    // @ts-expect-error: assume the overload with test was given.\n    visitor = visitorOrReverse\n    reverse = maybeReverse\n  }\n\n  visitParents(tree, test, overload, reverse)\n\n  /**\n   * @param {UnistNode} node\n   * @param {Array<UnistParent>} parents\n   */\n  function overload(node, parents) {\n    const parent = parents[parents.length - 1]\n    const index = parent ? parent.children.indexOf(node) : undefined\n    return visitor(node, index, parent)\n  }\n}\n","/**\n * @typedef {import('mdast').Html} Html\n */\n\nhtml.peek = htmlPeek\n\n/**\n * @param {Html} node\n * @returns {string}\n */\nexport function html(node) {\n  return node.value || ''\n}\n\n/**\n * @returns {string}\n */\nfunction htmlPeek() {\n  return '<'\n}\n","/**\n * @typedef {import('mdast').Image} Image\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimport {checkQuote} from '../util/check-quote.js'\n\nimage.peek = imagePeek\n\n/**\n * @param {Image} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function image(node, _, state, info) {\n  const quote = checkQuote(state)\n  const suffix = quote === '\"' ? 'Quote' : 'Apostrophe'\n  const exit = state.enter('image')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('![')\n  value += tracker.move(\n    state.safe(node.alt, {before: value, after: ']', ...tracker.current()})\n  )\n  value += tracker.move('](')\n\n  subexit()\n\n  if (\n    // If there’s no url but there is a title…\n    (!node.url && node.title) ||\n    // If there are control characters or whitespace.\n    /[\\0- \\u007F]/.test(node.url)\n  ) {\n    subexit = state.enter('destinationLiteral')\n    value += tracker.move('<')\n    value += tracker.move(\n      state.safe(node.url, {before: value, after: '>', ...tracker.current()})\n    )\n    value += tracker.move('>')\n  } else {\n    // No whitespace, raw is prettier.\n    subexit = state.enter('destinationRaw')\n    value += tracker.move(\n      state.safe(node.url, {\n        before: value,\n        after: node.title ? ' ' : ')',\n        ...tracker.current()\n      })\n    )\n  }\n\n  subexit()\n\n  if (node.title) {\n    subexit = state.enter(`title${suffix}`)\n    value += tracker.move(' ' + quote)\n    value += tracker.move(\n      state.safe(node.title, {\n        before: value,\n        after: quote,\n        ...tracker.current()\n      })\n    )\n    value += tracker.move(quote)\n    subexit()\n  }\n\n  value += tracker.move(')')\n  exit()\n\n  return value\n}\n\n/**\n * @returns {string}\n */\nfunction imagePeek() {\n  return '!'\n}\n","/**\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimageReference.peek = imageReferencePeek\n\n/**\n * @param {ImageReference} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function imageReference(node, _, state, info) {\n  const type = node.referenceType\n  const exit = state.enter('imageReference')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('![')\n  const alt = state.safe(node.alt, {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  value += tracker.move(alt + '][')\n\n  subexit()\n  // Hide the fact that we’re in phrasing, because escapes don’t work.\n  const stack = state.stack\n  state.stack = []\n  subexit = state.enter('reference')\n  // Note: for proper tracking, we should reset the output positions when we end\n  // up making a `shortcut` reference, because then there is no brace output.\n  // Practically, in that case, there is no content, so it doesn’t matter that\n  // we’ve tracked one too many characters.\n  const reference = state.safe(state.associationId(node), {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  subexit()\n  state.stack = stack\n  exit()\n\n  if (type === 'full' || !alt || alt !== reference) {\n    value += tracker.move(reference + ']')\n  } else if (type === 'shortcut') {\n    // Remove the unwanted `[`.\n    value = value.slice(0, -1)\n  } else {\n    value += tracker.move(']')\n  }\n\n  return value\n}\n\n/**\n * @returns {string}\n */\nfunction imageReferencePeek() {\n  return '!'\n}\n","/**\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').State} State\n */\n\ninlineCode.peek = inlineCodePeek\n\n/**\n * @param {InlineCode} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @returns {string}\n */\nexport function inlineCode(node, _, state) {\n  let value = node.value || ''\n  let sequence = '`'\n  let index = -1\n\n  // If there is a single grave accent on its own in the code, use a fence of\n  // two.\n  // If there are two in a row, use one.\n  while (new RegExp('(^|[^`])' + sequence + '([^`]|$)').test(value)) {\n    sequence += '`'\n  }\n\n  // If this is not just spaces or eols (tabs don’t count), and either the\n  // first or last character are a space, eol, or tick, then pad with spaces.\n  if (\n    /[^ \\r\\n]/.test(value) &&\n    ((/^[ \\r\\n]/.test(value) && /[ \\r\\n]$/.test(value)) || /^`|`$/.test(value))\n  ) {\n    value = ' ' + value + ' '\n  }\n\n  // We have a potential problem: certain characters after eols could result in\n  // blocks being seen.\n  // For example, if someone injected the string `'\\n# b'`, then that would\n  // result in an ATX heading.\n  // We can’t escape characters in `inlineCode`, but because eols are\n  // transformed to spaces when going from markdown to HTML anyway, we can swap\n  // them out.\n  while (++index < state.unsafe.length) {\n    const pattern = state.unsafe[index]\n    const expression = state.compilePattern(pattern)\n    /** @type {RegExpExecArray | null} */\n    let match\n\n    // Only look for `atBreak`s.\n    // Btw: note that `atBreak` patterns will always start the regex at LF or\n    // CR.\n    if (!pattern.atBreak) continue\n\n    while ((match = expression.exec(value))) {\n      let position = match.index\n\n      // Support CRLF (patterns only look for one of the characters).\n      if (\n        value.charCodeAt(position) === 10 /* `\\n` */ &&\n        value.charCodeAt(position - 1) === 13 /* `\\r` */\n      ) {\n        position--\n      }\n\n      value = value.slice(0, position) + ' ' + value.slice(match.index + 1)\n    }\n  }\n\n  return sequence + value + sequence\n}\n\n/**\n * @returns {string}\n */\nfunction inlineCodePeek() {\n  return '`'\n}\n","/**\n * @typedef {import('mdast').Link} Link\n * @typedef {import('../types.js').State} State\n */\n\nimport {toString} from 'mdast-util-to-string'\n\n/**\n * @param {Link} node\n * @param {State} state\n * @returns {boolean}\n */\nexport function formatLinkAsAutolink(node, state) {\n  const raw = toString(node)\n\n  return Boolean(\n    !state.options.resourceLink &&\n      // If there’s a url…\n      node.url &&\n      // And there’s a no title…\n      !node.title &&\n      // And the content of `node` is a single text node…\n      node.children &&\n      node.children.length === 1 &&\n      node.children[0].type === 'text' &&\n      // And if the url is the same as the content…\n      (raw === node.url || 'mailto:' + raw === node.url) &&\n      // And that starts w/ a protocol…\n      /^[a-z][a-z+.-]+:/i.test(node.url) &&\n      // And that doesn’t contain ASCII control codes (character escapes and\n      // references don’t work), space, or angle brackets…\n      !/[\\0- <>\\u007F]/.test(node.url)\n  )\n}\n","/**\n * @typedef {import('mdast').Link} Link\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Exit} Exit\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimport {checkQuote} from '../util/check-quote.js'\nimport {formatLinkAsAutolink} from '../util/format-link-as-autolink.js'\n\nlink.peek = linkPeek\n\n/**\n * @param {Link} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function link(node, _, state, info) {\n  const quote = checkQuote(state)\n  const suffix = quote === '\"' ? 'Quote' : 'Apostrophe'\n  const tracker = state.createTracker(info)\n  /** @type {Exit} */\n  let exit\n  /** @type {Exit} */\n  let subexit\n\n  if (formatLinkAsAutolink(node, state)) {\n    // Hide the fact that we’re in phrasing, because escapes don’t work.\n    const stack = state.stack\n    state.stack = []\n    exit = state.enter('autolink')\n    let value = tracker.move('<')\n    value += tracker.move(\n      state.containerPhrasing(node, {\n        before: value,\n        after: '>',\n        ...tracker.current()\n      })\n    )\n    value += tracker.move('>')\n    exit()\n    state.stack = stack\n    return value\n  }\n\n  exit = state.enter('link')\n  subexit = state.enter('label')\n  let value = tracker.move('[')\n  value += tracker.move(\n    state.containerPhrasing(node, {\n      before: value,\n      after: '](',\n      ...tracker.current()\n    })\n  )\n  value += tracker.move('](')\n  subexit()\n\n  if (\n    // If there’s no url but there is a title…\n    (!node.url && node.title) ||\n    // If there are control characters or whitespace.\n    /[\\0- \\u007F]/.test(node.url)\n  ) {\n    subexit = state.enter('destinationLiteral')\n    value += tracker.move('<')\n    value += tracker.move(\n      state.safe(node.url, {before: value, after: '>', ...tracker.current()})\n    )\n    value += tracker.move('>')\n  } else {\n    // No whitespace, raw is prettier.\n    subexit = state.enter('destinationRaw')\n    value += tracker.move(\n      state.safe(node.url, {\n        before: value,\n        after: node.title ? ' ' : ')',\n        ...tracker.current()\n      })\n    )\n  }\n\n  subexit()\n\n  if (node.title) {\n    subexit = state.enter(`title${suffix}`)\n    value += tracker.move(' ' + quote)\n    value += tracker.move(\n      state.safe(node.title, {\n        before: value,\n        after: quote,\n        ...tracker.current()\n      })\n    )\n    value += tracker.move(quote)\n    subexit()\n  }\n\n  value += tracker.move(')')\n\n  exit()\n  return value\n}\n\n/**\n * @param {Link} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @returns {string}\n */\nfunction linkPeek(node, _, state) {\n  return formatLinkAsAutolink(node, state) ? '<' : '['\n}\n","/**\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nlinkReference.peek = linkReferencePeek\n\n/**\n * @param {LinkReference} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function linkReference(node, _, state, info) {\n  const type = node.referenceType\n  const exit = state.enter('linkReference')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('[')\n  const text = state.containerPhrasing(node, {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  value += tracker.move(text + '][')\n\n  subexit()\n  // Hide the fact that we’re in phrasing, because escapes don’t work.\n  const stack = state.stack\n  state.stack = []\n  subexit = state.enter('reference')\n  // Note: for proper tracking, we should reset the output positions when we end\n  // up making a `shortcut` reference, because then there is no brace output.\n  // Practically, in that case, there is no content, so it doesn’t matter that\n  // we’ve tracked one too many characters.\n  const reference = state.safe(state.associationId(node), {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  subexit()\n  state.stack = stack\n  exit()\n\n  if (type === 'full' || !text || text !== reference) {\n    value += tracker.move(reference + ']')\n  } else if (type === 'shortcut') {\n    // Remove the unwanted `[`.\n    value = value.slice(0, -1)\n  } else {\n    value += tracker.move(']')\n  }\n\n  return value\n}\n\n/**\n * @returns {string}\n */\nfunction linkReferencePeek() {\n  return '['\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['bullet'], null | undefined>}\n */\nexport function checkBullet(state) {\n  const marker = state.options.bullet || '*'\n\n  if (marker !== '*' && marker !== '+' && marker !== '-') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        marker +\n        '` for `options.bullet`, expected `*`, `+`, or `-`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['rule'], null | undefined>}\n */\nexport function checkRule(state) {\n  const marker = state.options.rule || '*'\n\n  if (marker !== '*' && marker !== '-' && marker !== '_') {\n    throw new Error(\n      'Cannot serialize rules with `' +\n        marker +\n        '` for `options.rule`, expected `*`, `-`, or `_`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n */\n\n/**\n * @template Fn\n * @template Fallback\n * @typedef {Fn extends (value: any) => value is infer Thing ? Thing : Fallback} Predicate\n */\n\n/**\n * @callback Check\n *   Check that an arbitrary value is a node.\n * @param {unknown} this\n *   The given context.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean}\n *   Whether this is a node and passes a test.\n *\n * @typedef {Record<string, unknown> | Node} Props\n *   Object to check for equivalence.\n *\n *   Note: `Node` is included as it is common but is not indexable.\n *\n * @typedef {Array<Props | TestFunction | string> | Props | TestFunction | string | null | undefined} Test\n *   Check for an arbitrary node.\n *\n * @callback TestFunction\n *   Check if a node passes a test.\n * @param {unknown} this\n *   The given context.\n * @param {Node} node\n *   A node.\n * @param {number | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean | undefined | void}\n *   Whether this node passes the test.\n *\n *   Note: `void` is included until TS sees no return as `undefined`.\n */\n\n/**\n * Check if `node` is a `Node` and whether it passes the given test.\n *\n * @param {unknown} node\n *   Thing to check, typically `Node`.\n * @param {Test} test\n *   A check for a specific node.\n * @param {number | null | undefined} index\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} parent\n *   The node’s parent.\n * @param {unknown} context\n *   Context object (`this`) to pass to `test` functions.\n * @returns {boolean}\n *   Whether `node` is a node and passes a test.\n */\nexport const is =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((node?: null | undefined) => false) &\n   *   ((node: unknown, test?: null | undefined, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((node: unknown, test?: Test, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => boolean)\n   * )}\n   */\n  (\n    /**\n     * @param {unknown} [node]\n     * @param {Test} [test]\n     * @param {number | null | undefined} [index]\n     * @param {Parent | null | undefined} [parent]\n     * @param {unknown} [context]\n     * @returns {boolean}\n     */\n    // eslint-disable-next-line max-params\n    function (node, test, index, parent, context) {\n      const check = convert(test)\n\n      if (\n        index !== undefined &&\n        index !== null &&\n        (typeof index !== 'number' ||\n          index < 0 ||\n          index === Number.POSITIVE_INFINITY)\n      ) {\n        throw new Error('Expected positive finite index')\n      }\n\n      if (\n        parent !== undefined &&\n        parent !== null &&\n        (!is(parent) || !parent.children)\n      ) {\n        throw new Error('Expected parent node')\n      }\n\n      if (\n        (parent === undefined || parent === null) !==\n        (index === undefined || index === null)\n      ) {\n        throw new Error('Expected both parent and index')\n      }\n\n      return looksLikeANode(node)\n        ? check.call(context, node, index, parent)\n        : false\n    }\n  )\n\n/**\n * Generate an assertion from a test.\n *\n * Useful if you’re going to test many nodes, for example when creating a\n * utility where something else passes a compatible test.\n *\n * The created function is a bit faster because it expects valid input only:\n * a `node`, `index`, and `parent`.\n *\n * @param {Test} test\n *   *   when nullish, checks if `node` is a `Node`.\n *   *   when `string`, works like passing `(node) => node.type === test`.\n *   *   when `function` checks if function passed the node is true.\n *   *   when `object`, checks that all keys in test are in node, and that they have (strictly) equal values.\n *   *   when `array`, checks if any one of the subtests pass.\n * @returns {Check}\n *   An assertion.\n */\nexport const convert =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((test?: null | undefined) => (node?: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((test?: Test) => Check)\n   * )}\n   */\n  (\n    /**\n     * @param {Test} [test]\n     * @returns {Check}\n     */\n    function (test) {\n      if (test === null || test === undefined) {\n        return ok\n      }\n\n      if (typeof test === 'function') {\n        return castFactory(test)\n      }\n\n      if (typeof test === 'object') {\n        return Array.isArray(test) ? anyFactory(test) : propsFactory(test)\n      }\n\n      if (typeof test === 'string') {\n        return typeFactory(test)\n      }\n\n      throw new Error('Expected function, string, or object as test')\n    }\n  )\n\n/**\n * @param {Array<Props | TestFunction | string>} tests\n * @returns {Check}\n */\nfunction anyFactory(tests) {\n  /** @type {Array<Check>} */\n  const checks = []\n  let index = -1\n\n  while (++index < tests.length) {\n    checks[index] = convert(tests[index])\n  }\n\n  return castFactory(any)\n\n  /**\n   * @this {unknown}\n   * @type {TestFunction}\n   */\n  function any(...parameters) {\n    let index = -1\n\n    while (++index < checks.length) {\n      if (checks[index].apply(this, parameters)) return true\n    }\n\n    return false\n  }\n}\n\n/**\n * Turn an object into a test for a node with a certain fields.\n *\n * @param {Props} check\n * @returns {Check}\n */\nfunction propsFactory(check) {\n  const checkAsRecord = /** @type {Record<string, unknown>} */ (check)\n\n  return castFactory(all)\n\n  /**\n   * @param {Node} node\n   * @returns {boolean}\n   */\n  function all(node) {\n    const nodeAsRecord = /** @type {Record<string, unknown>} */ (\n      /** @type {unknown} */ (node)\n    )\n\n    /** @type {string} */\n    let key\n\n    for (key in check) {\n      if (nodeAsRecord[key] !== checkAsRecord[key]) return false\n    }\n\n    return true\n  }\n}\n\n/**\n * Turn a string into a test for a node with a certain type.\n *\n * @param {string} check\n * @returns {Check}\n */\nfunction typeFactory(check) {\n  return castFactory(type)\n\n  /**\n   * @param {Node} node\n   */\n  function type(node) {\n    return node && node.type === check\n  }\n}\n\n/**\n * Turn a custom test into a test for a node that passes that test.\n *\n * @param {TestFunction} testFunction\n * @returns {Check}\n */\nfunction castFactory(testFunction) {\n  return check\n\n  /**\n   * @this {unknown}\n   * @type {Check}\n   */\n  function check(value, index, parent) {\n    return Boolean(\n      looksLikeANode(value) &&\n        testFunction.call(\n          this,\n          value,\n          typeof index === 'number' ? index : undefined,\n          parent || undefined\n        )\n    )\n  }\n}\n\nfunction ok() {\n  return true\n}\n\n/**\n * @param {unknown} value\n * @returns {value is Node}\n */\nfunction looksLikeANode(value) {\n  return value !== null && typeof value === 'object' && 'type' in value\n}\n","/**\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n */\n\nimport {convert} from 'unist-util-is'\n\n/**\n * Check if the given value is *phrasing content*.\n *\n * > 👉 **Note**: Excludes `html`, which can be both phrasing or flow.\n *\n * @param node\n *   Thing to check, typically `Node`.\n * @returns\n *   Whether `value` is phrasing content.\n */\n\nexport const phrasing =\n  /** @type {(node?: unknown) => node is PhrasingContent} */\n  (\n    convert([\n      'break',\n      'delete',\n      'emphasis',\n      'footnote',\n      'footnoteReference',\n      'image',\n      'imageReference',\n      'inlineCode',\n      'link',\n      'linkReference',\n      'strong',\n      'text'\n    ])\n  )\n","/**\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimport {checkStrong} from '../util/check-strong.js'\n\nstrong.peek = strongPeek\n\n// To do: there are cases where emphasis cannot “form” depending on the\n// previous or next character of sequences.\n// There’s no way around that though, except for injecting zero-width stuff.\n// Do we need to safeguard against that?\n/**\n * @param {Strong} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function strong(node, _, state, info) {\n  const marker = checkStrong(state)\n  const exit = state.enter('strong')\n  const tracker = state.createTracker(info)\n  let value = tracker.move(marker + marker)\n  value += tracker.move(\n    state.containerPhrasing(node, {\n      before: value,\n      after: marker,\n      ...tracker.current()\n    })\n  )\n  value += tracker.move(marker + marker)\n  exit()\n  return value\n}\n\n/**\n * @param {Strong} _\n * @param {Parents | undefined} _1\n * @param {State} state\n * @returns {string}\n */\nfunction strongPeek(_, _1, state) {\n  return state.options.strong || '*'\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['strong'], null | undefined>}\n */\nexport function checkStrong(state) {\n  const marker = state.options.strong || '*'\n\n  if (marker !== '*' && marker !== '_') {\n    throw new Error(\n      'Cannot serialize strong with `' +\n        marker +\n        '` for `options.strong`, expected `*`, or `_`'\n    )\n  }\n\n  return marker\n}\n","import {blockquote} from './blockquote.js'\nimport {hardBreak} from './break.js'\nimport {code} from './code.js'\nimport {definition} from './definition.js'\nimport {emphasis} from './emphasis.js'\nimport {heading} from './heading.js'\nimport {html} from './html.js'\nimport {image} from './image.js'\nimport {imageReference} from './image-reference.js'\nimport {inlineCode} from './inline-code.js'\nimport {link} from './link.js'\nimport {linkReference} from './link-reference.js'\nimport {list} from './list.js'\nimport {listItem} from './list-item.js'\nimport {paragraph} from './paragraph.js'\nimport {root} from './root.js'\nimport {strong} from './strong.js'\nimport {text} from './text.js'\nimport {thematicBreak} from './thematic-break.js'\n\n/**\n * Default (CommonMark) handlers.\n */\nexport const handle = {\n  blockquote,\n  break: hardBreak,\n  code,\n  definition,\n  emphasis,\n  hardBreak,\n  heading,\n  html,\n  image,\n  imageReference,\n  inlineCode,\n  link,\n  linkReference,\n  list,\n  listItem,\n  paragraph,\n  root,\n  strong,\n  text,\n  thematicBreak\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['fence'], null | undefined>}\n */\nexport function checkFence(state) {\n  const marker = state.options.fence || '`'\n\n  if (marker !== '`' && marker !== '~') {\n    throw new Error(\n      'Cannot serialize code with `' +\n        marker +\n        '` for `options.fence`, expected `` ` `` or `~`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @typedef {import('mdast').Code} Code\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {Code} node\n * @param {State} state\n * @returns {boolean}\n */\nexport function formatCodeAsIndented(node, state) {\n  return Boolean(\n    state.options.fences === false &&\n      node.value &&\n      // If there’s no info…\n      !node.lang &&\n      // And there’s a non-whitespace character…\n      /[^ \\r\\n]/.test(node.value) &&\n      // And the value doesn’t start or end in a blank…\n      !/^[\\t ]*(?:[\\r\\n]|$)|(?:^|[\\r\\n])[\\t ]*$/.test(node.value)\n  )\n}\n","/**\n * Get the count of the longest repeating streak of `substring` in `value`.\n *\n * @param {string} value\n *   Content to search in.\n * @param {string} substring\n *   Substring to look for, typically one character.\n * @returns {number}\n *   Count of most frequent adjacent `substring`s in `value`.\n */\nexport function longestStreak(value, substring) {\n  const source = String(value)\n  let index = source.indexOf(substring)\n  let expected = index\n  let count = 0\n  let max = 0\n\n  if (typeof substring !== 'string') {\n    throw new TypeError('Expected substring')\n  }\n\n  while (index !== -1) {\n    if (index === expected) {\n      if (++count > max) {\n        max = count\n      }\n    } else {\n      count = 1\n    }\n\n    expected = index + substring.length\n    index = source.indexOf(substring, expected)\n  }\n\n  return max\n}\n","/**\n * @typedef {import('mdast').Definition} Definition\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimport {checkQuote} from '../util/check-quote.js'\n\n/**\n * @param {Definition} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function definition(node, _, state, info) {\n  const quote = checkQuote(state)\n  const suffix = quote === '\"' ? 'Quote' : 'Apostrophe'\n  const exit = state.enter('definition')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('[')\n  value += tracker.move(\n    state.safe(state.associationId(node), {\n      before: value,\n      after: ']',\n      ...tracker.current()\n    })\n  )\n  value += tracker.move(']: ')\n\n  subexit()\n\n  if (\n    // If there’s no url, or…\n    !node.url ||\n    // If there are control characters or whitespace.\n    /[\\0- \\u007F]/.test(node.url)\n  ) {\n    subexit = state.enter('destinationLiteral')\n    value += tracker.move('<')\n    value += tracker.move(\n      state.safe(node.url, {before: value, after: '>', ...tracker.current()})\n    )\n    value += tracker.move('>')\n  } else {\n    // No whitespace, raw is prettier.\n    subexit = state.enter('destinationRaw')\n    value += tracker.move(\n      state.safe(node.url, {\n        before: value,\n        after: node.title ? ' ' : '\\n',\n        ...tracker.current()\n      })\n    )\n  }\n\n  subexit()\n\n  if (node.title) {\n    subexit = state.enter(`title${suffix}`)\n    value += tracker.move(' ' + quote)\n    value += tracker.move(\n      state.safe(node.title, {\n        before: value,\n        after: quote,\n        ...tracker.current()\n      })\n    )\n    value += tracker.move(quote)\n    subexit()\n  }\n\n  exit()\n\n  return value\n}\n","/**\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimport {formatHeadingAsSetext} from '../util/format-heading-as-setext.js'\n\n/**\n * @param {Heading} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function heading(node, _, state, info) {\n  const rank = Math.max(Math.min(6, node.depth || 1), 1)\n  const tracker = state.createTracker(info)\n\n  if (formatHeadingAsSetext(node, state)) {\n    const exit = state.enter('headingSetext')\n    const subexit = state.enter('phrasing')\n    const value = state.containerPhrasing(node, {\n      ...tracker.current(),\n      before: '\\n',\n      after: '\\n'\n    })\n    subexit()\n    exit()\n\n    return (\n      value +\n      '\\n' +\n      (rank === 1 ? '=' : '-').repeat(\n        // The whole size…\n        value.length -\n          // Minus the position of the character after the last EOL (or\n          // 0 if there is none)…\n          (Math.max(value.lastIndexOf('\\r'), value.lastIndexOf('\\n')) + 1)\n      )\n    )\n  }\n\n  const sequence = '#'.repeat(rank)\n  const exit = state.enter('headingAtx')\n  const subexit = state.enter('phrasing')\n\n  // Note: for proper tracking, we should reset the output positions when there\n  // is no content returned, because then the space is not output.\n  // Practically, in that case, there is no content, so it doesn’t matter that\n  // we’ve tracked one too many characters.\n  tracker.move(sequence + ' ')\n\n  let value = state.containerPhrasing(node, {\n    before: '# ',\n    after: '\\n',\n    ...tracker.current()\n  })\n\n  if (/^[\\t ]/.test(value)) {\n    // To do: what effect has the character reference on tracking?\n    value =\n      '&#x' +\n      value.charCodeAt(0).toString(16).toUpperCase() +\n      ';' +\n      value.slice(1)\n  }\n\n  value = value ? sequence + ' ' + value : sequence\n\n  if (state.options.closeAtx) {\n    value += ' ' + sequence\n  }\n\n  subexit()\n  exit()\n\n  return value\n}\n","/**\n * @typedef {import('mdast').List} List\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimport {checkBullet} from '../util/check-bullet.js'\nimport {checkBulletOther} from '../util/check-bullet-other.js'\nimport {checkBulletOrdered} from '../util/check-bullet-ordered.js'\nimport {checkRule} from '../util/check-rule.js'\n\n/**\n * @param {List} node\n * @param {Parents | undefined} parent\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function list(node, parent, state, info) {\n  const exit = state.enter('list')\n  const bulletCurrent = state.bulletCurrent\n  /** @type {string} */\n  let bullet = node.ordered ? checkBulletOrdered(state) : checkBullet(state)\n  /** @type {string} */\n  const bulletOther = node.ordered\n    ? bullet === '.'\n      ? ')'\n      : '.'\n    : checkBulletOther(state)\n  let useDifferentMarker =\n    parent && state.bulletLastUsed ? bullet === state.bulletLastUsed : false\n\n  if (!node.ordered) {\n    const firstListItem = node.children ? node.children[0] : undefined\n\n    // If there’s an empty first list item directly in two list items,\n    // we have to use a different bullet:\n    //\n    // ```markdown\n    // * - *\n    // ```\n    //\n    // …because otherwise it would become one big thematic break.\n    if (\n      // Bullet could be used as a thematic break marker:\n      (bullet === '*' || bullet === '-') &&\n      // Empty first list item:\n      firstListItem &&\n      (!firstListItem.children || !firstListItem.children[0]) &&\n      // Directly in two other list items:\n      state.stack[state.stack.length - 1] === 'list' &&\n      state.stack[state.stack.length - 2] === 'listItem' &&\n      state.stack[state.stack.length - 3] === 'list' &&\n      state.stack[state.stack.length - 4] === 'listItem' &&\n      // That are each the first child.\n      state.indexStack[state.indexStack.length - 1] === 0 &&\n      state.indexStack[state.indexStack.length - 2] === 0 &&\n      state.indexStack[state.indexStack.length - 3] === 0\n    ) {\n      useDifferentMarker = true\n    }\n\n    // If there’s a thematic break at the start of the first list item,\n    // we have to use a different bullet:\n    //\n    // ```markdown\n    // * ---\n    // ```\n    //\n    // …because otherwise it would become one big thematic break.\n    if (checkRule(state) === bullet && firstListItem) {\n      let index = -1\n\n      while (++index < node.children.length) {\n        const item = node.children[index]\n\n        if (\n          item &&\n          item.type === 'listItem' &&\n          item.children &&\n          item.children[0] &&\n          item.children[0].type === 'thematicBreak'\n        ) {\n          useDifferentMarker = true\n          break\n        }\n      }\n    }\n  }\n\n  if (useDifferentMarker) {\n    bullet = bulletOther\n  }\n\n  state.bulletCurrent = bullet\n  const value = state.containerFlow(node, info)\n  state.bulletLastUsed = bullet\n  state.bulletCurrent = bulletCurrent\n  exit()\n  return value\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['bulletOrdered'], null | undefined>}\n */\nexport function checkBulletOrdered(state) {\n  const marker = state.options.bulletOrdered || '.'\n\n  if (marker !== '.' && marker !== ')') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        marker +\n        '` for `options.bulletOrdered`, expected `.` or `)`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\nimport {checkBullet} from './check-bullet.js'\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['bullet'], null | undefined>}\n */\nexport function checkBulletOther(state) {\n  const bullet = checkBullet(state)\n  const bulletOther = state.options.bulletOther\n\n  if (!bulletOther) {\n    return bullet === '*' ? '-' : '*'\n  }\n\n  if (bulletOther !== '*' && bulletOther !== '+' && bulletOther !== '-') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        bulletOther +\n        '` for `options.bulletOther`, expected `*`, `+`, or `-`'\n    )\n  }\n\n  if (bulletOther === bullet) {\n    throw new Error(\n      'Expected `bullet` (`' +\n        bullet +\n        '`) and `bulletOther` (`' +\n        bulletOther +\n        '`) to be different'\n    )\n  }\n\n  return bulletOther\n}\n","/**\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').Map} Map\n * @typedef {import('../types.js').State} State\n */\n\nimport {checkBullet} from '../util/check-bullet.js'\nimport {checkListItemIndent} from '../util/check-list-item-indent.js'\n\n/**\n * @param {ListItem} node\n * @param {Parents | undefined} parent\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function listItem(node, parent, state, info) {\n  const listItemIndent = checkListItemIndent(state)\n  let bullet = state.bulletCurrent || checkBullet(state)\n\n  // Add the marker value for ordered lists.\n  if (parent && parent.type === 'list' && parent.ordered) {\n    bullet =\n      (typeof parent.start === 'number' && parent.start > -1\n        ? parent.start\n        : 1) +\n      (state.options.incrementListMarker === false\n        ? 0\n        : parent.children.indexOf(node)) +\n      bullet\n  }\n\n  let size = bullet.length + 1\n\n  if (\n    listItemIndent === 'tab' ||\n    (listItemIndent === 'mixed' &&\n      ((parent && parent.type === 'list' && parent.spread) || node.spread))\n  ) {\n    size = Math.ceil(size / 4) * 4\n  }\n\n  const tracker = state.createTracker(info)\n  tracker.move(bullet + ' '.repeat(size - bullet.length))\n  tracker.shift(size)\n  const exit = state.enter('listItem')\n  const value = state.indentLines(\n    state.containerFlow(node, tracker.current()),\n    map\n  )\n  exit()\n\n  return value\n\n  /** @type {Map} */\n  function map(line, index, blank) {\n    if (index) {\n      return (blank ? '' : ' '.repeat(size)) + line\n    }\n\n    return (blank ? bullet : bullet + ' '.repeat(size - bullet.length)) + line\n  }\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['listItemIndent'], null | undefined>}\n */\nexport function checkListItemIndent(state) {\n  const style = state.options.listItemIndent || 'one'\n\n  if (style !== 'tab' && style !== 'one' && style !== 'mixed') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        style +\n        '` for `options.listItemIndent`, expected `tab`, `one`, or `mixed`'\n    )\n  }\n\n  return style\n}\n","/**\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {Paragraph} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function paragraph(node, _, state, info) {\n  const exit = state.enter('paragraph')\n  const subexit = state.enter('phrasing')\n  const value = state.containerPhrasing(node, info)\n  subexit()\n  exit()\n  return value\n}\n","/**\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('mdast').Root} Root\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimport {phrasing} from 'mdast-util-phrasing'\n\n/**\n * @param {Root} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function root(node, _, state, info) {\n  // Note: `html` nodes are ambiguous.\n  const hasPhrasing = node.children.some(function (d) {\n    return phrasing(d)\n  })\n  const fn = hasPhrasing ? state.containerPhrasing : state.containerFlow\n  return fn.call(state, node, info)\n}\n","/**\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('mdast').Text} Text\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {Text} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function text(node, _, state, info) {\n  return state.safe(node.value, info)\n}\n","/**\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n * @typedef {import('../types.js').State} State\n */\n\nimport {checkRuleRepetition} from '../util/check-rule-repetition.js'\nimport {checkRule} from '../util/check-rule.js'\n\n/**\n * @param {ThematicBreak} _\n * @param {Parents | undefined} _1\n * @param {State} state\n * @returns {string}\n */\nexport function thematicBreak(_, _1, state) {\n  const value = (\n    checkRule(state) + (state.options.ruleSpaces ? ' ' : '')\n  ).repeat(checkRuleRepetition(state))\n\n  return state.options.ruleSpaces ? value.slice(0, -1) : value\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['ruleRepetition'], null | undefined>}\n */\nexport function checkRuleRepetition(state) {\n  const repetition = state.options.ruleRepetition || 3\n\n  if (repetition < 3) {\n    throw new Error(\n      'Cannot serialize rules with repetition `' +\n        repetition +\n        '` for `options.ruleRepetition`, expected `3` or more'\n    )\n  }\n\n  return repetition\n}\n","/**\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('mdast').Table} Table\n * @typedef {import('mdast').TableCell} TableCell\n * @typedef {import('mdast').TableRow} TableRow\n *\n * @typedef {import('markdown-table').Options} MarkdownTableOptions\n *\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n *\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').State} State\n * @typedef {import('mdast-util-to-markdown').Info} Info\n */\n\n/**\n * @typedef Options\n *   Configuration.\n * @property {boolean | null | undefined} [tableCellPadding=true]\n *   Whether to add a space of padding between delimiters and cells (default:\n *   `true`).\n * @property {boolean | null | undefined} [tablePipeAlign=true]\n *   Whether to align the delimiters (default: `true`).\n * @property {MarkdownTableOptions['stringLength'] | null | undefined} [stringLength]\n *   Function to detect the length of table cell content, used when aligning\n *   the delimiters between cells (optional).\n */\n\nimport {ok as assert} from 'devlop'\nimport {markdownTable} from 'markdown-table'\nimport {defaultHandlers} from 'mdast-util-to-markdown'\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM tables in\n * markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown` to enable GFM tables.\n */\nexport function gfmTableFromMarkdown() {\n  return {\n    enter: {\n      table: enterTable,\n      tableData: enterCell,\n      tableHeader: enterCell,\n      tableRow: enterRow\n    },\n    exit: {\n      codeText: exitCodeText,\n      table: exitTable,\n      tableData: exit,\n      tableHeader: exit,\n      tableRow: exit\n    }\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterTable(token) {\n  const align = token._align\n  assert(align, 'expected `_align` on table')\n  this.enter(\n    {\n      type: 'table',\n      align: align.map(function (d) {\n        return d === 'none' ? null : d\n      }),\n      children: []\n    },\n    token\n  )\n  this.data.inTable = true\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitTable(token) {\n  this.exit(token)\n  this.data.inTable = undefined\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterRow(token) {\n  this.enter({type: 'tableRow', children: []}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exit(token) {\n  this.exit(token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterCell(token) {\n  this.enter({type: 'tableCell', children: []}, token)\n}\n\n// Overwrite the default code text data handler to unescape escaped pipes when\n// they are in tables.\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitCodeText(token) {\n  let value = this.resume()\n\n  if (this.data.inTable) {\n    value = value.replace(/\\\\([\\\\|])/g, replace)\n  }\n\n  const node = this.stack[this.stack.length - 1]\n  assert(node.type === 'inlineCode')\n  node.value = value\n  this.exit(token)\n}\n\n/**\n * @param {string} $0\n * @param {string} $1\n * @returns {string}\n */\nfunction replace($0, $1) {\n  // Pipes work, backslashes don’t (but can’t escape pipes).\n  return $1 === '|' ? $1 : $0\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM tables in\n * markdown.\n *\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM tables.\n */\nexport function gfmTableToMarkdown(options) {\n  const settings = options || {}\n  const padding = settings.tableCellPadding\n  const alignDelimiters = settings.tablePipeAlign\n  const stringLength = settings.stringLength\n  const around = padding ? ' ' : '|'\n\n  return {\n    unsafe: [\n      {character: '\\r', inConstruct: 'tableCell'},\n      {character: '\\n', inConstruct: 'tableCell'},\n      // A pipe, when followed by a tab or space (padding), or a dash or colon\n      // (unpadded delimiter row), could result in a table.\n      {atBreak: true, character: '|', after: '[\\t :-]'},\n      // A pipe in a cell must be encoded.\n      {character: '|', inConstruct: 'tableCell'},\n      // A colon must be followed by a dash, in which case it could start a\n      // delimiter row.\n      {atBreak: true, character: ':', after: '-'},\n      // A delimiter row can also start with a dash, when followed by more\n      // dashes, a colon, or a pipe.\n      // This is a stricter version than the built in check for lists, thematic\n      // breaks, and setex heading underlines though:\n      // <https://github.com/syntax-tree/mdast-util-to-markdown/blob/51a2038/lib/unsafe.js#L57>\n      {atBreak: true, character: '-', after: '[:|-]'}\n    ],\n    handlers: {\n      inlineCode: inlineCodeWithTable,\n      table: handleTable,\n      tableCell: handleTableCell,\n      tableRow: handleTableRow\n    }\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {Table} node\n   */\n  function handleTable(node, _, state, info) {\n    return serializeData(handleTableAsData(node, state, info), node.align)\n  }\n\n  /**\n   * This function isn’t really used normally, because we handle rows at the\n   * table level.\n   * But, if someone passes in a table row, this ensures we make somewhat sense.\n   *\n   * @type {ToMarkdownHandle}\n   * @param {TableRow} node\n   */\n  function handleTableRow(node, _, state, info) {\n    const row = handleTableRowAsData(node, state, info)\n    const value = serializeData([row])\n    // `markdown-table` will always add an align row\n    return value.slice(0, value.indexOf('\\n'))\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {TableCell} node\n   */\n  function handleTableCell(node, _, state, info) {\n    const exit = state.enter('tableCell')\n    const subexit = state.enter('phrasing')\n    const value = state.containerPhrasing(node, {\n      ...info,\n      before: around,\n      after: around\n    })\n    subexit()\n    exit()\n    return value\n  }\n\n  /**\n   * @param {Array<Array<string>>} matrix\n   * @param {Array<string | null | undefined> | null | undefined} [align]\n   */\n  function serializeData(matrix, align) {\n    return markdownTable(matrix, {\n      align,\n      // @ts-expect-error: `markdown-table` types should support `null`.\n      alignDelimiters,\n      // @ts-expect-error: `markdown-table` types should support `null`.\n      padding,\n      // @ts-expect-error: `markdown-table` types should support `null`.\n      stringLength\n    })\n  }\n\n  /**\n   * @param {Table} node\n   * @param {State} state\n   * @param {Info} info\n   */\n  function handleTableAsData(node, state, info) {\n    const children = node.children\n    let index = -1\n    /** @type {Array<Array<string>>} */\n    const result = []\n    const subexit = state.enter('table')\n\n    while (++index < children.length) {\n      result[index] = handleTableRowAsData(children[index], state, info)\n    }\n\n    subexit()\n\n    return result\n  }\n\n  /**\n   * @param {TableRow} node\n   * @param {State} state\n   * @param {Info} info\n   */\n  function handleTableRowAsData(node, state, info) {\n    const children = node.children\n    let index = -1\n    /** @type {Array<string>} */\n    const result = []\n    const subexit = state.enter('tableRow')\n\n    while (++index < children.length) {\n      // Note: the positional info as used here is incorrect.\n      // Making it correct would be impossible due to aligning cells?\n      // And it would need copy/pasting `markdown-table` into this project.\n      result[index] = handleTableCell(children[index], node, state, info)\n    }\n\n    subexit()\n\n    return result\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {InlineCode} node\n   */\n  function inlineCodeWithTable(node, parent, state) {\n    let value = defaultHandlers.inlineCode(node, parent, state)\n\n    if (state.stack.includes('tableCell')) {\n      value = value.replace(/\\|/g, '\\\\$&')\n    }\n\n    return value\n  }\n}\n","/**\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').Map} Map\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {Blockquote} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function blockquote(node, _, state, info) {\n  const exit = state.enter('blockquote')\n  const tracker = state.createTracker(info)\n  tracker.move('> ')\n  tracker.shift(2)\n  const value = state.indentLines(\n    state.containerFlow(node, tracker.current()),\n    map\n  )\n  exit()\n  return value\n}\n\n/** @type {Map} */\nfunction map(line, _, blank) {\n  return '>' + (blank ? '' : ' ') + line\n}\n","/**\n * @typedef {import('../types.js').ConstructName} ConstructName\n * @typedef {import('../types.js').Unsafe} Unsafe\n */\n\n/**\n * @param {Array<ConstructName>} stack\n * @param {Unsafe} pattern\n * @returns {boolean}\n */\nexport function patternInScope(stack, pattern) {\n  return (\n    listInScope(stack, pattern.inConstruct, true) &&\n    !listInScope(stack, pattern.notInConstruct, false)\n  )\n}\n\n/**\n * @param {Array<ConstructName>} stack\n * @param {Unsafe['inConstruct']} list\n * @param {boolean} none\n * @returns {boolean}\n */\nfunction listInScope(stack, list, none) {\n  if (typeof list === 'string') {\n    list = [list]\n  }\n\n  if (!list || list.length === 0) {\n    return none\n  }\n\n  let index = -1\n\n  while (++index < list.length) {\n    if (stack.includes(list[index])) {\n      return true\n    }\n  }\n\n  return false\n}\n","/**\n * @typedef {import('mdast').Break} Break\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimport {patternInScope} from '../util/pattern-in-scope.js'\n\n/**\n * @param {Break} _\n * @param {Parents | undefined} _1\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function hardBreak(_, _1, state, info) {\n  let index = -1\n\n  while (++index < state.unsafe.length) {\n    // If we can’t put eols in this construct (setext headings, tables), use a\n    // space instead.\n    if (\n      state.unsafe[index].character === '\\n' &&\n      patternInScope(state.stack, state.unsafe[index])\n    ) {\n      return /[ \\t]/.test(info.before) ? '' : ' '\n    }\n  }\n\n  return '\\\\\\n'\n}\n","/**\n * @typedef {import('mdast').Code} Code\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').Map} Map\n * @typedef {import('../types.js').State} State\n */\n\nimport {longestStreak} from 'longest-streak'\nimport {formatCodeAsIndented} from '../util/format-code-as-indented.js'\nimport {checkFence} from '../util/check-fence.js'\n\n/**\n * @param {Code} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function code(node, _, state, info) {\n  const marker = checkFence(state)\n  const raw = node.value || ''\n  const suffix = marker === '`' ? 'GraveAccent' : 'Tilde'\n\n  if (formatCodeAsIndented(node, state)) {\n    const exit = state.enter('codeIndented')\n    const value = state.indentLines(raw, map)\n    exit()\n    return value\n  }\n\n  const tracker = state.createTracker(info)\n  const sequence = marker.repeat(Math.max(longestStreak(raw, marker) + 1, 3))\n  const exit = state.enter('codeFenced')\n  let value = tracker.move(sequence)\n\n  if (node.lang) {\n    const subexit = state.enter(`codeFencedLang${suffix}`)\n    value += tracker.move(\n      state.safe(node.lang, {\n        before: value,\n        after: ' ',\n        encode: ['`'],\n        ...tracker.current()\n      })\n    )\n    subexit()\n  }\n\n  if (node.lang && node.meta) {\n    const subexit = state.enter(`codeFencedMeta${suffix}`)\n    value += tracker.move(' ')\n    value += tracker.move(\n      state.safe(node.meta, {\n        before: value,\n        after: '\\n',\n        encode: ['`'],\n        ...tracker.current()\n      })\n    )\n    subexit()\n  }\n\n  value += tracker.move('\\n')\n\n  if (raw) {\n    value += tracker.move(raw + '\\n')\n  }\n\n  value += tracker.move(sequence)\n  exit()\n  return value\n}\n\n/** @type {Map} */\nfunction map(line, _, blank) {\n  return (blank ? '' : '    ') + line\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['quote'], null | undefined>}\n */\nexport function checkQuote(state) {\n  const marker = state.options.quote || '\"'\n\n  if (marker !== '\"' && marker !== \"'\") {\n    throw new Error(\n      'Cannot serialize title with `' +\n        marker +\n        '` for `options.quote`, expected `\"`, or `\\'`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimport {checkEmphasis} from '../util/check-emphasis.js'\n\nemphasis.peek = emphasisPeek\n\n// To do: there are cases where emphasis cannot “form” depending on the\n// previous or next character of sequences.\n// There’s no way around that though, except for injecting zero-width stuff.\n// Do we need to safeguard against that?\n/**\n * @param {Emphasis} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function emphasis(node, _, state, info) {\n  const marker = checkEmphasis(state)\n  const exit = state.enter('emphasis')\n  const tracker = state.createTracker(info)\n  let value = tracker.move(marker)\n  value += tracker.move(\n    state.containerPhrasing(node, {\n      before: value,\n      after: marker,\n      ...tracker.current()\n    })\n  )\n  value += tracker.move(marker)\n  exit()\n  return value\n}\n\n/**\n * @param {Emphasis} _\n * @param {Parents | undefined} _1\n * @param {State} state\n * @returns {string}\n */\nfunction emphasisPeek(_, _1, state) {\n  return state.options.emphasis || '*'\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['emphasis'], null | undefined>}\n */\nexport function checkEmphasis(state) {\n  const marker = state.options.emphasis || '*'\n\n  if (marker !== '*' && marker !== '_') {\n    throw new Error(\n      'Cannot serialize emphasis with `' +\n        marker +\n        '` for `options.emphasis`, expected `*`, or `_`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n */\n\n/**\n * @template Fn\n * @template Fallback\n * @typedef {Fn extends (value: any) => value is infer Thing ? Thing : Fallback} Predicate\n */\n\n/**\n * @callback Check\n *   Check that an arbitrary value is a node.\n * @param {unknown} this\n *   The given context.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean}\n *   Whether this is a node and passes a test.\n *\n * @typedef {Record<string, unknown> | Node} Props\n *   Object to check for equivalence.\n *\n *   Note: `Node` is included as it is common but is not indexable.\n *\n * @typedef {Array<Props | TestFunction | string> | Props | TestFunction | string | null | undefined} Test\n *   Check for an arbitrary node.\n *\n * @callback TestFunction\n *   Check if a node passes a test.\n * @param {unknown} this\n *   The given context.\n * @param {Node} node\n *   A node.\n * @param {number | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean | undefined | void}\n *   Whether this node passes the test.\n *\n *   Note: `void` is included until TS sees no return as `undefined`.\n */\n\n/**\n * Check if `node` is a `Node` and whether it passes the given test.\n *\n * @param {unknown} node\n *   Thing to check, typically `Node`.\n * @param {Test} test\n *   A check for a specific node.\n * @param {number | null | undefined} index\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} parent\n *   The node’s parent.\n * @param {unknown} context\n *   Context object (`this`) to pass to `test` functions.\n * @returns {boolean}\n *   Whether `node` is a node and passes a test.\n */\nexport const is =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((node?: null | undefined) => false) &\n   *   ((node: unknown, test?: null | undefined, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((node: unknown, test?: Test, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => boolean)\n   * )}\n   */\n  (\n    /**\n     * @param {unknown} [node]\n     * @param {Test} [test]\n     * @param {number | null | undefined} [index]\n     * @param {Parent | null | undefined} [parent]\n     * @param {unknown} [context]\n     * @returns {boolean}\n     */\n    // eslint-disable-next-line max-params\n    function (node, test, index, parent, context) {\n      const check = convert(test)\n\n      if (\n        index !== undefined &&\n        index !== null &&\n        (typeof index !== 'number' ||\n          index < 0 ||\n          index === Number.POSITIVE_INFINITY)\n      ) {\n        throw new Error('Expected positive finite index')\n      }\n\n      if (\n        parent !== undefined &&\n        parent !== null &&\n        (!is(parent) || !parent.children)\n      ) {\n        throw new Error('Expected parent node')\n      }\n\n      if (\n        (parent === undefined || parent === null) !==\n        (index === undefined || index === null)\n      ) {\n        throw new Error('Expected both parent and index')\n      }\n\n      return looksLikeANode(node)\n        ? check.call(context, node, index, parent)\n        : false\n    }\n  )\n\n/**\n * Generate an assertion from a test.\n *\n * Useful if you’re going to test many nodes, for example when creating a\n * utility where something else passes a compatible test.\n *\n * The created function is a bit faster because it expects valid input only:\n * a `node`, `index`, and `parent`.\n *\n * @param {Test} test\n *   *   when nullish, checks if `node` is a `Node`.\n *   *   when `string`, works like passing `(node) => node.type === test`.\n *   *   when `function` checks if function passed the node is true.\n *   *   when `object`, checks that all keys in test are in node, and that they have (strictly) equal values.\n *   *   when `array`, checks if any one of the subtests pass.\n * @returns {Check}\n *   An assertion.\n */\nexport const convert =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((test?: null | undefined) => (node?: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((test?: Test) => Check)\n   * )}\n   */\n  (\n    /**\n     * @param {Test} [test]\n     * @returns {Check}\n     */\n    function (test) {\n      if (test === null || test === undefined) {\n        return ok\n      }\n\n      if (typeof test === 'function') {\n        return castFactory(test)\n      }\n\n      if (typeof test === 'object') {\n        return Array.isArray(test) ? anyFactory(test) : propsFactory(test)\n      }\n\n      if (typeof test === 'string') {\n        return typeFactory(test)\n      }\n\n      throw new Error('Expected function, string, or object as test')\n    }\n  )\n\n/**\n * @param {Array<Props | TestFunction | string>} tests\n * @returns {Check}\n */\nfunction anyFactory(tests) {\n  /** @type {Array<Check>} */\n  const checks = []\n  let index = -1\n\n  while (++index < tests.length) {\n    checks[index] = convert(tests[index])\n  }\n\n  return castFactory(any)\n\n  /**\n   * @this {unknown}\n   * @type {TestFunction}\n   */\n  function any(...parameters) {\n    let index = -1\n\n    while (++index < checks.length) {\n      if (checks[index].apply(this, parameters)) return true\n    }\n\n    return false\n  }\n}\n\n/**\n * Turn an object into a test for a node with a certain fields.\n *\n * @param {Props} check\n * @returns {Check}\n */\nfunction propsFactory(check) {\n  const checkAsRecord = /** @type {Record<string, unknown>} */ (check)\n\n  return castFactory(all)\n\n  /**\n   * @param {Node} node\n   * @returns {boolean}\n   */\n  function all(node) {\n    const nodeAsRecord = /** @type {Record<string, unknown>} */ (\n      /** @type {unknown} */ (node)\n    )\n\n    /** @type {string} */\n    let key\n\n    for (key in check) {\n      if (nodeAsRecord[key] !== checkAsRecord[key]) return false\n    }\n\n    return true\n  }\n}\n\n/**\n * Turn a string into a test for a node with a certain type.\n *\n * @param {string} check\n * @returns {Check}\n */\nfunction typeFactory(check) {\n  return castFactory(type)\n\n  /**\n   * @param {Node} node\n   */\n  function type(node) {\n    return node && node.type === check\n  }\n}\n\n/**\n * Turn a custom test into a test for a node that passes that test.\n *\n * @param {TestFunction} testFunction\n * @returns {Check}\n */\nfunction castFactory(testFunction) {\n  return check\n\n  /**\n   * @this {unknown}\n   * @type {Check}\n   */\n  function check(value, index, parent) {\n    return Boolean(\n      looksLikeANode(value) &&\n        testFunction.call(\n          this,\n          value,\n          typeof index === 'number' ? index : undefined,\n          parent || undefined\n        )\n    )\n  }\n}\n\nfunction ok() {\n  return true\n}\n\n/**\n * @param {unknown} value\n * @returns {value is Node}\n */\nfunction looksLikeANode(value) {\n  return value !== null && typeof value === 'object' && 'type' in value\n}\n","/**\n * @typedef {import('unist').Node} UnistNode\n * @typedef {import('unist').Parent} UnistParent\n */\n\n/**\n * @typedef {Exclude<import('unist-util-is').Test, undefined> | undefined} Test\n *   Test from `unist-util-is`.\n *\n *   Note: we have remove and add `undefined`, because otherwise when generating\n *   automatic `.d.ts` files, TS tries to flatten paths from a local perspective,\n *   which doesn’t work when publishing on npm.\n */\n\n/**\n * @typedef {(\n *   Fn extends (value: any) => value is infer Thing\n *   ? Thing\n *   : Fallback\n * )} Predicate\n *   Get the value of a type guard `Fn`.\n * @template Fn\n *   Value; typically function that is a type guard (such as `(x): x is Y`).\n * @template Fallback\n *   Value to yield if `Fn` is not a type guard.\n */\n\n/**\n * @typedef {(\n *   Check extends null | undefined // No test.\n *   ? Value\n *   : Value extends {type: Check} // String (type) test.\n *   ? Value\n *   : Value extends Check // Partial test.\n *   ? Value\n *   : Check extends Function // Function test.\n *   ? Predicate<Check, Value> extends Value\n *     ? Predicate<Check, Value>\n *     : never\n *   : never // Some other test?\n * )} MatchesOne\n *   Check whether a node matches a primitive check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test, but not arrays.\n */\n\n/**\n * @typedef {(\n *   Check extends Array<any>\n *   ? MatchesOne<Value, Check[keyof Check]>\n *   : MatchesOne<Value, Check>\n * )} Matches\n *   Check whether a node matches a check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test.\n */\n\n/**\n * @typedef {0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10} Uint\n *   Number; capped reasonably.\n */\n\n/**\n * @typedef {I extends 0 ? 1 : I extends 1 ? 2 : I extends 2 ? 3 : I extends 3 ? 4 : I extends 4 ? 5 : I extends 5 ? 6 : I extends 6 ? 7 : I extends 7 ? 8 : I extends 8 ? 9 : 10} Increment\n *   Increment a number in the type system.\n * @template {Uint} [I=0]\n *   Index.\n */\n\n/**\n * @typedef {(\n *   Node extends UnistParent\n *   ? Node extends {children: Array<infer Children>}\n *     ? Child extends Children ? Node : never\n *     : never\n *   : never\n * )} InternalParent\n *   Collect nodes that can be parents of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {InternalParent<InclusiveDescendant<Tree>, Child>} Parent\n *   Collect nodes in `Tree` that can be parents of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Depth extends Max\n *   ? never\n *   :\n *     | InternalParent<Node, Child>\n *     | InternalAncestor<Node, InternalParent<Node, Child>, Max, Increment<Depth>>\n * )} InternalAncestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {InternalAncestor<InclusiveDescendant<Tree>, Child>} Ancestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Tree extends UnistParent\n *     ? Depth extends Max\n *       ? Tree\n *       : Tree | InclusiveDescendant<Tree['children'][number], Max, Increment<Depth>>\n *     : Tree\n * )} InclusiveDescendant\n *   Collect all (inclusive) descendants of `Tree`.\n *\n *   > 👉 **Note**: for performance reasons, this seems to be the fastest way to\n *   > recurse without actually running into an infinite loop, which the\n *   > previous version did.\n *   >\n *   > Practically, a max of `2` is typically enough assuming a `Root` is\n *   > passed, but it doesn’t improve performance.\n *   > It gets higher with `List > ListItem > Table > TableRow > TableCell`.\n *   > Using up to `10` doesn’t hurt or help either.\n * @template {UnistNode} Tree\n *   Tree type.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {'skip' | boolean} Action\n *   Union of the action types.\n *\n * @typedef {number} Index\n *   Move to the sibling at `index` next (after node itself is completely\n *   traversed).\n *\n *   Useful if mutating the tree, such as removing the node the visitor is\n *   currently on, or any of its previous siblings.\n *   Results less than 0 or greater than or equal to `children.length` stop\n *   traversing the parent.\n *\n * @typedef {[(Action | null | undefined | void)?, (Index | null | undefined)?]} ActionTuple\n *   List with one or two values, the first an action, the second an index.\n *\n * @typedef {Action | ActionTuple | Index | null | undefined | void} VisitorResult\n *   Any value that can be returned from a visitor.\n */\n\n/**\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform the parent of node (the last of `ancestors`).\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of an ancestor still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Array<VisitedParents>} ancestors\n *   Ancestors of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n * @template {UnistNode} [Visited=UnistNode]\n *   Visited node type.\n * @template {UnistParent} [VisitedParents=UnistParent]\n *   Ancestor type.\n */\n\n/**\n * @typedef {Visitor<Matches<InclusiveDescendant<Tree>, Check>, Ancestor<Tree, Matches<InclusiveDescendant<Tree>, Check>>>} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parents`.\n * @template {UnistNode} [Tree=UnistNode]\n *   Tree type.\n * @template {Test} [Check=Test]\n *   Test type.\n */\n\nimport {convert} from 'unist-util-is'\nimport {color} from 'unist-util-visit-parents/do-not-use-color'\n\n/** @type {Readonly<ActionTuple>} */\nconst empty = []\n\n/**\n * Continue traversing as normal.\n */\nexport const CONTINUE = true\n\n/**\n * Stop traversing immediately.\n */\nexport const EXIT = false\n\n/**\n * Do not traverse this node’s children.\n */\nexport const SKIP = 'skip'\n\n/**\n * Visit nodes, with ancestral information.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @overload\n * @param {Tree} tree\n * @param {Check} check\n * @param {BuildVisitor<Tree, Check>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @overload\n * @param {Tree} tree\n * @param {BuildVisitor<Tree>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @param {UnistNode} tree\n *   Tree to traverse.\n * @param {Visitor | Test} test\n *   `unist-util-is`-compatible test\n * @param {Visitor | boolean | null | undefined} [visitor]\n *   Handle each node.\n * @param {boolean | null | undefined} [reverse]\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns {undefined}\n *   Nothing.\n *\n * @template {UnistNode} Tree\n *   Node type.\n * @template {Test} Check\n *   `unist-util-is`-compatible test.\n */\nexport function visitParents(tree, test, visitor, reverse) {\n  /** @type {Test} */\n  let check\n\n  if (typeof test === 'function' && typeof visitor !== 'function') {\n    reverse = visitor\n    // @ts-expect-error no visitor given, so `visitor` is test.\n    visitor = test\n  } else {\n    // @ts-expect-error visitor given, so `test` isn’t a visitor.\n    check = test\n  }\n\n  const is = convert(check)\n  const step = reverse ? -1 : 1\n\n  factory(tree, undefined, [])()\n\n  /**\n   * @param {UnistNode} node\n   * @param {number | undefined} index\n   * @param {Array<UnistParent>} parents\n   */\n  function factory(node, index, parents) {\n    const value = /** @type {Record<string, unknown>} */ (\n      node && typeof node === 'object' ? node : {}\n    )\n\n    if (typeof value.type === 'string') {\n      const name =\n        // `hast`\n        typeof value.tagName === 'string'\n          ? value.tagName\n          : // `xast`\n          typeof value.name === 'string'\n          ? value.name\n          : undefined\n\n      Object.defineProperty(visit, 'name', {\n        value:\n          'node (' + color(node.type + (name ? '<' + name + '>' : '')) + ')'\n      })\n    }\n\n    return visit\n\n    function visit() {\n      /** @type {Readonly<ActionTuple>} */\n      let result = empty\n      /** @type {Readonly<ActionTuple>} */\n      let subresult\n      /** @type {number} */\n      let offset\n      /** @type {Array<UnistParent>} */\n      let grandparents\n\n      if (!test || is(node, index, parents[parents.length - 1] || undefined)) {\n        // @ts-expect-error: `visitor` is now a visitor.\n        result = toResult(visitor(node, parents))\n\n        if (result[0] === EXIT) {\n          return result\n        }\n      }\n\n      if ('children' in node && node.children) {\n        const nodeAsParent = /** @type {UnistParent} */ (node)\n\n        if (nodeAsParent.children && result[0] !== SKIP) {\n          offset = (reverse ? nodeAsParent.children.length : -1) + step\n          grandparents = parents.concat(nodeAsParent)\n\n          while (offset > -1 && offset < nodeAsParent.children.length) {\n            const child = nodeAsParent.children[offset]\n\n            subresult = factory(child, offset, grandparents)()\n\n            if (subresult[0] === EXIT) {\n              return subresult\n            }\n\n            offset =\n              typeof subresult[1] === 'number' ? subresult[1] : offset + step\n          }\n        }\n      }\n\n      return result\n    }\n  }\n}\n\n/**\n * Turn a return value into a clean result.\n *\n * @param {VisitorResult} value\n *   Valid return values from visitors.\n * @returns {Readonly<ActionTuple>}\n *   Clean result.\n */\nfunction toResult(value) {\n  if (Array.isArray(value)) {\n    return value\n  }\n\n  if (typeof value === 'number') {\n    return [CONTINUE, value]\n  }\n\n  return value === null || value === undefined ? empty : [value]\n}\n","/**\n * @typedef {import('mdast').Nodes} Nodes\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [includeImageAlt=true]\n *   Whether to use `alt` for `image`s (default: `true`).\n * @property {boolean | null | undefined} [includeHtml=true]\n *   Whether to use `value` of HTML (default: `true`).\n */\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Get the text content of a node or list of nodes.\n *\n * Prefers the node’s plain-text fields, otherwise serializes its children,\n * and if the given value is an array, serialize the nodes in it.\n *\n * @param {unknown} [value]\n *   Thing to serialize, typically `Node`.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {string}\n *   Serialized `value`.\n */\nexport function toString(value, options) {\n  const settings = options || emptyOptions\n  const includeImageAlt =\n    typeof settings.includeImageAlt === 'boolean'\n      ? settings.includeImageAlt\n      : true\n  const includeHtml =\n    typeof settings.includeHtml === 'boolean' ? settings.includeHtml : true\n\n  return one(value, includeImageAlt, includeHtml)\n}\n\n/**\n * One node or several nodes.\n *\n * @param {unknown} value\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized node.\n */\nfunction one(value, includeImageAlt, includeHtml) {\n  if (node(value)) {\n    if ('value' in value) {\n      return value.type === 'html' && !includeHtml ? '' : value.value\n    }\n\n    if (includeImageAlt && 'alt' in value && value.alt) {\n      return value.alt\n    }\n\n    if ('children' in value) {\n      return all(value.children, includeImageAlt, includeHtml)\n    }\n  }\n\n  if (Array.isArray(value)) {\n    return all(value, includeImageAlt, includeHtml)\n  }\n\n  return ''\n}\n\n/**\n * Serialize a list of nodes.\n *\n * @param {Array<unknown>} values\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized nodes.\n */\nfunction all(values, includeImageAlt, includeHtml) {\n  /** @type {Array<string>} */\n  const result = []\n  let index = -1\n\n  while (++index < values.length) {\n    result[index] = one(values[index], includeImageAlt, includeHtml)\n  }\n\n  return result.join('')\n}\n\n/**\n * Check if `value` looks like a node.\n *\n * @param {unknown} value\n *   Thing.\n * @returns {value is Nodes}\n *   Whether `value` is a node.\n */\nfunction node(value) {\n  return Boolean(value && typeof value === 'object')\n}\n","/**\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('../types.js').State} State\n */\n\nimport {EXIT, visit} from 'unist-util-visit'\nimport {toString} from 'mdast-util-to-string'\n\n/**\n * @param {Heading} node\n * @param {State} state\n * @returns {boolean}\n */\nexport function formatHeadingAsSetext(node, state) {\n  let literalWithBreak = false\n\n  // Look for literals with a line break.\n  // Note that this also\n  visit(node, function (node) {\n    if (\n      ('value' in node && /\\r?\\n|\\r/.test(node.value)) ||\n      node.type === 'break'\n    ) {\n      literalWithBreak = true\n      return EXIT\n    }\n  })\n\n  return Boolean(\n    (!node.depth || node.depth < 3) &&\n      toString(node) &&\n      (state.options.setext || literalWithBreak)\n  )\n}\n","/**\n * @typedef {import('unist').Node} UnistNode\n * @typedef {import('unist').Parent} UnistParent\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n */\n\n/**\n * @typedef {Exclude<import('unist-util-is').Test, undefined> | undefined} Test\n *   Test from `unist-util-is`.\n *\n *   Note: we have remove and add `undefined`, because otherwise when generating\n *   automatic `.d.ts` files, TS tries to flatten paths from a local perspective,\n *   which doesn’t work when publishing on npm.\n */\n\n// To do: use types from `unist-util-visit-parents` when it’s released.\n\n/**\n * @typedef {(\n *   Fn extends (value: any) => value is infer Thing\n *   ? Thing\n *   : Fallback\n * )} Predicate\n *   Get the value of a type guard `Fn`.\n * @template Fn\n *   Value; typically function that is a type guard (such as `(x): x is Y`).\n * @template Fallback\n *   Value to yield if `Fn` is not a type guard.\n */\n\n/**\n * @typedef {(\n *   Check extends null | undefined // No test.\n *   ? Value\n *   : Value extends {type: Check} // String (type) test.\n *   ? Value\n *   : Value extends Check // Partial test.\n *   ? Value\n *   : Check extends Function // Function test.\n *   ? Predicate<Check, Value> extends Value\n *     ? Predicate<Check, Value>\n *     : never\n *   : never // Some other test?\n * )} MatchesOne\n *   Check whether a node matches a primitive check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test, but not arrays.\n */\n\n/**\n * @typedef {(\n *   Check extends Array<any>\n *   ? MatchesOne<Value, Check[keyof Check]>\n *   : MatchesOne<Value, Check>\n * )} Matches\n *   Check whether a node matches a check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test.\n */\n\n/**\n * @typedef {0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10} Uint\n *   Number; capped reasonably.\n */\n\n/**\n * @typedef {I extends 0 ? 1 : I extends 1 ? 2 : I extends 2 ? 3 : I extends 3 ? 4 : I extends 4 ? 5 : I extends 5 ? 6 : I extends 6 ? 7 : I extends 7 ? 8 : I extends 8 ? 9 : 10} Increment\n *   Increment a number in the type system.\n * @template {Uint} [I=0]\n *   Index.\n */\n\n/**\n * @typedef {(\n *   Node extends UnistParent\n *   ? Node extends {children: Array<infer Children>}\n *     ? Child extends Children ? Node : never\n *     : never\n *   : never\n * )} InternalParent\n *   Collect nodes that can be parents of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {InternalParent<InclusiveDescendant<Tree>, Child>} Parent\n *   Collect nodes in `Tree` that can be parents of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Depth extends Max\n *   ? never\n *   :\n *     | InternalParent<Node, Child>\n *     | InternalAncestor<Node, InternalParent<Node, Child>, Max, Increment<Depth>>\n * )} InternalAncestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {(\n *   Tree extends UnistParent\n *     ? Depth extends Max\n *       ? Tree\n *       : Tree | InclusiveDescendant<Tree['children'][number], Max, Increment<Depth>>\n *     : Tree\n * )} InclusiveDescendant\n *   Collect all (inclusive) descendants of `Tree`.\n *\n *   > 👉 **Note**: for performance reasons, this seems to be the fastest way to\n *   > recurse without actually running into an infinite loop, which the\n *   > previous version did.\n *   >\n *   > Practically, a max of `2` is typically enough assuming a `Root` is\n *   > passed, but it doesn’t improve performance.\n *   > It gets higher with `List > ListItem > Table > TableRow > TableCell`.\n *   > Using up to `10` doesn’t hurt or help either.\n * @template {UnistNode} Tree\n *   Tree type.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform `parent`.\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of `parent` still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Visited extends UnistNode ? number | undefined : never} index\n *   Index of `node` in `parent`.\n * @param {Ancestor extends UnistParent ? Ancestor | undefined : never} parent\n *   Parent of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n * @template {UnistNode} [Visited=UnistNode]\n *   Visited node type.\n * @template {UnistParent} [Ancestor=UnistParent]\n *   Ancestor type.\n */\n\n/**\n * @typedef {Visitor<Visited, Parent<Ancestor, Visited>>} BuildVisitorFromMatch\n *   Build a typed `Visitor` function from a node and all possible parents.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} Visited\n *   Node type.\n * @template {UnistParent} Ancestor\n *   Parent type.\n */\n\n/**\n * @typedef {(\n *   BuildVisitorFromMatch<\n *     Matches<Descendant, Check>,\n *     Extract<Descendant, UnistParent>\n *   >\n * )} BuildVisitorFromDescendants\n *   Build a typed `Visitor` function from a list of descendants and a test.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} Descendant\n *   Node type.\n * @template {Test} Check\n *   Test type.\n */\n\n/**\n * @typedef {(\n *   BuildVisitorFromDescendants<\n *     InclusiveDescendant<Tree>,\n *     Check\n *   >\n * )} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} [Tree=UnistNode]\n *   Node type.\n * @template {Test} [Check=Test]\n *   Test type.\n */\n\nimport {visitParents} from 'unist-util-visit-parents'\n\nexport {CONTINUE, EXIT, SKIP} from 'unist-util-visit-parents'\n\n/**\n * Visit nodes.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @overload\n * @param {Tree} tree\n * @param {Check} check\n * @param {BuildVisitor<Tree, Check>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @overload\n * @param {Tree} tree\n * @param {BuildVisitor<Tree>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @param {UnistNode} tree\n *   Tree to traverse.\n * @param {Visitor | Test} testOrVisitor\n *   `unist-util-is`-compatible test (optional, omit to pass a visitor).\n * @param {Visitor | boolean | null | undefined} [visitorOrReverse]\n *   Handle each node (when test is omitted, pass `reverse`).\n * @param {boolean | null | undefined} [maybeReverse=false]\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns {undefined}\n *   Nothing.\n *\n * @template {UnistNode} Tree\n *   Node type.\n * @template {Test} Check\n *   `unist-util-is`-compatible test.\n */\nexport function visit(tree, testOrVisitor, visitorOrReverse, maybeReverse) {\n  /** @type {boolean | null | undefined} */\n  let reverse\n  /** @type {Test} */\n  let test\n  /** @type {Visitor} */\n  let visitor\n\n  if (\n    typeof testOrVisitor === 'function' &&\n    typeof visitorOrReverse !== 'function'\n  ) {\n    test = undefined\n    visitor = testOrVisitor\n    reverse = visitorOrReverse\n  } else {\n    // @ts-expect-error: assume the overload with test was given.\n    test = testOrVisitor\n    // @ts-expect-error: assume the overload with test was given.\n    visitor = visitorOrReverse\n    reverse = maybeReverse\n  }\n\n  visitParents(tree, test, overload, reverse)\n\n  /**\n   * @param {UnistNode} node\n   * @param {Array<UnistParent>} parents\n   */\n  function overload(node, parents) {\n    const parent = parents[parents.length - 1]\n    const index = parent ? parent.children.indexOf(node) : undefined\n    return visitor(node, index, parent)\n  }\n}\n","/**\n * @typedef {import('mdast').Html} Html\n */\n\nhtml.peek = htmlPeek\n\n/**\n * @param {Html} node\n * @returns {string}\n */\nexport function html(node) {\n  return node.value || ''\n}\n\n/**\n * @returns {string}\n */\nfunction htmlPeek() {\n  return '<'\n}\n","/**\n * @typedef {import('mdast').Image} Image\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimport {checkQuote} from '../util/check-quote.js'\n\nimage.peek = imagePeek\n\n/**\n * @param {Image} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function image(node, _, state, info) {\n  const quote = checkQuote(state)\n  const suffix = quote === '\"' ? 'Quote' : 'Apostrophe'\n  const exit = state.enter('image')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('![')\n  value += tracker.move(\n    state.safe(node.alt, {before: value, after: ']', ...tracker.current()})\n  )\n  value += tracker.move('](')\n\n  subexit()\n\n  if (\n    // If there’s no url but there is a title…\n    (!node.url && node.title) ||\n    // If there are control characters or whitespace.\n    /[\\0- \\u007F]/.test(node.url)\n  ) {\n    subexit = state.enter('destinationLiteral')\n    value += tracker.move('<')\n    value += tracker.move(\n      state.safe(node.url, {before: value, after: '>', ...tracker.current()})\n    )\n    value += tracker.move('>')\n  } else {\n    // No whitespace, raw is prettier.\n    subexit = state.enter('destinationRaw')\n    value += tracker.move(\n      state.safe(node.url, {\n        before: value,\n        after: node.title ? ' ' : ')',\n        ...tracker.current()\n      })\n    )\n  }\n\n  subexit()\n\n  if (node.title) {\n    subexit = state.enter(`title${suffix}`)\n    value += tracker.move(' ' + quote)\n    value += tracker.move(\n      state.safe(node.title, {\n        before: value,\n        after: quote,\n        ...tracker.current()\n      })\n    )\n    value += tracker.move(quote)\n    subexit()\n  }\n\n  value += tracker.move(')')\n  exit()\n\n  return value\n}\n\n/**\n * @returns {string}\n */\nfunction imagePeek() {\n  return '!'\n}\n","/**\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimageReference.peek = imageReferencePeek\n\n/**\n * @param {ImageReference} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function imageReference(node, _, state, info) {\n  const type = node.referenceType\n  const exit = state.enter('imageReference')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('![')\n  const alt = state.safe(node.alt, {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  value += tracker.move(alt + '][')\n\n  subexit()\n  // Hide the fact that we’re in phrasing, because escapes don’t work.\n  const stack = state.stack\n  state.stack = []\n  subexit = state.enter('reference')\n  // Note: for proper tracking, we should reset the output positions when we end\n  // up making a `shortcut` reference, because then there is no brace output.\n  // Practically, in that case, there is no content, so it doesn’t matter that\n  // we’ve tracked one too many characters.\n  const reference = state.safe(state.associationId(node), {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  subexit()\n  state.stack = stack\n  exit()\n\n  if (type === 'full' || !alt || alt !== reference) {\n    value += tracker.move(reference + ']')\n  } else if (type === 'shortcut') {\n    // Remove the unwanted `[`.\n    value = value.slice(0, -1)\n  } else {\n    value += tracker.move(']')\n  }\n\n  return value\n}\n\n/**\n * @returns {string}\n */\nfunction imageReferencePeek() {\n  return '!'\n}\n","/**\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').State} State\n */\n\ninlineCode.peek = inlineCodePeek\n\n/**\n * @param {InlineCode} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @returns {string}\n */\nexport function inlineCode(node, _, state) {\n  let value = node.value || ''\n  let sequence = '`'\n  let index = -1\n\n  // If there is a single grave accent on its own in the code, use a fence of\n  // two.\n  // If there are two in a row, use one.\n  while (new RegExp('(^|[^`])' + sequence + '([^`]|$)').test(value)) {\n    sequence += '`'\n  }\n\n  // If this is not just spaces or eols (tabs don’t count), and either the\n  // first or last character are a space, eol, or tick, then pad with spaces.\n  if (\n    /[^ \\r\\n]/.test(value) &&\n    ((/^[ \\r\\n]/.test(value) && /[ \\r\\n]$/.test(value)) || /^`|`$/.test(value))\n  ) {\n    value = ' ' + value + ' '\n  }\n\n  // We have a potential problem: certain characters after eols could result in\n  // blocks being seen.\n  // For example, if someone injected the string `'\\n# b'`, then that would\n  // result in an ATX heading.\n  // We can’t escape characters in `inlineCode`, but because eols are\n  // transformed to spaces when going from markdown to HTML anyway, we can swap\n  // them out.\n  while (++index < state.unsafe.length) {\n    const pattern = state.unsafe[index]\n    const expression = state.compilePattern(pattern)\n    /** @type {RegExpExecArray | null} */\n    let match\n\n    // Only look for `atBreak`s.\n    // Btw: note that `atBreak` patterns will always start the regex at LF or\n    // CR.\n    if (!pattern.atBreak) continue\n\n    while ((match = expression.exec(value))) {\n      let position = match.index\n\n      // Support CRLF (patterns only look for one of the characters).\n      if (\n        value.charCodeAt(position) === 10 /* `\\n` */ &&\n        value.charCodeAt(position - 1) === 13 /* `\\r` */\n      ) {\n        position--\n      }\n\n      value = value.slice(0, position) + ' ' + value.slice(match.index + 1)\n    }\n  }\n\n  return sequence + value + sequence\n}\n\n/**\n * @returns {string}\n */\nfunction inlineCodePeek() {\n  return '`'\n}\n","/**\n * @typedef {import('mdast').Link} Link\n * @typedef {import('../types.js').State} State\n */\n\nimport {toString} from 'mdast-util-to-string'\n\n/**\n * @param {Link} node\n * @param {State} state\n * @returns {boolean}\n */\nexport function formatLinkAsAutolink(node, state) {\n  const raw = toString(node)\n\n  return Boolean(\n    !state.options.resourceLink &&\n      // If there’s a url…\n      node.url &&\n      // And there’s a no title…\n      !node.title &&\n      // And the content of `node` is a single text node…\n      node.children &&\n      node.children.length === 1 &&\n      node.children[0].type === 'text' &&\n      // And if the url is the same as the content…\n      (raw === node.url || 'mailto:' + raw === node.url) &&\n      // And that starts w/ a protocol…\n      /^[a-z][a-z+.-]+:/i.test(node.url) &&\n      // And that doesn’t contain ASCII control codes (character escapes and\n      // references don’t work), space, or angle brackets…\n      !/[\\0- <>\\u007F]/.test(node.url)\n  )\n}\n","/**\n * @typedef {import('mdast').Link} Link\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Exit} Exit\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimport {checkQuote} from '../util/check-quote.js'\nimport {formatLinkAsAutolink} from '../util/format-link-as-autolink.js'\n\nlink.peek = linkPeek\n\n/**\n * @param {Link} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function link(node, _, state, info) {\n  const quote = checkQuote(state)\n  const suffix = quote === '\"' ? 'Quote' : 'Apostrophe'\n  const tracker = state.createTracker(info)\n  /** @type {Exit} */\n  let exit\n  /** @type {Exit} */\n  let subexit\n\n  if (formatLinkAsAutolink(node, state)) {\n    // Hide the fact that we’re in phrasing, because escapes don’t work.\n    const stack = state.stack\n    state.stack = []\n    exit = state.enter('autolink')\n    let value = tracker.move('<')\n    value += tracker.move(\n      state.containerPhrasing(node, {\n        before: value,\n        after: '>',\n        ...tracker.current()\n      })\n    )\n    value += tracker.move('>')\n    exit()\n    state.stack = stack\n    return value\n  }\n\n  exit = state.enter('link')\n  subexit = state.enter('label')\n  let value = tracker.move('[')\n  value += tracker.move(\n    state.containerPhrasing(node, {\n      before: value,\n      after: '](',\n      ...tracker.current()\n    })\n  )\n  value += tracker.move('](')\n  subexit()\n\n  if (\n    // If there’s no url but there is a title…\n    (!node.url && node.title) ||\n    // If there are control characters or whitespace.\n    /[\\0- \\u007F]/.test(node.url)\n  ) {\n    subexit = state.enter('destinationLiteral')\n    value += tracker.move('<')\n    value += tracker.move(\n      state.safe(node.url, {before: value, after: '>', ...tracker.current()})\n    )\n    value += tracker.move('>')\n  } else {\n    // No whitespace, raw is prettier.\n    subexit = state.enter('destinationRaw')\n    value += tracker.move(\n      state.safe(node.url, {\n        before: value,\n        after: node.title ? ' ' : ')',\n        ...tracker.current()\n      })\n    )\n  }\n\n  subexit()\n\n  if (node.title) {\n    subexit = state.enter(`title${suffix}`)\n    value += tracker.move(' ' + quote)\n    value += tracker.move(\n      state.safe(node.title, {\n        before: value,\n        after: quote,\n        ...tracker.current()\n      })\n    )\n    value += tracker.move(quote)\n    subexit()\n  }\n\n  value += tracker.move(')')\n\n  exit()\n  return value\n}\n\n/**\n * @param {Link} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @returns {string}\n */\nfunction linkPeek(node, _, state) {\n  return formatLinkAsAutolink(node, state) ? '<' : '['\n}\n","/**\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nlinkReference.peek = linkReferencePeek\n\n/**\n * @param {LinkReference} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function linkReference(node, _, state, info) {\n  const type = node.referenceType\n  const exit = state.enter('linkReference')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('[')\n  const text = state.containerPhrasing(node, {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  value += tracker.move(text + '][')\n\n  subexit()\n  // Hide the fact that we’re in phrasing, because escapes don’t work.\n  const stack = state.stack\n  state.stack = []\n  subexit = state.enter('reference')\n  // Note: for proper tracking, we should reset the output positions when we end\n  // up making a `shortcut` reference, because then there is no brace output.\n  // Practically, in that case, there is no content, so it doesn’t matter that\n  // we’ve tracked one too many characters.\n  const reference = state.safe(state.associationId(node), {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  subexit()\n  state.stack = stack\n  exit()\n\n  if (type === 'full' || !text || text !== reference) {\n    value += tracker.move(reference + ']')\n  } else if (type === 'shortcut') {\n    // Remove the unwanted `[`.\n    value = value.slice(0, -1)\n  } else {\n    value += tracker.move(']')\n  }\n\n  return value\n}\n\n/**\n * @returns {string}\n */\nfunction linkReferencePeek() {\n  return '['\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['bullet'], null | undefined>}\n */\nexport function checkBullet(state) {\n  const marker = state.options.bullet || '*'\n\n  if (marker !== '*' && marker !== '+' && marker !== '-') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        marker +\n        '` for `options.bullet`, expected `*`, `+`, or `-`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['rule'], null | undefined>}\n */\nexport function checkRule(state) {\n  const marker = state.options.rule || '*'\n\n  if (marker !== '*' && marker !== '-' && marker !== '_') {\n    throw new Error(\n      'Cannot serialize rules with `' +\n        marker +\n        '` for `options.rule`, expected `*`, `-`, or `_`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimport {checkStrong} from '../util/check-strong.js'\n\nstrong.peek = strongPeek\n\n// To do: there are cases where emphasis cannot “form” depending on the\n// previous or next character of sequences.\n// There’s no way around that though, except for injecting zero-width stuff.\n// Do we need to safeguard against that?\n/**\n * @param {Strong} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function strong(node, _, state, info) {\n  const marker = checkStrong(state)\n  const exit = state.enter('strong')\n  const tracker = state.createTracker(info)\n  let value = tracker.move(marker + marker)\n  value += tracker.move(\n    state.containerPhrasing(node, {\n      before: value,\n      after: marker,\n      ...tracker.current()\n    })\n  )\n  value += tracker.move(marker + marker)\n  exit()\n  return value\n}\n\n/**\n * @param {Strong} _\n * @param {Parents | undefined} _1\n * @param {State} state\n * @returns {string}\n */\nfunction strongPeek(_, _1, state) {\n  return state.options.strong || '*'\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['strong'], null | undefined>}\n */\nexport function checkStrong(state) {\n  const marker = state.options.strong || '*'\n\n  if (marker !== '*' && marker !== '_') {\n    throw new Error(\n      'Cannot serialize strong with `' +\n        marker +\n        '` for `options.strong`, expected `*`, or `_`'\n    )\n  }\n\n  return marker\n}\n","import {blockquote} from './blockquote.js'\nimport {hardBreak} from './break.js'\nimport {code} from './code.js'\nimport {definition} from './definition.js'\nimport {emphasis} from './emphasis.js'\nimport {heading} from './heading.js'\nimport {html} from './html.js'\nimport {image} from './image.js'\nimport {imageReference} from './image-reference.js'\nimport {inlineCode} from './inline-code.js'\nimport {link} from './link.js'\nimport {linkReference} from './link-reference.js'\nimport {list} from './list.js'\nimport {listItem} from './list-item.js'\nimport {paragraph} from './paragraph.js'\nimport {root} from './root.js'\nimport {strong} from './strong.js'\nimport {text} from './text.js'\nimport {thematicBreak} from './thematic-break.js'\n\n/**\n * Default (CommonMark) handlers.\n */\nexport const handle = {\n  blockquote,\n  break: hardBreak,\n  code,\n  definition,\n  emphasis,\n  hardBreak,\n  heading,\n  html,\n  image,\n  imageReference,\n  inlineCode,\n  link,\n  linkReference,\n  list,\n  listItem,\n  paragraph,\n  root,\n  strong,\n  text,\n  thematicBreak\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['fence'], null | undefined>}\n */\nexport function checkFence(state) {\n  const marker = state.options.fence || '`'\n\n  if (marker !== '`' && marker !== '~') {\n    throw new Error(\n      'Cannot serialize code with `' +\n        marker +\n        '` for `options.fence`, expected `` ` `` or `~`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @typedef {import('mdast').Code} Code\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {Code} node\n * @param {State} state\n * @returns {boolean}\n */\nexport function formatCodeAsIndented(node, state) {\n  return Boolean(\n    state.options.fences === false &&\n      node.value &&\n      // If there’s no info…\n      !node.lang &&\n      // And there’s a non-whitespace character…\n      /[^ \\r\\n]/.test(node.value) &&\n      // And the value doesn’t start or end in a blank…\n      !/^[\\t ]*(?:[\\r\\n]|$)|(?:^|[\\r\\n])[\\t ]*$/.test(node.value)\n  )\n}\n","/**\n * Get the count of the longest repeating streak of `substring` in `value`.\n *\n * @param {string} value\n *   Content to search in.\n * @param {string} substring\n *   Substring to look for, typically one character.\n * @returns {number}\n *   Count of most frequent adjacent `substring`s in `value`.\n */\nexport function longestStreak(value, substring) {\n  const source = String(value)\n  let index = source.indexOf(substring)\n  let expected = index\n  let count = 0\n  let max = 0\n\n  if (typeof substring !== 'string') {\n    throw new TypeError('Expected substring')\n  }\n\n  while (index !== -1) {\n    if (index === expected) {\n      if (++count > max) {\n        max = count\n      }\n    } else {\n      count = 1\n    }\n\n    expected = index + substring.length\n    index = source.indexOf(substring, expected)\n  }\n\n  return max\n}\n","/**\n * @typedef {import('mdast').Definition} Definition\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimport {checkQuote} from '../util/check-quote.js'\n\n/**\n * @param {Definition} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function definition(node, _, state, info) {\n  const quote = checkQuote(state)\n  const suffix = quote === '\"' ? 'Quote' : 'Apostrophe'\n  const exit = state.enter('definition')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('[')\n  value += tracker.move(\n    state.safe(state.associationId(node), {\n      before: value,\n      after: ']',\n      ...tracker.current()\n    })\n  )\n  value += tracker.move(']: ')\n\n  subexit()\n\n  if (\n    // If there’s no url, or…\n    !node.url ||\n    // If there are control characters or whitespace.\n    /[\\0- \\u007F]/.test(node.url)\n  ) {\n    subexit = state.enter('destinationLiteral')\n    value += tracker.move('<')\n    value += tracker.move(\n      state.safe(node.url, {before: value, after: '>', ...tracker.current()})\n    )\n    value += tracker.move('>')\n  } else {\n    // No whitespace, raw is prettier.\n    subexit = state.enter('destinationRaw')\n    value += tracker.move(\n      state.safe(node.url, {\n        before: value,\n        after: node.title ? ' ' : '\\n',\n        ...tracker.current()\n      })\n    )\n  }\n\n  subexit()\n\n  if (node.title) {\n    subexit = state.enter(`title${suffix}`)\n    value += tracker.move(' ' + quote)\n    value += tracker.move(\n      state.safe(node.title, {\n        before: value,\n        after: quote,\n        ...tracker.current()\n      })\n    )\n    value += tracker.move(quote)\n    subexit()\n  }\n\n  exit()\n\n  return value\n}\n","/**\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimport {formatHeadingAsSetext} from '../util/format-heading-as-setext.js'\n\n/**\n * @param {Heading} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function heading(node, _, state, info) {\n  const rank = Math.max(Math.min(6, node.depth || 1), 1)\n  const tracker = state.createTracker(info)\n\n  if (formatHeadingAsSetext(node, state)) {\n    const exit = state.enter('headingSetext')\n    const subexit = state.enter('phrasing')\n    const value = state.containerPhrasing(node, {\n      ...tracker.current(),\n      before: '\\n',\n      after: '\\n'\n    })\n    subexit()\n    exit()\n\n    return (\n      value +\n      '\\n' +\n      (rank === 1 ? '=' : '-').repeat(\n        // The whole size…\n        value.length -\n          // Minus the position of the character after the last EOL (or\n          // 0 if there is none)…\n          (Math.max(value.lastIndexOf('\\r'), value.lastIndexOf('\\n')) + 1)\n      )\n    )\n  }\n\n  const sequence = '#'.repeat(rank)\n  const exit = state.enter('headingAtx')\n  const subexit = state.enter('phrasing')\n\n  // Note: for proper tracking, we should reset the output positions when there\n  // is no content returned, because then the space is not output.\n  // Practically, in that case, there is no content, so it doesn’t matter that\n  // we’ve tracked one too many characters.\n  tracker.move(sequence + ' ')\n\n  let value = state.containerPhrasing(node, {\n    before: '# ',\n    after: '\\n',\n    ...tracker.current()\n  })\n\n  if (/^[\\t ]/.test(value)) {\n    // To do: what effect has the character reference on tracking?\n    value =\n      '&#x' +\n      value.charCodeAt(0).toString(16).toUpperCase() +\n      ';' +\n      value.slice(1)\n  }\n\n  value = value ? sequence + ' ' + value : sequence\n\n  if (state.options.closeAtx) {\n    value += ' ' + sequence\n  }\n\n  subexit()\n  exit()\n\n  return value\n}\n","/**\n * @typedef {import('mdast').List} List\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimport {checkBullet} from '../util/check-bullet.js'\nimport {checkBulletOther} from '../util/check-bullet-other.js'\nimport {checkBulletOrdered} from '../util/check-bullet-ordered.js'\nimport {checkRule} from '../util/check-rule.js'\n\n/**\n * @param {List} node\n * @param {Parents | undefined} parent\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function list(node, parent, state, info) {\n  const exit = state.enter('list')\n  const bulletCurrent = state.bulletCurrent\n  /** @type {string} */\n  let bullet = node.ordered ? checkBulletOrdered(state) : checkBullet(state)\n  /** @type {string} */\n  const bulletOther = node.ordered\n    ? bullet === '.'\n      ? ')'\n      : '.'\n    : checkBulletOther(state)\n  let useDifferentMarker =\n    parent && state.bulletLastUsed ? bullet === state.bulletLastUsed : false\n\n  if (!node.ordered) {\n    const firstListItem = node.children ? node.children[0] : undefined\n\n    // If there’s an empty first list item directly in two list items,\n    // we have to use a different bullet:\n    //\n    // ```markdown\n    // * - *\n    // ```\n    //\n    // …because otherwise it would become one big thematic break.\n    if (\n      // Bullet could be used as a thematic break marker:\n      (bullet === '*' || bullet === '-') &&\n      // Empty first list item:\n      firstListItem &&\n      (!firstListItem.children || !firstListItem.children[0]) &&\n      // Directly in two other list items:\n      state.stack[state.stack.length - 1] === 'list' &&\n      state.stack[state.stack.length - 2] === 'listItem' &&\n      state.stack[state.stack.length - 3] === 'list' &&\n      state.stack[state.stack.length - 4] === 'listItem' &&\n      // That are each the first child.\n      state.indexStack[state.indexStack.length - 1] === 0 &&\n      state.indexStack[state.indexStack.length - 2] === 0 &&\n      state.indexStack[state.indexStack.length - 3] === 0\n    ) {\n      useDifferentMarker = true\n    }\n\n    // If there’s a thematic break at the start of the first list item,\n    // we have to use a different bullet:\n    //\n    // ```markdown\n    // * ---\n    // ```\n    //\n    // …because otherwise it would become one big thematic break.\n    if (checkRule(state) === bullet && firstListItem) {\n      let index = -1\n\n      while (++index < node.children.length) {\n        const item = node.children[index]\n\n        if (\n          item &&\n          item.type === 'listItem' &&\n          item.children &&\n          item.children[0] &&\n          item.children[0].type === 'thematicBreak'\n        ) {\n          useDifferentMarker = true\n          break\n        }\n      }\n    }\n  }\n\n  if (useDifferentMarker) {\n    bullet = bulletOther\n  }\n\n  state.bulletCurrent = bullet\n  const value = state.containerFlow(node, info)\n  state.bulletLastUsed = bullet\n  state.bulletCurrent = bulletCurrent\n  exit()\n  return value\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['bulletOrdered'], null | undefined>}\n */\nexport function checkBulletOrdered(state) {\n  const marker = state.options.bulletOrdered || '.'\n\n  if (marker !== '.' && marker !== ')') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        marker +\n        '` for `options.bulletOrdered`, expected `.` or `)`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\nimport {checkBullet} from './check-bullet.js'\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['bullet'], null | undefined>}\n */\nexport function checkBulletOther(state) {\n  const bullet = checkBullet(state)\n  const bulletOther = state.options.bulletOther\n\n  if (!bulletOther) {\n    return bullet === '*' ? '-' : '*'\n  }\n\n  if (bulletOther !== '*' && bulletOther !== '+' && bulletOther !== '-') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        bulletOther +\n        '` for `options.bulletOther`, expected `*`, `+`, or `-`'\n    )\n  }\n\n  if (bulletOther === bullet) {\n    throw new Error(\n      'Expected `bullet` (`' +\n        bullet +\n        '`) and `bulletOther` (`' +\n        bulletOther +\n        '`) to be different'\n    )\n  }\n\n  return bulletOther\n}\n","/**\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').Map} Map\n * @typedef {import('../types.js').State} State\n */\n\nimport {checkBullet} from '../util/check-bullet.js'\nimport {checkListItemIndent} from '../util/check-list-item-indent.js'\n\n/**\n * @param {ListItem} node\n * @param {Parents | undefined} parent\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function listItem(node, parent, state, info) {\n  const listItemIndent = checkListItemIndent(state)\n  let bullet = state.bulletCurrent || checkBullet(state)\n\n  // Add the marker value for ordered lists.\n  if (parent && parent.type === 'list' && parent.ordered) {\n    bullet =\n      (typeof parent.start === 'number' && parent.start > -1\n        ? parent.start\n        : 1) +\n      (state.options.incrementListMarker === false\n        ? 0\n        : parent.children.indexOf(node)) +\n      bullet\n  }\n\n  let size = bullet.length + 1\n\n  if (\n    listItemIndent === 'tab' ||\n    (listItemIndent === 'mixed' &&\n      ((parent && parent.type === 'list' && parent.spread) || node.spread))\n  ) {\n    size = Math.ceil(size / 4) * 4\n  }\n\n  const tracker = state.createTracker(info)\n  tracker.move(bullet + ' '.repeat(size - bullet.length))\n  tracker.shift(size)\n  const exit = state.enter('listItem')\n  const value = state.indentLines(\n    state.containerFlow(node, tracker.current()),\n    map\n  )\n  exit()\n\n  return value\n\n  /** @type {Map} */\n  function map(line, index, blank) {\n    if (index) {\n      return (blank ? '' : ' '.repeat(size)) + line\n    }\n\n    return (blank ? bullet : bullet + ' '.repeat(size - bullet.length)) + line\n  }\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['listItemIndent'], null | undefined>}\n */\nexport function checkListItemIndent(state) {\n  const style = state.options.listItemIndent || 'one'\n\n  if (style !== 'tab' && style !== 'one' && style !== 'mixed') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        style +\n        '` for `options.listItemIndent`, expected `tab`, `one`, or `mixed`'\n    )\n  }\n\n  return style\n}\n","/**\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {Paragraph} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function paragraph(node, _, state, info) {\n  const exit = state.enter('paragraph')\n  const subexit = state.enter('phrasing')\n  const value = state.containerPhrasing(node, info)\n  subexit()\n  exit()\n  return value\n}\n","/**\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('mdast').Root} Root\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimport {phrasing} from 'mdast-util-phrasing'\n\n/**\n * @param {Root} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function root(node, _, state, info) {\n  // Note: `html` nodes are ambiguous.\n  const hasPhrasing = node.children.some(function (d) {\n    return phrasing(d)\n  })\n  const fn = hasPhrasing ? state.containerPhrasing : state.containerFlow\n  return fn.call(state, node, info)\n}\n","/**\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('mdast').Text} Text\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {Text} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function text(node, _, state, info) {\n  return state.safe(node.value, info)\n}\n","/**\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n * @typedef {import('../types.js').State} State\n */\n\nimport {checkRuleRepetition} from '../util/check-rule-repetition.js'\nimport {checkRule} from '../util/check-rule.js'\n\n/**\n * @param {ThematicBreak} _\n * @param {Parents | undefined} _1\n * @param {State} state\n * @returns {string}\n */\nexport function thematicBreak(_, _1, state) {\n  const value = (\n    checkRule(state) + (state.options.ruleSpaces ? ' ' : '')\n  ).repeat(checkRuleRepetition(state))\n\n  return state.options.ruleSpaces ? value.slice(0, -1) : value\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['ruleRepetition'], null | undefined>}\n */\nexport function checkRuleRepetition(state) {\n  const repetition = state.options.ruleRepetition || 3\n\n  if (repetition < 3) {\n    throw new Error(\n      'Cannot serialize rules with repetition `' +\n        repetition +\n        '` for `options.ruleRepetition`, expected `3` or more'\n    )\n  }\n\n  return repetition\n}\n","/**\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n */\n\nimport {ok as assert} from 'devlop'\nimport {defaultHandlers} from 'mdast-util-to-markdown'\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM task\n * list items in markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown` to enable GFM task list items.\n */\nexport function gfmTaskListItemFromMarkdown() {\n  return {\n    exit: {\n      taskListCheckValueChecked: exitCheck,\n      taskListCheckValueUnchecked: exitCheck,\n      paragraph: exitParagraphWithTaskListItem\n    }\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM task list\n * items in markdown.\n *\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM task list items.\n */\nexport function gfmTaskListItemToMarkdown() {\n  return {\n    unsafe: [{atBreak: true, character: '-', after: '[:|-]'}],\n    handlers: {listItem: listItemWithTaskListItem}\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitCheck(token) {\n  // We’re always in a paragraph, in a list item.\n  const node = this.stack[this.stack.length - 2]\n  assert(node.type === 'listItem')\n  node.checked = token.type === 'taskListCheckValueChecked'\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitParagraphWithTaskListItem(token) {\n  const parent = this.stack[this.stack.length - 2]\n\n  if (\n    parent &&\n    parent.type === 'listItem' &&\n    typeof parent.checked === 'boolean'\n  ) {\n    const node = this.stack[this.stack.length - 1]\n    assert(node.type === 'paragraph')\n    const head = node.children[0]\n\n    if (head && head.type === 'text') {\n      const siblings = parent.children\n      let index = -1\n      /** @type {Paragraph | undefined} */\n      let firstParaghraph\n\n      while (++index < siblings.length) {\n        const sibling = siblings[index]\n        if (sibling.type === 'paragraph') {\n          firstParaghraph = sibling\n          break\n        }\n      }\n\n      if (firstParaghraph === node) {\n        // Must start with a space or a tab.\n        head.value = head.value.slice(1)\n\n        if (head.value.length === 0) {\n          node.children.shift()\n        } else if (\n          node.position &&\n          head.position &&\n          typeof head.position.start.offset === 'number'\n        ) {\n          head.position.start.column++\n          head.position.start.offset++\n          node.position.start = Object.assign({}, head.position.start)\n        }\n      }\n    }\n  }\n\n  this.exit(token)\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {ListItem} node\n */\nfunction listItemWithTaskListItem(node, parent, state, info) {\n  const head = node.children[0]\n  const checkable =\n    typeof node.checked === 'boolean' && head && head.type === 'paragraph'\n  const checkbox = '[' + (node.checked ? 'x' : ' ') + '] '\n  const tracker = state.createTracker(info)\n\n  if (checkable) {\n    tracker.move(checkbox)\n  }\n\n  let value = defaultHandlers.listItem(node, parent, state, {\n    ...info,\n    ...tracker.current()\n  })\n\n  if (checkable) {\n    value = value.replace(/^(?:[*+-]|\\d+\\.)([\\r\\n]| {1,3})/, check)\n  }\n\n  return value\n\n  /**\n   * @param {string} $0\n   * @returns {string}\n   */\n  function check($0) {\n    return $0 + checkbox\n  }\n}\n","/**\n * Like `Array#splice`, but smarter for giant arrays.\n *\n * `Array#splice` takes all items to be inserted as individual argument which\n * causes a stack overflow in V8 when trying to insert 100k items for instance.\n *\n * Otherwise, this does not return the removed items, and takes `items` as an\n * array instead of rest parameters.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {number} start\n *   Index to remove/insert at (can be negative).\n * @param {number} remove\n *   Number of items to remove.\n * @param {Array<T>} items\n *   Items to inject into `list`.\n * @returns {undefined}\n *   Nothing.\n */\nexport function splice(list, start, remove, items) {\n  const end = list.length\n  let chunkStart = 0\n  /** @type {Array<unknown>} */\n  let parameters\n\n  // Make start between zero and `end` (included).\n  if (start < 0) {\n    start = -start > end ? 0 : end + start\n  } else {\n    start = start > end ? end : start\n  }\n  remove = remove > 0 ? remove : 0\n\n  // No need to chunk the items if there’s only a couple (10k) items.\n  if (items.length < 10000) {\n    parameters = Array.from(items)\n    parameters.unshift(start, remove)\n    // @ts-expect-error Hush, it’s fine.\n    list.splice(...parameters)\n  } else {\n    // Delete `remove` items starting from `start`\n    if (remove) list.splice(start, remove)\n\n    // Insert the items in chunks to not cause stack overflows.\n    while (chunkStart < items.length) {\n      parameters = items.slice(chunkStart, chunkStart + 10000)\n      parameters.unshift(start, 0)\n      // @ts-expect-error Hush, it’s fine.\n      list.splice(...parameters)\n      chunkStart += 10000\n      start += 10000\n    }\n  }\n}\n\n/**\n * Append `items` (an array) at the end of `list` (another array).\n * When `list` was empty, returns `items` instead.\n *\n * This prevents a potentially expensive operation when `list` is empty,\n * and adds items in batches to prevent V8 from hanging.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {Array<T>} items\n *   Items to add to `list`.\n * @returns {Array<T>}\n *   Either `list` or `items`.\n */\nexport function push(list, items) {\n  if (list.length > 0) {\n    splice(list, list.length, 0, items)\n    return list\n  }\n  return items\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Handles} Handles\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n * @typedef {import('micromark-util-types').NormalizedExtension} NormalizedExtension\n */\n\nimport {splice} from 'micromark-util-chunked'\n\nconst hasOwnProperty = {}.hasOwnProperty\n\n/**\n * Combine multiple syntax extensions into one.\n *\n * @param {Array<Extension>} extensions\n *   List of syntax extensions.\n * @returns {NormalizedExtension}\n *   A single combined extension.\n */\nexport function combineExtensions(extensions) {\n  /** @type {NormalizedExtension} */\n  const all = {}\n  let index = -1\n\n  while (++index < extensions.length) {\n    syntaxExtension(all, extensions[index])\n  }\n\n  return all\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {NormalizedExtension} all\n *   Extension to merge into.\n * @param {Extension} extension\n *   Extension to merge.\n * @returns {undefined}\n */\nfunction syntaxExtension(all, extension) {\n  /** @type {keyof Extension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    /** @type {Record<string, unknown>} */\n    const left = maybe || (all[hook] = {})\n    /** @type {Record<string, unknown> | undefined} */\n    const right = extension[hook]\n    /** @type {string} */\n    let code\n\n    if (right) {\n      for (code in right) {\n        if (!hasOwnProperty.call(left, code)) left[code] = []\n        const value = right[code]\n        constructs(\n          // @ts-expect-error Looks like a list.\n          left[code],\n          Array.isArray(value) ? value : value ? [value] : []\n        )\n      }\n    }\n  }\n}\n\n/**\n * Merge `list` into `existing` (both lists of constructs).\n * Mutates `existing`.\n *\n * @param {Array<unknown>} existing\n * @param {Array<unknown>} list\n * @returns {undefined}\n */\nfunction constructs(existing, list) {\n  let index = -1\n  /** @type {Array<unknown>} */\n  const before = []\n\n  while (++index < list.length) {\n    // @ts-expect-error Looks like an object.\n    ;(list[index].add === 'after' ? existing : before).push(list[index])\n  }\n\n  splice(existing, 0, 0, before)\n}\n\n/**\n * Combine multiple HTML extensions into one.\n *\n * @param {Array<HtmlExtension>} htmlExtensions\n *   List of HTML extensions.\n * @returns {HtmlExtension}\n *   A single combined HTML extension.\n */\nexport function combineHtmlExtensions(htmlExtensions) {\n  /** @type {HtmlExtension} */\n  const handlers = {}\n  let index = -1\n\n  while (++index < htmlExtensions.length) {\n    htmlExtension(handlers, htmlExtensions[index])\n  }\n\n  return handlers\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {HtmlExtension} all\n *   Extension to merge into.\n * @param {HtmlExtension} extension\n *   Extension to merge.\n * @returns {undefined}\n */\nfunction htmlExtension(all, extension) {\n  /** @type {keyof HtmlExtension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    const left = maybe || (all[hook] = {})\n    const right = extension[hook]\n    /** @type {keyof Handles} */\n    let type\n\n    if (right) {\n      for (type in right) {\n        // @ts-expect-error assume document vs regular handler are managed correctly.\n        left[type] = right[type]\n      }\n    }\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').ConstructRecord} ConstructRecord\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Previous} Previous\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  asciiControl,\n  markdownLineEndingOrSpace,\n  unicodePunctuation,\n  unicodeWhitespace\n} from 'micromark-util-character'\nconst wwwPrefix = {\n  tokenize: tokenizeWwwPrefix,\n  partial: true\n}\nconst domain = {\n  tokenize: tokenizeDomain,\n  partial: true\n}\nconst path = {\n  tokenize: tokenizePath,\n  partial: true\n}\nconst trail = {\n  tokenize: tokenizeTrail,\n  partial: true\n}\nconst emailDomainDotTrail = {\n  tokenize: tokenizeEmailDomainDotTrail,\n  partial: true\n}\nconst wwwAutolink = {\n  tokenize: tokenizeWwwAutolink,\n  previous: previousWww\n}\nconst protocolAutolink = {\n  tokenize: tokenizeProtocolAutolink,\n  previous: previousProtocol\n}\nconst emailAutolink = {\n  tokenize: tokenizeEmailAutolink,\n  previous: previousEmail\n}\n\n/** @type {ConstructRecord} */\nconst text = {}\n\n/**\n * Create an extension for `micromark` to support GitHub autolink literal\n * syntax.\n *\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to enable GFM\n *   autolink literal syntax.\n */\nexport function gfmAutolinkLiteral() {\n  return {\n    text\n  }\n}\n\n/** @type {Code} */\nlet code = 48\n\n// Add alphanumerics.\nwhile (code < 123) {\n  text[code] = emailAutolink\n  code++\n  if (code === 58) code = 65\n  else if (code === 91) code = 97\n}\ntext[43] = emailAutolink\ntext[45] = emailAutolink\ntext[46] = emailAutolink\ntext[95] = emailAutolink\ntext[72] = [emailAutolink, protocolAutolink]\ntext[104] = [emailAutolink, protocolAutolink]\ntext[87] = [emailAutolink, wwwAutolink]\ntext[119] = [emailAutolink, wwwAutolink]\n\n// To do: perform email autolink literals on events, afterwards.\n// That’s where `markdown-rs` and `cmark-gfm` perform it.\n// It should look for `@`, then for atext backwards, and then for a label\n// forwards.\n// To do: `mailto:`, `xmpp:` protocol as prefix.\n\n/**\n * Email autolink literal.\n *\n * ```markdown\n * > | a contact@example.org b\n *       ^^^^^^^^^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeEmailAutolink(effects, ok, nok) {\n  const self = this\n  /** @type {boolean | undefined} */\n  let dot\n  /** @type {boolean} */\n  let data\n  return start\n\n  /**\n   * Start of email autolink literal.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (\n      !gfmAtext(code) ||\n      !previousEmail.call(self, self.previous) ||\n      previousUnbalanced(self.events)\n    ) {\n      return nok(code)\n    }\n    effects.enter('literalAutolink')\n    effects.enter('literalAutolinkEmail')\n    return atext(code)\n  }\n\n  /**\n   * In email atext.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atext(code) {\n    if (gfmAtext(code)) {\n      effects.consume(code)\n      return atext\n    }\n    if (code === 64) {\n      effects.consume(code)\n      return emailDomain\n    }\n    return nok(code)\n  }\n\n  /**\n   * In email domain.\n   *\n   * The reference code is a bit overly complex as it handles the `@`, of which\n   * there may be just one.\n   * Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L318>\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailDomain(code) {\n    // Dot followed by alphanumerical (not `-` or `_`).\n    if (code === 46) {\n      return effects.check(\n        emailDomainDotTrail,\n        emailDomainAfter,\n        emailDomainDot\n      )(code)\n    }\n\n    // Alphanumerical, `-`, and `_`.\n    if (code === 45 || code === 95 || asciiAlphanumeric(code)) {\n      data = true\n      effects.consume(code)\n      return emailDomain\n    }\n\n    // To do: `/` if xmpp.\n\n    // Note: normally we’d truncate trailing punctuation from the link.\n    // However, email autolink literals cannot contain any of those markers,\n    // except for `.`, but that can only occur if it isn’t trailing.\n    // So we can ignore truncating!\n    return emailDomainAfter(code)\n  }\n\n  /**\n   * In email domain, on dot that is not a trail.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *                      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailDomainDot(code) {\n    effects.consume(code)\n    dot = true\n    return emailDomain\n  }\n\n  /**\n   * After email domain.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *                          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailDomainAfter(code) {\n    // Domain must not be empty, must include a dot, and must end in alphabetical.\n    // Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L332>.\n    if (data && dot && asciiAlpha(self.previous)) {\n      effects.exit('literalAutolinkEmail')\n      effects.exit('literalAutolink')\n      return ok(code)\n    }\n    return nok(code)\n  }\n}\n\n/**\n * `www` autolink literal.\n *\n * ```markdown\n * > | a www.example.org b\n *       ^^^^^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeWwwAutolink(effects, ok, nok) {\n  const self = this\n  return wwwStart\n\n  /**\n   * Start of www autolink literal.\n   *\n   * ```markdown\n   * > | www.example.com/a?b#c\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwStart(code) {\n    if (\n      (code !== 87 && code !== 119) ||\n      !previousWww.call(self, self.previous) ||\n      previousUnbalanced(self.events)\n    ) {\n      return nok(code)\n    }\n    effects.enter('literalAutolink')\n    effects.enter('literalAutolinkWww')\n    // Note: we *check*, so we can discard the `www.` we parsed.\n    // If it worked, we consider it as a part of the domain.\n    return effects.check(\n      wwwPrefix,\n      effects.attempt(domain, effects.attempt(path, wwwAfter), nok),\n      nok\n    )(code)\n  }\n\n  /**\n   * After a www autolink literal.\n   *\n   * ```markdown\n   * > | www.example.com/a?b#c\n   *                          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwAfter(code) {\n    effects.exit('literalAutolinkWww')\n    effects.exit('literalAutolink')\n    return ok(code)\n  }\n}\n\n/**\n * Protocol autolink literal.\n *\n * ```markdown\n * > | a https://example.org b\n *       ^^^^^^^^^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeProtocolAutolink(effects, ok, nok) {\n  const self = this\n  let buffer = ''\n  let seen = false\n  return protocolStart\n\n  /**\n   * Start of protocol autolink literal.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolStart(code) {\n    if (\n      (code === 72 || code === 104) &&\n      previousProtocol.call(self, self.previous) &&\n      !previousUnbalanced(self.events)\n    ) {\n      effects.enter('literalAutolink')\n      effects.enter('literalAutolinkHttp')\n      buffer += String.fromCodePoint(code)\n      effects.consume(code)\n      return protocolPrefixInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * In protocol.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *     ^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolPrefixInside(code) {\n    // `5` is size of `https`\n    if (asciiAlpha(code) && buffer.length < 5) {\n      // @ts-expect-error: definitely number.\n      buffer += String.fromCodePoint(code)\n      effects.consume(code)\n      return protocolPrefixInside\n    }\n    if (code === 58) {\n      const protocol = buffer.toLowerCase()\n      if (protocol === 'http' || protocol === 'https') {\n        effects.consume(code)\n        return protocolSlashesInside\n      }\n    }\n    return nok(code)\n  }\n\n  /**\n   * In slashes.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *           ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolSlashesInside(code) {\n    if (code === 47) {\n      effects.consume(code)\n      if (seen) {\n        return afterProtocol\n      }\n      seen = true\n      return protocolSlashesInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * After protocol, before domain.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterProtocol(code) {\n    // To do: this is different from `markdown-rs`:\n    // https://github.com/wooorm/markdown-rs/blob/b3a921c761309ae00a51fe348d8a43adbc54b518/src/construct/gfm_autolink_literal.rs#L172-L182\n    return code === null ||\n      asciiControl(code) ||\n      markdownLineEndingOrSpace(code) ||\n      unicodeWhitespace(code) ||\n      unicodePunctuation(code)\n      ? nok(code)\n      : effects.attempt(domain, effects.attempt(path, protocolAfter), nok)(code)\n  }\n\n  /**\n   * After a protocol autolink literal.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *                              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolAfter(code) {\n    effects.exit('literalAutolinkHttp')\n    effects.exit('literalAutolink')\n    return ok(code)\n  }\n}\n\n/**\n * `www` prefix.\n *\n * ```markdown\n * > | a www.example.org b\n *       ^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeWwwPrefix(effects, ok, nok) {\n  let size = 0\n  return wwwPrefixInside\n\n  /**\n   * In www prefix.\n   *\n   * ```markdown\n   * > | www.example.com\n   *     ^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwPrefixInside(code) {\n    if ((code === 87 || code === 119) && size < 3) {\n      size++\n      effects.consume(code)\n      return wwwPrefixInside\n    }\n    if (code === 46 && size === 3) {\n      effects.consume(code)\n      return wwwPrefixAfter\n    }\n    return nok(code)\n  }\n\n  /**\n   * After www prefix.\n   *\n   * ```markdown\n   * > | www.example.com\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwPrefixAfter(code) {\n    // If there is *anything*, we can link.\n    return code === null ? nok(code) : ok(code)\n  }\n}\n\n/**\n * Domain.\n *\n * ```markdown\n * > | a https://example.org b\n *               ^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDomain(effects, ok, nok) {\n  /** @type {boolean | undefined} */\n  let underscoreInLastSegment\n  /** @type {boolean | undefined} */\n  let underscoreInLastLastSegment\n  /** @type {boolean | undefined} */\n  let seen\n  return domainInside\n\n  /**\n   * In domain.\n   *\n   * ```markdown\n   * > | https://example.com/a\n   *             ^^^^^^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function domainInside(code) {\n    // Check whether this marker, which is a trailing punctuation\n    // marker, optionally followed by more trailing markers, and then\n    // followed by an end.\n    if (code === 46 || code === 95) {\n      return effects.check(trail, domainAfter, domainAtPunctuation)(code)\n    }\n\n    // GH documents that only alphanumerics (other than `-`, `.`, and `_`) can\n    // occur, which sounds like ASCII only, but they also support `www.點看.com`,\n    // so that’s Unicode.\n    // Instead of some new production for Unicode alphanumerics, markdown\n    // already has that for Unicode punctuation and whitespace, so use those.\n    // Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L12>.\n    if (\n      code === null ||\n      markdownLineEndingOrSpace(code) ||\n      unicodeWhitespace(code) ||\n      (code !== 45 && unicodePunctuation(code))\n    ) {\n      return domainAfter(code)\n    }\n    seen = true\n    effects.consume(code)\n    return domainInside\n  }\n\n  /**\n   * In domain, at potential trailing punctuation, that was not trailing.\n   *\n   * ```markdown\n   * > | https://example.com\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function domainAtPunctuation(code) {\n    // There is an underscore in the last segment of the domain\n    if (code === 95) {\n      underscoreInLastSegment = true\n    }\n    // Otherwise, it’s a `.`: save the last segment underscore in the\n    // penultimate segment slot.\n    else {\n      underscoreInLastLastSegment = underscoreInLastSegment\n      underscoreInLastSegment = undefined\n    }\n    effects.consume(code)\n    return domainInside\n  }\n\n  /**\n   * After domain.\n   *\n   * ```markdown\n   * > | https://example.com/a\n   *                        ^\n   * ```\n   *\n   * @type {State} */\n  function domainAfter(code) {\n    // Note: that’s GH says a dot is needed, but it’s not true:\n    // <https://github.com/github/cmark-gfm/issues/279>\n    if (underscoreInLastLastSegment || underscoreInLastSegment || !seen) {\n      return nok(code)\n    }\n    return ok(code)\n  }\n}\n\n/**\n * Path.\n *\n * ```markdown\n * > | a https://example.org/stuff b\n *                          ^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizePath(effects, ok) {\n  let sizeOpen = 0\n  let sizeClose = 0\n  return pathInside\n\n  /**\n   * In path.\n   *\n   * ```markdown\n   * > | https://example.com/a\n   *                        ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function pathInside(code) {\n    if (code === 40) {\n      sizeOpen++\n      effects.consume(code)\n      return pathInside\n    }\n\n    // To do: `markdown-rs` also needs this.\n    // If this is a paren, and there are less closings than openings,\n    // we don’t check for a trail.\n    if (code === 41 && sizeClose < sizeOpen) {\n      return pathAtPunctuation(code)\n    }\n\n    // Check whether this trailing punctuation marker is optionally\n    // followed by more trailing markers, and then followed\n    // by an end.\n    if (\n      code === 33 ||\n      code === 34 ||\n      code === 38 ||\n      code === 39 ||\n      code === 41 ||\n      code === 42 ||\n      code === 44 ||\n      code === 46 ||\n      code === 58 ||\n      code === 59 ||\n      code === 60 ||\n      code === 63 ||\n      code === 93 ||\n      code === 95 ||\n      code === 126\n    ) {\n      return effects.check(trail, ok, pathAtPunctuation)(code)\n    }\n    if (\n      code === null ||\n      markdownLineEndingOrSpace(code) ||\n      unicodeWhitespace(code)\n    ) {\n      return ok(code)\n    }\n    effects.consume(code)\n    return pathInside\n  }\n\n  /**\n   * In path, at potential trailing punctuation, that was not trailing.\n   *\n   * ```markdown\n   * > | https://example.com/a\"b\n   *                          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function pathAtPunctuation(code) {\n    // Count closing parens.\n    if (code === 41) {\n      sizeClose++\n    }\n    effects.consume(code)\n    return pathInside\n  }\n}\n\n/**\n * Trail.\n *\n * This calls `ok` if this *is* the trail, followed by an end, which means\n * the entire trail is not part of the link.\n * It calls `nok` if this *is* part of the link.\n *\n * ```markdown\n * > | https://example.com\").\n *                        ^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTrail(effects, ok, nok) {\n  return trail\n\n  /**\n   * In trail of domain or path.\n   *\n   * ```markdown\n   * > | https://example.com\").\n   *                        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trail(code) {\n    // Regular trailing punctuation.\n    if (\n      code === 33 ||\n      code === 34 ||\n      code === 39 ||\n      code === 41 ||\n      code === 42 ||\n      code === 44 ||\n      code === 46 ||\n      code === 58 ||\n      code === 59 ||\n      code === 63 ||\n      code === 95 ||\n      code === 126\n    ) {\n      effects.consume(code)\n      return trail\n    }\n\n    // `&` followed by one or more alphabeticals and then a `;`, is\n    // as a whole considered as trailing punctuation.\n    // In all other cases, it is considered as continuation of the URL.\n    if (code === 38) {\n      effects.consume(code)\n      return trailCharRefStart\n    }\n\n    // Needed because we allow literals after `[`, as we fix:\n    // <https://github.com/github/cmark-gfm/issues/278>.\n    // Check that it is not followed by `(` or `[`.\n    if (code === 93) {\n      effects.consume(code)\n      return trailBracketAfter\n    }\n    if (\n      // `<` is an end.\n      code === 60 ||\n      // So is whitespace.\n      code === null ||\n      markdownLineEndingOrSpace(code) ||\n      unicodeWhitespace(code)\n    ) {\n      return ok(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In trail, after `]`.\n   *\n   * > 👉 **Note**: this deviates from `cmark-gfm` to fix a bug.\n   * > See end of <https://github.com/github/cmark-gfm/issues/278> for more.\n   *\n   * ```markdown\n   * > | https://example.com](\n   *                         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trailBracketAfter(code) {\n    // Whitespace or something that could start a resource or reference is the end.\n    // Switch back to trail otherwise.\n    if (\n      code === null ||\n      code === 40 ||\n      code === 91 ||\n      markdownLineEndingOrSpace(code) ||\n      unicodeWhitespace(code)\n    ) {\n      return ok(code)\n    }\n    return trail(code)\n  }\n\n  /**\n   * In character-reference like trail, after `&`.\n   *\n   * ```markdown\n   * > | https://example.com&amp;).\n   *                         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trailCharRefStart(code) {\n    // When non-alpha, it’s not a trail.\n    return asciiAlpha(code) ? trailCharRefInside(code) : nok(code)\n  }\n\n  /**\n   * In character-reference like trail.\n   *\n   * ```markdown\n   * > | https://example.com&amp;).\n   *                         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trailCharRefInside(code) {\n    // Switch back to trail if this is well-formed.\n    if (code === 59) {\n      effects.consume(code)\n      return trail\n    }\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return trailCharRefInside\n    }\n\n    // It’s not a trail.\n    return nok(code)\n  }\n}\n\n/**\n * Dot in email domain trail.\n *\n * This calls `ok` if this *is* the trail, followed by an end, which means\n * the trail is not part of the link.\n * It calls `nok` if this *is* part of the link.\n *\n * ```markdown\n * > | contact@example.org.\n *                        ^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeEmailDomainDotTrail(effects, ok, nok) {\n  return start\n\n  /**\n   * Dot.\n   *\n   * ```markdown\n   * > | contact@example.org.\n   *                    ^   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // Must be dot.\n    effects.consume(code)\n    return after\n  }\n\n  /**\n   * After dot.\n   *\n   * ```markdown\n   * > | contact@example.org.\n   *                     ^   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // Not a trail if alphanumeric.\n    return asciiAlphanumeric(code) ? nok(code) : ok(code)\n  }\n}\n\n/**\n * See:\n * <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L156>.\n *\n * @type {Previous}\n */\nfunction previousWww(code) {\n  return (\n    code === null ||\n    code === 40 ||\n    code === 42 ||\n    code === 95 ||\n    code === 91 ||\n    code === 93 ||\n    code === 126 ||\n    markdownLineEndingOrSpace(code)\n  )\n}\n\n/**\n * See:\n * <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L214>.\n *\n * @type {Previous}\n */\nfunction previousProtocol(code) {\n  return !asciiAlpha(code)\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Previous}\n */\nfunction previousEmail(code) {\n  // Do not allow a slash “inside” atext.\n  // The reference code is a bit weird, but that’s what it results in.\n  // Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L307>.\n  // Other than slash, every preceding character is allowed.\n  return !(code === 47 || gfmAtext(code))\n}\n\n/**\n * @param {Code} code\n * @returns {boolean}\n */\nfunction gfmAtext(code) {\n  return (\n    code === 43 ||\n    code === 45 ||\n    code === 46 ||\n    code === 95 ||\n    asciiAlphanumeric(code)\n  )\n}\n\n/**\n * @param {Array<Event>} events\n * @returns {boolean}\n */\nfunction previousUnbalanced(events) {\n  let index = events.length\n  let result = false\n  while (index--) {\n    const token = events[index][1]\n    if (\n      (token.type === 'labelLink' || token.type === 'labelImage') &&\n      !token._balanced\n    ) {\n      result = true\n      break\n    }\n\n    // If we’ve seen this token, and it was marked as not having any unbalanced\n    // bracket before it, we can exit.\n    if (token._gfmAutolinkLiteralWalkedInto) {\n      result = false\n      break\n    }\n  }\n  if (events.length > 0 && !result) {\n    // Mark the last token as “walked into” w/o finding\n    // anything.\n    events[events.length - 1][1]._gfmAutolinkLiteralWalkedInto = true\n  }\n  return result\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {markdownSpace} from 'micromark-util-character'\n\n// To do: implement `spaceOrTab`, `spaceOrTabMinMax`, `spaceOrTabWithOptions`.\n\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   spaces in markdown are often optional, in which case this factory can be\n *     used and `ok` will be switched to whether spaces were found or not\n * *   one line ending or space can be detected with `markdownSpace(code)` right\n *     before using `factorySpace`\n *\n * ###### Examples\n *\n * Where `␉` represents a tab (plus how much it expands) and `␠` represents a\n * single space.\n *\n * ```markdown\n * ␉\n * ␠␠␠␠\n * ␉␠\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {TokenType} type\n *   Type (`' \\t'`).\n * @param {number | undefined} [max=Infinity]\n *   Max (exclusive).\n * @returns {State}\n *   Start state.\n */\nexport function factorySpace(effects, ok, type, max) {\n  const limit = max ? max - 1 : Number.POSITIVE_INFINITY\n  let size = 0\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownSpace(code)) {\n      effects.enter(type)\n      return prefix(code)\n    }\n    return ok(code)\n  }\n\n  /** @type {State} */\n  function prefix(code) {\n    if (markdownSpace(code) && size++ < limit) {\n      effects.consume(code)\n      return prefix\n    }\n    effects.exit(type)\n    return ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const blankLine = {\n  tokenize: tokenizeBlankLine,\n  partial: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLine(effects, ok, nok) {\n  return start\n\n  /**\n   * Start of blank line.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *     ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    return markdownSpace(code)\n      ? factorySpace(effects, after, 'linePrefix')(code)\n      : after(code)\n  }\n\n  /**\n   * At eof/eol, after optional whitespace.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *       ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {blankLine} from 'micromark-core-commonmark'\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEndingOrSpace} from 'micromark-util-character'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nconst indent = {\n  tokenize: tokenizeIndent,\n  partial: true\n}\n\n// To do: micromark should support a `_hiddenGfmFootnoteSupport`, which only\n// affects label start (image).\n// That will let us drop `tokenizePotentialGfmFootnote*`.\n// It currently has a `_hiddenFootnoteSupport`, which affects that and more.\n// That can be removed when `micromark-extension-footnote` is archived.\n\n/**\n * Create an extension for `micromark` to enable GFM footnote syntax.\n *\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to\n *   enable GFM footnote syntax.\n */\nexport function gfmFootnote() {\n  /** @type {Extension} */\n  return {\n    document: {\n      [91]: {\n        tokenize: tokenizeDefinitionStart,\n        continuation: {\n          tokenize: tokenizeDefinitionContinuation\n        },\n        exit: gfmFootnoteDefinitionEnd\n      }\n    },\n    text: {\n      [91]: {\n        tokenize: tokenizeGfmFootnoteCall\n      },\n      [93]: {\n        add: 'after',\n        tokenize: tokenizePotentialGfmFootnoteCall,\n        resolveTo: resolveToPotentialGfmFootnoteCall\n      }\n    }\n  }\n}\n\n// To do: remove after micromark update.\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizePotentialGfmFootnoteCall(effects, ok, nok) {\n  const self = this\n  let index = self.events.length\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = [])\n  /** @type {Token} */\n  let labelStart\n\n  // Find an opening.\n  while (index--) {\n    const token = self.events[index][1]\n    if (token.type === 'labelImage') {\n      labelStart = token\n      break\n    }\n\n    // Exit if we’ve walked far enough.\n    if (\n      token.type === 'gfmFootnoteCall' ||\n      token.type === 'labelLink' ||\n      token.type === 'label' ||\n      token.type === 'image' ||\n      token.type === 'link'\n    ) {\n      break\n    }\n  }\n  return start\n\n  /**\n   * @type {State}\n   */\n  function start(code) {\n    if (!labelStart || !labelStart._balanced) {\n      return nok(code)\n    }\n    const id = normalizeIdentifier(\n      self.sliceSerialize({\n        start: labelStart.end,\n        end: self.now()\n      })\n    )\n    if (id.codePointAt(0) !== 94 || !defined.includes(id.slice(1))) {\n      return nok(code)\n    }\n    effects.enter('gfmFootnoteCallLabelMarker')\n    effects.consume(code)\n    effects.exit('gfmFootnoteCallLabelMarker')\n    return ok(code)\n  }\n}\n\n// To do: remove after micromark update.\n/** @type {Resolver} */\nfunction resolveToPotentialGfmFootnoteCall(events, context) {\n  let index = events.length\n  /** @type {Token | undefined} */\n  let labelStart\n\n  // Find an opening.\n  while (index--) {\n    if (\n      events[index][1].type === 'labelImage' &&\n      events[index][0] === 'enter'\n    ) {\n      labelStart = events[index][1]\n      break\n    }\n  }\n  // Change the `labelImageMarker` to a `data`.\n  events[index + 1][1].type = 'data'\n  events[index + 3][1].type = 'gfmFootnoteCallLabelMarker'\n\n  // The whole (without `!`):\n  /** @type {Token} */\n  const call = {\n    type: 'gfmFootnoteCall',\n    start: Object.assign({}, events[index + 3][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  }\n  // The `^` marker\n  /** @type {Token} */\n  const marker = {\n    type: 'gfmFootnoteCallMarker',\n    start: Object.assign({}, events[index + 3][1].end),\n    end: Object.assign({}, events[index + 3][1].end)\n  }\n  // Increment the end 1 character.\n  marker.end.column++\n  marker.end.offset++\n  marker.end._bufferIndex++\n  /** @type {Token} */\n  const string = {\n    type: 'gfmFootnoteCallString',\n    start: Object.assign({}, marker.end),\n    end: Object.assign({}, events[events.length - 1][1].start)\n  }\n  /** @type {Token} */\n  const chunk = {\n    type: 'chunkString',\n    contentType: 'string',\n    start: Object.assign({}, string.start),\n    end: Object.assign({}, string.end)\n  }\n\n  /** @type {Array<Event>} */\n  const replacement = [\n    // Take the `labelImageMarker` (now `data`, the `!`)\n    events[index + 1],\n    events[index + 2],\n    ['enter', call, context],\n    // The `[`\n    events[index + 3],\n    events[index + 4],\n    // The `^`.\n    ['enter', marker, context],\n    ['exit', marker, context],\n    // Everything in between.\n    ['enter', string, context],\n    ['enter', chunk, context],\n    ['exit', chunk, context],\n    ['exit', string, context],\n    // The ending (`]`, properly parsed and labelled).\n    events[events.length - 2],\n    events[events.length - 1],\n    ['exit', call, context]\n  ]\n  events.splice(index, events.length - index + 1, ...replacement)\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeGfmFootnoteCall(effects, ok, nok) {\n  const self = this\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = [])\n  let size = 0\n  /** @type {boolean} */\n  let data\n\n  // Note: the implementation of `markdown-rs` is different, because it houses\n  // core *and* extensions in one project.\n  // Therefore, it can include footnote logic inside `label-end`.\n  // We can’t do that, but luckily, we can parse footnotes in a simpler way than\n  // needed for labels.\n  return start\n\n  /**\n   * Start of footnote label.\n   *\n   * ```markdown\n   * > | a [^b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('gfmFootnoteCall')\n    effects.enter('gfmFootnoteCallLabelMarker')\n    effects.consume(code)\n    effects.exit('gfmFootnoteCallLabelMarker')\n    return callStart\n  }\n\n  /**\n   * After `[`, at `^`.\n   *\n   * ```markdown\n   * > | a [^b] c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function callStart(code) {\n    if (code !== 94) return nok(code)\n    effects.enter('gfmFootnoteCallMarker')\n    effects.consume(code)\n    effects.exit('gfmFootnoteCallMarker')\n    effects.enter('gfmFootnoteCallString')\n    effects.enter('chunkString').contentType = 'string'\n    return callData\n  }\n\n  /**\n   * In label.\n   *\n   * ```markdown\n   * > | a [^b] c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function callData(code) {\n    if (\n      // Too long.\n      size > 999 ||\n      // Closing brace with nothing.\n      (code === 93 && !data) ||\n      // Space or tab is not supported by GFM for some reason.\n      // `\\n` and `[` not being supported makes sense.\n      code === null ||\n      code === 91 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      return nok(code)\n    }\n    if (code === 93) {\n      effects.exit('chunkString')\n      const token = effects.exit('gfmFootnoteCallString')\n      if (!defined.includes(normalizeIdentifier(self.sliceSerialize(token)))) {\n        return nok(code)\n      }\n      effects.enter('gfmFootnoteCallLabelMarker')\n      effects.consume(code)\n      effects.exit('gfmFootnoteCallLabelMarker')\n      effects.exit('gfmFootnoteCall')\n      return ok\n    }\n    if (!markdownLineEndingOrSpace(code)) {\n      data = true\n    }\n    size++\n    effects.consume(code)\n    return code === 92 ? callEscape : callData\n  }\n\n  /**\n   * On character after escape.\n   *\n   * ```markdown\n   * > | a [^b\\c] d\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function callEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code)\n      size++\n      return callData\n    }\n    return callData(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDefinitionStart(effects, ok, nok) {\n  const self = this\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = [])\n  /** @type {string} */\n  let identifier\n  let size = 0\n  /** @type {boolean | undefined} */\n  let data\n  return start\n\n  /**\n   * Start of GFM footnote definition.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('gfmFootnoteDefinition')._container = true\n    effects.enter('gfmFootnoteDefinitionLabel')\n    effects.enter('gfmFootnoteDefinitionLabelMarker')\n    effects.consume(code)\n    effects.exit('gfmFootnoteDefinitionLabelMarker')\n    return labelAtMarker\n  }\n\n  /**\n   * In label, at caret.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAtMarker(code) {\n    if (code === 94) {\n      effects.enter('gfmFootnoteDefinitionMarker')\n      effects.consume(code)\n      effects.exit('gfmFootnoteDefinitionMarker')\n      effects.enter('gfmFootnoteDefinitionLabelString')\n      effects.enter('chunkString').contentType = 'string'\n      return labelInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * In label.\n   *\n   * > 👉 **Note**: `cmark-gfm` prevents whitespace from occurring in footnote\n   * > definition labels.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelInside(code) {\n    if (\n      // Too long.\n      size > 999 ||\n      // Closing brace with nothing.\n      (code === 93 && !data) ||\n      // Space or tab is not supported by GFM for some reason.\n      // `\\n` and `[` not being supported makes sense.\n      code === null ||\n      code === 91 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      return nok(code)\n    }\n    if (code === 93) {\n      effects.exit('chunkString')\n      const token = effects.exit('gfmFootnoteDefinitionLabelString')\n      identifier = normalizeIdentifier(self.sliceSerialize(token))\n      effects.enter('gfmFootnoteDefinitionLabelMarker')\n      effects.consume(code)\n      effects.exit('gfmFootnoteDefinitionLabelMarker')\n      effects.exit('gfmFootnoteDefinitionLabel')\n      return labelAfter\n    }\n    if (!markdownLineEndingOrSpace(code)) {\n      data = true\n    }\n    size++\n    effects.consume(code)\n    return code === 92 ? labelEscape : labelInside\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * > 👉 **Note**: `cmark-gfm` currently does not support escaped brackets:\n   * > <https://github.com/github/cmark-gfm/issues/240>\n   *\n   * ```markdown\n   * > | [^a\\*b]: c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code)\n      size++\n      return labelInside\n    }\n    return labelInside(code)\n  }\n\n  /**\n   * After definition label.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAfter(code) {\n    if (code === 58) {\n      effects.enter('definitionMarker')\n      effects.consume(code)\n      effects.exit('definitionMarker')\n      if (!defined.includes(identifier)) {\n        defined.push(identifier)\n      }\n\n      // Any whitespace after the marker is eaten, forming indented code\n      // is not possible.\n      // No space is also fine, just like a block quote marker.\n      return factorySpace(\n        effects,\n        whitespaceAfter,\n        'gfmFootnoteDefinitionWhitespace'\n      )\n    }\n    return nok(code)\n  }\n\n  /**\n   * After definition prefix.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function whitespaceAfter(code) {\n    // `markdown-rs` has a wrapping token for the prefix that is closed here.\n    return ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDefinitionContinuation(effects, ok, nok) {\n  /// Start of footnote definition continuation.\n  ///\n  /// ```markdown\n  ///   | [^a]: b\n  /// > |     c\n  ///     ^\n  /// ```\n  //\n  // Either a blank line, which is okay, or an indented thing.\n  return effects.check(blankLine, ok, effects.attempt(indent, ok, nok))\n}\n\n/** @type {Exiter} */\nfunction gfmFootnoteDefinitionEnd(effects) {\n  effects.exit('gfmFootnoteDefinition')\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'gfmFootnoteDefinitionIndent',\n    4 + 1\n  )\n\n  /**\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'gfmFootnoteDefinitionIndent' &&\n      tail[2].sliceSerialize(tail[1], true).length === 4\n      ? ok(code)\n      : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\n\nimport {\n  markdownLineEndingOrSpace,\n  unicodePunctuation,\n  unicodeWhitespace\n} from 'micromark-util-character'\n/**\n * Classify whether a code represents whitespace, punctuation, or something\n * else.\n *\n * Used for attention (emphasis, strong), whose sequences can open or close\n * based on the class of surrounding characters.\n *\n * > 👉 **Note**: eof (`null`) is seen as whitespace.\n *\n * @param {Code} code\n *   Code.\n * @returns {typeof constants.characterGroupWhitespace | typeof constants.characterGroupPunctuation | undefined}\n *   Group.\n */\nexport function classifyCharacter(code) {\n  if (\n    code === null ||\n    markdownLineEndingOrSpace(code) ||\n    unicodeWhitespace(code)\n  ) {\n    return 1\n  }\n  if (unicodePunctuation(code)) {\n    return 2\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\n/**\n * Call all `resolveAll`s.\n *\n * @param {Array<{resolveAll?: Resolver | undefined}>} constructs\n *   List of constructs, optionally with `resolveAll`s.\n * @param {Array<Event>} events\n *   List of events.\n * @param {TokenizeContext} context\n *   Context used by `tokenize`.\n * @returns {Array<Event>}\n *   Changed events.\n */\nexport function resolveAll(constructs, events, context) {\n  /** @type {Array<Resolver>} */\n  const called = []\n  let index = -1\n\n  while (++index < constructs.length) {\n    const resolve = constructs[index].resolveAll\n\n    if (resolve && !called.includes(resolve)) {\n      events = resolve(events, context)\n      called.push(resolve)\n    }\n  }\n\n  return events\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [singleTilde=true]\n *   Whether to support strikethrough with a single tilde (default: `true`).\n *\n *   Single tildes work on github.com, but are technically prohibited by the\n *   GFM spec.\n */\n\nimport {splice} from 'micromark-util-chunked'\nimport {classifyCharacter} from 'micromark-util-classify-character'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/**\n * Create an extension for `micromark` to enable GFM strikethrough syntax.\n *\n * @param {Options | null | undefined} [options={}]\n *   Configuration.\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions`, to\n *   enable GFM strikethrough syntax.\n */\nexport function gfmStrikethrough(options) {\n  const options_ = options || {}\n  let single = options_.singleTilde\n  const tokenizer = {\n    tokenize: tokenizeStrikethrough,\n    resolveAll: resolveAllStrikethrough\n  }\n  if (single === null || single === undefined) {\n    single = true\n  }\n  return {\n    text: {\n      [126]: tokenizer\n    },\n    insideSpan: {\n      null: [tokenizer]\n    },\n    attentionMarkers: {\n      null: [126]\n    }\n  }\n\n  /**\n   * Take events and resolve strikethrough.\n   *\n   * @type {Resolver}\n   */\n  function resolveAllStrikethrough(events, context) {\n    let index = -1\n\n    // Walk through all events.\n    while (++index < events.length) {\n      // Find a token that can close.\n      if (\n        events[index][0] === 'enter' &&\n        events[index][1].type === 'strikethroughSequenceTemporary' &&\n        events[index][1]._close\n      ) {\n        let open = index\n\n        // Now walk back to find an opener.\n        while (open--) {\n          // Find a token that can open the closer.\n          if (\n            events[open][0] === 'exit' &&\n            events[open][1].type === 'strikethroughSequenceTemporary' &&\n            events[open][1]._open &&\n            // If the sizes are the same:\n            events[index][1].end.offset - events[index][1].start.offset ===\n              events[open][1].end.offset - events[open][1].start.offset\n          ) {\n            events[index][1].type = 'strikethroughSequence'\n            events[open][1].type = 'strikethroughSequence'\n\n            /** @type {Token} */\n            const strikethrough = {\n              type: 'strikethrough',\n              start: Object.assign({}, events[open][1].start),\n              end: Object.assign({}, events[index][1].end)\n            }\n\n            /** @type {Token} */\n            const text = {\n              type: 'strikethroughText',\n              start: Object.assign({}, events[open][1].end),\n              end: Object.assign({}, events[index][1].start)\n            }\n\n            // Opening.\n            /** @type {Array<Event>} */\n            const nextEvents = [\n              ['enter', strikethrough, context],\n              ['enter', events[open][1], context],\n              ['exit', events[open][1], context],\n              ['enter', text, context]\n            ]\n            const insideSpan = context.parser.constructs.insideSpan.null\n            if (insideSpan) {\n              // Between.\n              splice(\n                nextEvents,\n                nextEvents.length,\n                0,\n                resolveAll(insideSpan, events.slice(open + 1, index), context)\n              )\n            }\n\n            // Closing.\n            splice(nextEvents, nextEvents.length, 0, [\n              ['exit', text, context],\n              ['enter', events[index][1], context],\n              ['exit', events[index][1], context],\n              ['exit', strikethrough, context]\n            ])\n            splice(events, open - 1, index - open + 3, nextEvents)\n            index = open + nextEvents.length - 2\n            break\n          }\n        }\n      }\n    }\n    index = -1\n    while (++index < events.length) {\n      if (events[index][1].type === 'strikethroughSequenceTemporary') {\n        events[index][1].type = 'data'\n      }\n    }\n    return events\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Tokenizer}\n   */\n  function tokenizeStrikethrough(effects, ok, nok) {\n    const previous = this.previous\n    const events = this.events\n    let size = 0\n    return start\n\n    /** @type {State} */\n    function start(code) {\n      if (\n        previous === 126 &&\n        events[events.length - 1][1].type !== 'characterEscape'\n      ) {\n        return nok(code)\n      }\n      effects.enter('strikethroughSequenceTemporary')\n      return more(code)\n    }\n\n    /** @type {State} */\n    function more(code) {\n      const before = classifyCharacter(previous)\n      if (code === 126) {\n        // If this is the third marker, exit.\n        if (size > 1) return nok(code)\n        effects.consume(code)\n        size++\n        return more\n      }\n      if (size < 2 && !single) return nok(code)\n      const token = effects.exit('strikethroughSequenceTemporary')\n      const after = classifyCharacter(code)\n      token._open = !after || (after === 2 && Boolean(before))\n      token._close = !before || (before === 2 && Boolean(after))\n      return ok(code)\n    }\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n */\n\n// Port of `edit_map.rs` from `markdown-rs`.\n// This should move to `markdown-js` later.\n\n// Deal with several changes in events, batching them together.\n//\n// Preferably, changes should be kept to a minimum.\n// Sometimes, it’s needed to change the list of events, because parsing can be\n// messy, and it helps to expose a cleaner interface of events to the compiler\n// and other users.\n// It can also help to merge many adjacent similar events.\n// And, in other cases, it’s needed to parse subcontent: pass some events\n// through another tokenizer and inject the result.\n\n/**\n * @typedef {[number, number, Array<Event>]} Change\n * @typedef {[number, number, number]} Jump\n */\n\n/**\n * Tracks a bunch of edits.\n */\nexport class EditMap {\n  /**\n   * Create a new edit map.\n   */\n  constructor() {\n    /**\n     * Record of changes.\n     *\n     * @type {Array<Change>}\n     */\n    this.map = []\n  }\n\n  /**\n   * Create an edit: a remove and/or add at a certain place.\n   *\n   * @param {number} index\n   * @param {number} remove\n   * @param {Array<Event>} add\n   * @returns {undefined}\n   */\n  add(index, remove, add) {\n    addImpl(this, index, remove, add)\n  }\n\n  // To do: add this when moving to `micromark`.\n  // /**\n  //  * Create an edit: but insert `add` before existing additions.\n  //  *\n  //  * @param {number} index\n  //  * @param {number} remove\n  //  * @param {Array<Event>} add\n  //  * @returns {undefined}\n  //  */\n  // addBefore(index, remove, add) {\n  //   addImpl(this, index, remove, add, true)\n  // }\n\n  /**\n   * Done, change the events.\n   *\n   * @param {Array<Event>} events\n   * @returns {undefined}\n   */\n  consume(events) {\n    this.map.sort(function (a, b) {\n      return a[0] - b[0]\n    })\n\n    /* c8 ignore next 3 -- `resolve` is never called without tables, so without edits. */\n    if (this.map.length === 0) {\n      return\n    }\n\n    // To do: if links are added in events, like they are in `markdown-rs`,\n    // this is needed.\n    // // Calculate jumps: where items in the current list move to.\n    // /** @type {Array<Jump>} */\n    // const jumps = []\n    // let index = 0\n    // let addAcc = 0\n    // let removeAcc = 0\n    // while (index < this.map.length) {\n    //   const [at, remove, add] = this.map[index]\n    //   removeAcc += remove\n    //   addAcc += add.length\n    //   jumps.push([at, removeAcc, addAcc])\n    //   index += 1\n    // }\n    //\n    // . shiftLinks(events, jumps)\n\n    let index = this.map.length\n    /** @type {Array<Array<Event>>} */\n    const vecs = []\n    while (index > 0) {\n      index -= 1\n      vecs.push(\n        events.slice(this.map[index][0] + this.map[index][1]),\n        this.map[index][2]\n      )\n\n      // Truncate rest.\n      events.length = this.map[index][0]\n    }\n    vecs.push([...events])\n    events.length = 0\n    let slice = vecs.pop()\n    while (slice) {\n      events.push(...slice)\n      slice = vecs.pop()\n    }\n\n    // Truncate everything.\n    this.map.length = 0\n  }\n}\n\n/**\n * Create an edit.\n *\n * @param {EditMap} editMap\n * @param {number} at\n * @param {number} remove\n * @param {Array<Event>} add\n * @returns {undefined}\n */\nfunction addImpl(editMap, at, remove, add) {\n  let index = 0\n\n  /* c8 ignore next 3 -- `resolve` is never called without tables, so without edits. */\n  if (remove === 0 && add.length === 0) {\n    return\n  }\n  while (index < editMap.map.length) {\n    if (editMap.map[index][0] === at) {\n      editMap.map[index][1] += remove\n\n      // To do: before not used by tables, use when moving to micromark.\n      // if (before) {\n      //   add.push(...editMap.map[index][2])\n      //   editMap.map[index][2] = add\n      // } else {\n      editMap.map[index][2].push(...add)\n      // }\n\n      return\n    }\n    index += 1\n  }\n  editMap.map.push([at, remove, add])\n}\n\n// /**\n//  * Shift `previous` and `next` links according to `jumps`.\n//  *\n//  * This fixes links in case there are events removed or added between them.\n//  *\n//  * @param {Array<Event>} events\n//  * @param {Array<Jump>} jumps\n//  */\n// function shiftLinks(events, jumps) {\n//   let jumpIndex = 0\n//   let index = 0\n//   let add = 0\n//   let rm = 0\n\n//   while (index < events.length) {\n//     const rmCurr = rm\n\n//     while (jumpIndex < jumps.length && jumps[jumpIndex][0] <= index) {\n//       add = jumps[jumpIndex][2]\n//       rm = jumps[jumpIndex][1]\n//       jumpIndex += 1\n//     }\n\n//     // Ignore items that will be removed.\n//     if (rm > rmCurr) {\n//       index += rm - rmCurr\n//     } else {\n//       // ?\n//       // if let Some(link) = &events[index].link {\n//       //     if let Some(next) = link.next {\n//       //         events[next].link.as_mut().unwrap().previous = Some(index + add - rm);\n//       //         while jumpIndex < jumps.len() && jumps[jumpIndex].0 <= next {\n//       //             add = jumps[jumpIndex].2;\n//       //             rm = jumps[jumpIndex].1;\n//       //             jumpIndex += 1;\n//       //         }\n//       //         events[index].link.as_mut().unwrap().next = Some(next + add - rm);\n//       //         index = next;\n//       //         continue;\n//       //     }\n//       // }\n//       index += 1\n//     }\n//   }\n// }\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n */\n\n/**\n * @typedef {'center' | 'left' | 'none' | 'right'} Align\n */\n\n/**\n * Figure out the alignment of a GFM table.\n *\n * @param {Readonly<Array<Event>>} events\n *   List of events.\n * @param {number} index\n *   Table enter event.\n * @returns {Array<Align>}\n *   List of aligns.\n */\nexport function gfmTableAlign(events, index) {\n  let inDelimiterRow = false\n  /** @type {Array<Align>} */\n  const align = []\n  while (index < events.length) {\n    const event = events[index]\n    if (inDelimiterRow) {\n      if (event[0] === 'enter') {\n        // Start of alignment value: set a new column.\n        // To do: `markdown-rs` uses `tableDelimiterCellValue`.\n        if (event[1].type === 'tableContent') {\n          align.push(\n            events[index + 1][1].type === 'tableDelimiterMarker'\n              ? 'left'\n              : 'none'\n          )\n        }\n      }\n      // Exits:\n      // End of alignment value: change the column.\n      // To do: `markdown-rs` uses `tableDelimiterCellValue`.\n      else if (event[1].type === 'tableContent') {\n        if (events[index - 1][1].type === 'tableDelimiterMarker') {\n          const alignIndex = align.length - 1\n          align[alignIndex] = align[alignIndex] === 'left' ? 'center' : 'right'\n        }\n      }\n      // Done!\n      else if (event[1].type === 'tableDelimiterRow') {\n        break\n      }\n    } else if (event[0] === 'enter' && event[1].type === 'tableDelimiterRow') {\n      inDelimiterRow = true\n    }\n    index += 1\n  }\n  return align\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\n/**\n * @typedef {[number, number, number, number]} Range\n *   Cell info.\n *\n * @typedef {0 | 1 | 2 | 3} RowKind\n *   Where we are: `1` for head row, `2` for delimiter row, `3` for body row.\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {EditMap} from './edit-map.js'\nimport {gfmTableAlign} from './infer.js'\n\n/**\n * Create an HTML extension for `micromark` to support GitHub tables syntax.\n *\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to enable GFM\n *   table syntax.\n */\nexport function gfmTable() {\n  return {\n    flow: {\n      null: {\n        tokenize: tokenizeTable,\n        resolveAll: resolveTable\n      }\n    }\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTable(effects, ok, nok) {\n  const self = this\n  let size = 0\n  let sizeB = 0\n  /** @type {boolean | undefined} */\n  let seen\n  return start\n\n  /**\n   * Start of a GFM table.\n   *\n   * If there is a valid table row or table head before, then we try to parse\n   * another row.\n   * Otherwise, we try to parse a head.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *   | | - |\n   * > | | b |\n   *     ^\n   * ```\n   * @type {State}\n   */\n  function start(code) {\n    let index = self.events.length - 1\n    while (index > -1) {\n      const type = self.events[index][1].type\n      if (\n        type === 'lineEnding' ||\n        // Note: markdown-rs uses `whitespace` instead of `linePrefix`\n        type === 'linePrefix'\n      )\n        index--\n      else break\n    }\n    const tail = index > -1 ? self.events[index][1].type : null\n    const next =\n      tail === 'tableHead' || tail === 'tableRow' ? bodyRowStart : headRowBefore\n\n    // Don’t allow lazy body rows.\n    if (next === bodyRowStart && self.parser.lazy[self.now().line]) {\n      return nok(code)\n    }\n    return next(code)\n  }\n\n  /**\n   * Before table head row.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowBefore(code) {\n    effects.enter('tableHead')\n    effects.enter('tableRow')\n    return headRowStart(code)\n  }\n\n  /**\n   * Before table head row, after whitespace.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowStart(code) {\n    if (code === 124) {\n      return headRowBreak(code)\n    }\n\n    // To do: micromark-js should let us parse our own whitespace in extensions,\n    // like `markdown-rs`:\n    //\n    // ```js\n    // // 4+ spaces.\n    // if (markdownSpace(code)) {\n    //   return nok(code)\n    // }\n    // ```\n\n    seen = true\n    // Count the first character, that isn’t a pipe, double.\n    sizeB += 1\n    return headRowBreak(code)\n  }\n\n  /**\n   * At break in table head row.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *       ^\n   *         ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowBreak(code) {\n    if (code === null) {\n      // Note: in `markdown-rs`, we need to reset, in `micromark-js` we don‘t.\n      return nok(code)\n    }\n    if (markdownLineEnding(code)) {\n      // If anything other than one pipe (ignoring whitespace) was used, it’s fine.\n      if (sizeB > 1) {\n        sizeB = 0\n        // To do: check if this works.\n        // Feel free to interrupt:\n        self.interrupt = true\n        effects.exit('tableRow')\n        effects.enter('lineEnding')\n        effects.consume(code)\n        effects.exit('lineEnding')\n        return headDelimiterStart\n      }\n\n      // Note: in `markdown-rs`, we need to reset, in `micromark-js` we don‘t.\n      return nok(code)\n    }\n    if (markdownSpace(code)) {\n      // To do: check if this is fine.\n      // effects.attempt(State::Next(StateName::GfmTableHeadRowBreak), State::Nok)\n      // State::Retry(space_or_tab(tokenizer))\n      return factorySpace(effects, headRowBreak, 'whitespace')(code)\n    }\n    sizeB += 1\n    if (seen) {\n      seen = false\n      // Header cell count.\n      size += 1\n    }\n    if (code === 124) {\n      effects.enter('tableCellDivider')\n      effects.consume(code)\n      effects.exit('tableCellDivider')\n      // Whether a delimiter was seen.\n      seen = true\n      return headRowBreak\n    }\n\n    // Anything else is cell data.\n    effects.enter('data')\n    return headRowData(code)\n  }\n\n  /**\n   * In table head row data.\n   *\n   * ```markdown\n   * > | | a |\n   *       ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowData(code) {\n    if (code === null || code === 124 || markdownLineEndingOrSpace(code)) {\n      effects.exit('data')\n      return headRowBreak(code)\n    }\n    effects.consume(code)\n    return code === 92 ? headRowEscape : headRowData\n  }\n\n  /**\n   * In table head row escape.\n   *\n   * ```markdown\n   * > | | a\\-b |\n   *         ^\n   *   | | ---- |\n   *   | | c    |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowEscape(code) {\n    if (code === 92 || code === 124) {\n      effects.consume(code)\n      return headRowData\n    }\n    return headRowData(code)\n  }\n\n  /**\n   * Before delimiter row.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *     ^\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterStart(code) {\n    // Reset `interrupt`.\n    self.interrupt = false\n\n    // Note: in `markdown-rs`, we need to handle piercing here too.\n    if (self.parser.lazy[self.now().line]) {\n      return nok(code)\n    }\n    effects.enter('tableDelimiterRow')\n    // Track if we’ve seen a `:` or `|`.\n    seen = false\n    if (markdownSpace(code)) {\n      return factorySpace(\n        effects,\n        headDelimiterBefore,\n        'linePrefix',\n        self.parser.constructs.disable.null.includes('codeIndented')\n          ? undefined\n          : 4\n      )(code)\n    }\n    return headDelimiterBefore(code)\n  }\n\n  /**\n   * Before delimiter row, after optional whitespace.\n   *\n   * Reused when a `|` is found later, to parse another cell.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *     ^\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterBefore(code) {\n    if (code === 45 || code === 58) {\n      return headDelimiterValueBefore(code)\n    }\n    if (code === 124) {\n      seen = true\n      // If we start with a pipe, we open a cell marker.\n      effects.enter('tableCellDivider')\n      effects.consume(code)\n      effects.exit('tableCellDivider')\n      return headDelimiterCellBefore\n    }\n\n    // More whitespace / empty row not allowed at start.\n    return headDelimiterNok(code)\n  }\n\n  /**\n   * After `|`, before delimiter cell.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterCellBefore(code) {\n    if (markdownSpace(code)) {\n      return factorySpace(effects, headDelimiterValueBefore, 'whitespace')(code)\n    }\n    return headDelimiterValueBefore(code)\n  }\n\n  /**\n   * Before delimiter cell value.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterValueBefore(code) {\n    // Align: left.\n    if (code === 58) {\n      sizeB += 1\n      seen = true\n      effects.enter('tableDelimiterMarker')\n      effects.consume(code)\n      effects.exit('tableDelimiterMarker')\n      return headDelimiterLeftAlignmentAfter\n    }\n\n    // Align: none.\n    if (code === 45) {\n      sizeB += 1\n      // To do: seems weird that this *isn’t* left aligned, but that state is used?\n      return headDelimiterLeftAlignmentAfter(code)\n    }\n    if (code === null || markdownLineEnding(code)) {\n      return headDelimiterCellAfter(code)\n    }\n    return headDelimiterNok(code)\n  }\n\n  /**\n   * After delimiter cell left alignment marker.\n   *\n   * ```markdown\n   *   | | a  |\n   * > | | :- |\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterLeftAlignmentAfter(code) {\n    if (code === 45) {\n      effects.enter('tableDelimiterFiller')\n      return headDelimiterFiller(code)\n    }\n\n    // Anything else is not ok after the left-align colon.\n    return headDelimiterNok(code)\n  }\n\n  /**\n   * In delimiter cell filler.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterFiller(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return headDelimiterFiller\n    }\n\n    // Align is `center` if it was `left`, `right` otherwise.\n    if (code === 58) {\n      seen = true\n      effects.exit('tableDelimiterFiller')\n      effects.enter('tableDelimiterMarker')\n      effects.consume(code)\n      effects.exit('tableDelimiterMarker')\n      return headDelimiterRightAlignmentAfter\n    }\n    effects.exit('tableDelimiterFiller')\n    return headDelimiterRightAlignmentAfter(code)\n  }\n\n  /**\n   * After delimiter cell right alignment marker.\n   *\n   * ```markdown\n   *   | |  a |\n   * > | | -: |\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterRightAlignmentAfter(code) {\n    if (markdownSpace(code)) {\n      return factorySpace(effects, headDelimiterCellAfter, 'whitespace')(code)\n    }\n    return headDelimiterCellAfter(code)\n  }\n\n  /**\n   * After delimiter cell.\n   *\n   * ```markdown\n   *   | |  a |\n   * > | | -: |\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterCellAfter(code) {\n    if (code === 124) {\n      return headDelimiterBefore(code)\n    }\n    if (code === null || markdownLineEnding(code)) {\n      // Exit when:\n      // * there was no `:` or `|` at all (it’s a thematic break or setext\n      //   underline instead)\n      // * the header cell count is not the delimiter cell count\n      if (!seen || size !== sizeB) {\n        return headDelimiterNok(code)\n      }\n\n      // Note: in markdown-rs`, a reset is needed here.\n      effects.exit('tableDelimiterRow')\n      effects.exit('tableHead')\n      // To do: in `markdown-rs`, resolvers need to be registered manually.\n      // effects.register_resolver(ResolveName::GfmTable)\n      return ok(code)\n    }\n    return headDelimiterNok(code)\n  }\n\n  /**\n   * In delimiter row, at a disallowed byte.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | x |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterNok(code) {\n    // Note: in `markdown-rs`, we need to reset, in `micromark-js` we don‘t.\n    return nok(code)\n  }\n\n  /**\n   * Before table body row.\n   *\n   * ```markdown\n   *   | | a |\n   *   | | - |\n   * > | | b |\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowStart(code) {\n    // Note: in `markdown-rs` we need to manually take care of a prefix,\n    // but in `micromark-js` that is done for us, so if we’re here, we’re\n    // never at whitespace.\n    effects.enter('tableRow')\n    return bodyRowBreak(code)\n  }\n\n  /**\n   * At break in table body row.\n   *\n   * ```markdown\n   *   | | a |\n   *   | | - |\n   * > | | b |\n   *     ^\n   *       ^\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowBreak(code) {\n    if (code === 124) {\n      effects.enter('tableCellDivider')\n      effects.consume(code)\n      effects.exit('tableCellDivider')\n      return bodyRowBreak\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('tableRow')\n      return ok(code)\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(effects, bodyRowBreak, 'whitespace')(code)\n    }\n\n    // Anything else is cell content.\n    effects.enter('data')\n    return bodyRowData(code)\n  }\n\n  /**\n   * In table body row data.\n   *\n   * ```markdown\n   *   | | a |\n   *   | | - |\n   * > | | b |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowData(code) {\n    if (code === null || code === 124 || markdownLineEndingOrSpace(code)) {\n      effects.exit('data')\n      return bodyRowBreak(code)\n    }\n    effects.consume(code)\n    return code === 92 ? bodyRowEscape : bodyRowData\n  }\n\n  /**\n   * In table body row escape.\n   *\n   * ```markdown\n   *   | | a    |\n   *   | | ---- |\n   * > | | b\\-c |\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowEscape(code) {\n    if (code === 92 || code === 124) {\n      effects.consume(code)\n      return bodyRowData\n    }\n    return bodyRowData(code)\n  }\n}\n\n/** @type {Resolver} */\n\nfunction resolveTable(events, context) {\n  let index = -1\n  let inFirstCellAwaitingPipe = true\n  /** @type {RowKind} */\n  let rowKind = 0\n  /** @type {Range} */\n  let lastCell = [0, 0, 0, 0]\n  /** @type {Range} */\n  let cell = [0, 0, 0, 0]\n  let afterHeadAwaitingFirstBodyRow = false\n  let lastTableEnd = 0\n  /** @type {Token | undefined} */\n  let currentTable\n  /** @type {Token | undefined} */\n  let currentBody\n  /** @type {Token | undefined} */\n  let currentCell\n  const map = new EditMap()\n  while (++index < events.length) {\n    const event = events[index]\n    const token = event[1]\n    if (event[0] === 'enter') {\n      // Start of head.\n      if (token.type === 'tableHead') {\n        afterHeadAwaitingFirstBodyRow = false\n\n        // Inject previous (body end and) table end.\n        if (lastTableEnd !== 0) {\n          flushTableEnd(map, context, lastTableEnd, currentTable, currentBody)\n          currentBody = undefined\n          lastTableEnd = 0\n        }\n\n        // Inject table start.\n        currentTable = {\n          type: 'table',\n          start: Object.assign({}, token.start),\n          // Note: correct end is set later.\n          end: Object.assign({}, token.end)\n        }\n        map.add(index, 0, [['enter', currentTable, context]])\n      } else if (\n        token.type === 'tableRow' ||\n        token.type === 'tableDelimiterRow'\n      ) {\n        inFirstCellAwaitingPipe = true\n        currentCell = undefined\n        lastCell = [0, 0, 0, 0]\n        cell = [0, index + 1, 0, 0]\n\n        // Inject table body start.\n        if (afterHeadAwaitingFirstBodyRow) {\n          afterHeadAwaitingFirstBodyRow = false\n          currentBody = {\n            type: 'tableBody',\n            start: Object.assign({}, token.start),\n            // Note: correct end is set later.\n            end: Object.assign({}, token.end)\n          }\n          map.add(index, 0, [['enter', currentBody, context]])\n        }\n        rowKind = token.type === 'tableDelimiterRow' ? 2 : currentBody ? 3 : 1\n      }\n      // Cell data.\n      else if (\n        rowKind &&\n        (token.type === 'data' ||\n          token.type === 'tableDelimiterMarker' ||\n          token.type === 'tableDelimiterFiller')\n      ) {\n        inFirstCellAwaitingPipe = false\n\n        // First value in cell.\n        if (cell[2] === 0) {\n          if (lastCell[1] !== 0) {\n            cell[0] = cell[1]\n            currentCell = flushCell(\n              map,\n              context,\n              lastCell,\n              rowKind,\n              undefined,\n              currentCell\n            )\n            lastCell = [0, 0, 0, 0]\n          }\n          cell[2] = index\n        }\n      } else if (token.type === 'tableCellDivider') {\n        if (inFirstCellAwaitingPipe) {\n          inFirstCellAwaitingPipe = false\n        } else {\n          if (lastCell[1] !== 0) {\n            cell[0] = cell[1]\n            currentCell = flushCell(\n              map,\n              context,\n              lastCell,\n              rowKind,\n              undefined,\n              currentCell\n            )\n          }\n          lastCell = cell\n          cell = [lastCell[1], index, 0, 0]\n        }\n      }\n    }\n    // Exit events.\n    else if (token.type === 'tableHead') {\n      afterHeadAwaitingFirstBodyRow = true\n      lastTableEnd = index\n    } else if (\n      token.type === 'tableRow' ||\n      token.type === 'tableDelimiterRow'\n    ) {\n      lastTableEnd = index\n      if (lastCell[1] !== 0) {\n        cell[0] = cell[1]\n        currentCell = flushCell(\n          map,\n          context,\n          lastCell,\n          rowKind,\n          index,\n          currentCell\n        )\n      } else if (cell[1] !== 0) {\n        currentCell = flushCell(map, context, cell, rowKind, index, currentCell)\n      }\n      rowKind = 0\n    } else if (\n      rowKind &&\n      (token.type === 'data' ||\n        token.type === 'tableDelimiterMarker' ||\n        token.type === 'tableDelimiterFiller')\n    ) {\n      cell[3] = index\n    }\n  }\n  if (lastTableEnd !== 0) {\n    flushTableEnd(map, context, lastTableEnd, currentTable, currentBody)\n  }\n  map.consume(context.events)\n\n  // To do: move this into `html`, when events are exposed there.\n  // That’s what `markdown-rs` does.\n  // That needs updates to `mdast-util-gfm-table`.\n  index = -1\n  while (++index < context.events.length) {\n    const event = context.events[index]\n    if (event[0] === 'enter' && event[1].type === 'table') {\n      event[1]._align = gfmTableAlign(context.events, index)\n    }\n  }\n  return events\n}\n\n/**\n * Generate a cell.\n *\n * @param {EditMap} map\n * @param {Readonly<TokenizeContext>} context\n * @param {Readonly<Range>} range\n * @param {RowKind} rowKind\n * @param {number | undefined} rowEnd\n * @param {Token | undefined} previousCell\n * @returns {Token | undefined}\n */\n// eslint-disable-next-line max-params\nfunction flushCell(map, context, range, rowKind, rowEnd, previousCell) {\n  // `markdown-rs` uses:\n  // rowKind === 2 ? 'tableDelimiterCell' : 'tableCell'\n  const groupName =\n    rowKind === 1\n      ? 'tableHeader'\n      : rowKind === 2\n      ? 'tableDelimiter'\n      : 'tableData'\n  // `markdown-rs` uses:\n  // rowKind === 2 ? 'tableDelimiterCellValue' : 'tableCellText'\n  const valueName = 'tableContent'\n\n  // Insert an exit for the previous cell, if there is one.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //          ^-- exit\n  //           ^^^^-- this cell\n  // ```\n  if (range[0] !== 0) {\n    previousCell.end = Object.assign({}, getPoint(context.events, range[0]))\n    map.add(range[0], 0, [['exit', previousCell, context]])\n  }\n\n  // Insert enter of this cell.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //           ^-- enter\n  //           ^^^^-- this cell\n  // ```\n  const now = getPoint(context.events, range[1])\n  previousCell = {\n    type: groupName,\n    start: Object.assign({}, now),\n    // Note: correct end is set later.\n    end: Object.assign({}, now)\n  }\n  map.add(range[1], 0, [['enter', previousCell, context]])\n\n  // Insert text start at first data start and end at last data end, and\n  // remove events between.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //            ^-- enter\n  //             ^-- exit\n  //           ^^^^-- this cell\n  // ```\n  if (range[2] !== 0) {\n    const relatedStart = getPoint(context.events, range[2])\n    const relatedEnd = getPoint(context.events, range[3])\n    /** @type {Token} */\n    const valueToken = {\n      type: valueName,\n      start: Object.assign({}, relatedStart),\n      end: Object.assign({}, relatedEnd)\n    }\n    map.add(range[2], 0, [['enter', valueToken, context]])\n    if (rowKind !== 2) {\n      // Fix positional info on remaining events\n      const start = context.events[range[2]]\n      const end = context.events[range[3]]\n      start[1].end = Object.assign({}, end[1].end)\n      start[1].type = 'chunkText'\n      start[1].contentType = 'text'\n\n      // Remove if needed.\n      if (range[3] > range[2] + 1) {\n        const a = range[2] + 1\n        const b = range[3] - range[2] - 1\n        map.add(a, b, [])\n      }\n    }\n    map.add(range[3] + 1, 0, [['exit', valueToken, context]])\n  }\n\n  // Insert an exit for the last cell, if at the row end.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //                    ^-- exit\n  //               ^^^^^^-- this cell (the last one contains two “between” parts)\n  // ```\n  if (rowEnd !== undefined) {\n    previousCell.end = Object.assign({}, getPoint(context.events, rowEnd))\n    map.add(rowEnd, 0, [['exit', previousCell, context]])\n    previousCell = undefined\n  }\n  return previousCell\n}\n\n/**\n * Generate table end (and table body end).\n *\n * @param {Readonly<EditMap>} map\n * @param {Readonly<TokenizeContext>} context\n * @param {number} index\n * @param {Token} table\n * @param {Token | undefined} tableBody\n */\n// eslint-disable-next-line max-params\nfunction flushTableEnd(map, context, index, table, tableBody) {\n  /** @type {Array<Event>} */\n  const exits = []\n  const related = getPoint(context.events, index)\n  if (tableBody) {\n    tableBody.end = Object.assign({}, related)\n    exits.push(['exit', tableBody, context])\n  }\n  table.end = Object.assign({}, related)\n  exits.push(['exit', table, context])\n  map.add(index + 1, 0, exits)\n}\n\n/**\n * @param {Readonly<Array<Event>>} events\n * @param {number} index\n * @returns {Readonly<Point>}\n */\nfunction getPoint(events, index) {\n  const event = events[index]\n  const side = event[0] === 'enter' ? 'start' : 'end'\n  return event[1][side]\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nconst tasklistCheck = {\n  tokenize: tokenizeTasklistCheck\n}\n\n/**\n * Create an HTML extension for `micromark` to support GFM task list items\n * syntax.\n *\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `htmlExtensions` to\n *   support GFM task list items when serializing to HTML.\n */\nexport function gfmTaskListItem() {\n  return {\n    text: {\n      [91]: tasklistCheck\n    }\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTasklistCheck(effects, ok, nok) {\n  const self = this\n  return open\n\n  /**\n   * At start of task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (\n      // Exit if there’s stuff before.\n      self.previous !== null ||\n      // Exit if not in the first content that is the first child of a list\n      // item.\n      !self._gfmTasklistFirstContentOfListItem\n    ) {\n      return nok(code)\n    }\n    effects.enter('taskListCheck')\n    effects.enter('taskListCheckMarker')\n    effects.consume(code)\n    effects.exit('taskListCheckMarker')\n    return inside\n  }\n\n  /**\n   * In task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    // Currently we match how GH works in files.\n    // To match how GH works in comments, use `markdownSpace` (`[\\t ]`) instead\n    // of `markdownLineEndingOrSpace` (`[\\t\\n\\r ]`).\n    if (markdownLineEndingOrSpace(code)) {\n      effects.enter('taskListCheckValueUnchecked')\n      effects.consume(code)\n      effects.exit('taskListCheckValueUnchecked')\n      return close\n    }\n    if (code === 88 || code === 120) {\n      effects.enter('taskListCheckValueChecked')\n      effects.consume(code)\n      effects.exit('taskListCheckValueChecked')\n      return close\n    }\n    return nok(code)\n  }\n\n  /**\n   * At close of task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function close(code) {\n    if (code === 93) {\n      effects.enter('taskListCheckMarker')\n      effects.consume(code)\n      effects.exit('taskListCheckMarker')\n      effects.exit('taskListCheck')\n      return after\n    }\n    return nok(code)\n  }\n\n  /**\n   * @type {State}\n   */\n  function after(code) {\n    // EOL in paragraph means there must be something else after it.\n    if (markdownLineEnding(code)) {\n      return ok(code)\n    }\n\n    // Space or tab?\n    // Check what comes after.\n    if (markdownSpace(code)) {\n      return effects.check(\n        {\n          tokenize: spaceThenNonSpace\n        },\n        ok,\n        nok\n      )(code)\n    }\n\n    // EOF, or non-whitespace, both wrong.\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction spaceThenNonSpace(effects, ok, nok) {\n  return factorySpace(effects, after, 'whitespace')\n\n  /**\n   * After whitespace, after task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // EOF means there was nothing, so bad.\n    // EOL means there’s content after it, so good.\n    // Impossible to have more spaces.\n    // Anything else is good.\n    return code === null ? nok(code) : ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-extension-gfm-footnote').HtmlOptions} HtmlOptions\n * @typedef {import('micromark-extension-gfm-strikethrough').Options} Options\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n */\n\nimport {\n  combineExtensions,\n  combineHtmlExtensions\n} from 'micromark-util-combine-extensions'\nimport {\n  gfmAutolinkLiteral,\n  gfmAutolinkLiteralHtml\n} from 'micromark-extension-gfm-autolink-literal'\nimport {gfmFootnote, gfmFootnoteHtml} from 'micromark-extension-gfm-footnote'\nimport {\n  gfmStrikethrough,\n  gfmStrikethroughHtml\n} from 'micromark-extension-gfm-strikethrough'\nimport {gfmTable, gfmTableHtml} from 'micromark-extension-gfm-table'\nimport {gfmTagfilterHtml} from 'micromark-extension-gfm-tagfilter'\nimport {\n  gfmTaskListItem,\n  gfmTaskListItemHtml\n} from 'micromark-extension-gfm-task-list-item'\n\n/**\n * Create an extension for `micromark` to enable GFM syntax.\n *\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n *\n *   Passed to `micromark-extens-gfm-strikethrough`.\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to enable GFM\n *   syntax.\n */\nexport function gfm(options) {\n  return combineExtensions([\n    gfmAutolinkLiteral(),\n    gfmFootnote(),\n    gfmStrikethrough(options),\n    gfmTable(),\n    gfmTaskListItem()\n  ])\n}\n\n/**\n * Create an extension for `micromark` to support GFM when serializing to HTML.\n *\n * @param {HtmlOptions | null | undefined} [options]\n *   Configuration (optional).\n *\n *   Passed to `micromark-extens-gfm-footnote`.\n * @returns {HtmlExtension}\n *   Extension for `micromark` that can be passed in `htmlExtensions` to\n *   support GFM when serializing to HTML.\n */\nexport function gfmHtml(options) {\n  return combineHtmlExtensions([\n    gfmAutolinkLiteralHtml(),\n    gfmFootnoteHtml(options),\n    gfmStrikethroughHtml(),\n    gfmTableHtml(),\n    gfmTagfilterHtml(),\n    gfmTaskListItemHtml()\n  ])\n}\n","/// <reference types=\"remark-parse\" />\n/// <reference types=\"remark-stringify\" />\n\n/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast-util-gfm').Options} MdastOptions\n * @typedef {import('micromark-extension-gfm').Options} MicromarkOptions\n * @typedef {import('unified').Processor<Root>} Processor\n */\n\n/**\n * @typedef {MicromarkOptions & MdastOptions} Options\n *   Configuration.\n */\n\nimport {gfmFromMarkdown, gfmToMarkdown} from 'mdast-util-gfm'\nimport {gfm} from 'micromark-extension-gfm'\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Add support GFM (autolink literals, footnotes, strikethrough, tables,\n * tasklists).\n *\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {undefined}\n *   Nothing.\n */\nexport default function remarkGfm(options) {\n  // @ts-expect-error: TS is wrong about `this`.\n  // eslint-disable-next-line unicorn/no-this-assignment\n  const self = /** @type {Processor} */ (this)\n  const settings = options || emptyOptions\n  const data = self.data()\n\n  const micromarkExtensions =\n    data.micromarkExtensions || (data.micromarkExtensions = [])\n  const fromMarkdownExtensions =\n    data.fromMarkdownExtensions || (data.fromMarkdownExtensions = [])\n  const toMarkdownExtensions =\n    data.toMarkdownExtensions || (data.toMarkdownExtensions = [])\n\n  micromarkExtensions.push(gfm(settings))\n  fromMarkdownExtensions.push(gfmFromMarkdown())\n  toMarkdownExtensions.push(gfmToMarkdown(settings))\n}\n","/**\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n */\n\n/**\n * @typedef {import('mdast-util-gfm-table').Options} Options\n *   Configuration.\n */\n\nimport {\n  gfmAutolinkLiteralFromMarkdown,\n  gfmAutolinkLiteralToMarkdown\n} from 'mdast-util-gfm-autolink-literal'\nimport {\n  gfmFootnoteFromMarkdown,\n  gfmFootnoteToMarkdown\n} from 'mdast-util-gfm-footnote'\nimport {\n  gfmStrikethroughFromMarkdown,\n  gfmStrikethroughToMarkdown\n} from 'mdast-util-gfm-strikethrough'\nimport {gfmTableFromMarkdown, gfmTableToMarkdown} from 'mdast-util-gfm-table'\nimport {\n  gfmTaskListItemFromMarkdown,\n  gfmTaskListItemToMarkdown\n} from 'mdast-util-gfm-task-list-item'\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM (autolink\n * literals, footnotes, strikethrough, tables, tasklists).\n *\n * @returns {Array<FromMarkdownExtension>}\n *   Extension for `mdast-util-from-markdown` to enable GFM (autolink literals,\n *   footnotes, strikethrough, tables, tasklists).\n */\nexport function gfmFromMarkdown() {\n  return [\n    gfmAutolinkLiteralFromMarkdown(),\n    gfmFootnoteFromMarkdown(),\n    gfmStrikethroughFromMarkdown(),\n    gfmTableFromMarkdown(),\n    gfmTaskListItemFromMarkdown()\n  ]\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM (autolink\n * literals, footnotes, strikethrough, tables, tasklists).\n *\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM (autolink literals,\n *   footnotes, strikethrough, tables, tasklists).\n */\nexport function gfmToMarkdown(options) {\n  return {\n    extensions: [\n      gfmAutolinkLiteralToMarkdown(),\n      gfmFootnoteToMarkdown(),\n      gfmStrikethroughToMarkdown(),\n      gfmTableToMarkdown(options),\n      gfmTaskListItemToMarkdown()\n    ]\n  }\n}\n","import React from 'react';\nimport Markdown from 'react-markdown'\nimport remarkGfm from 'remark-gfm'\n\nimport Section from '../section';\n\nconst SectionAbout = ({ about }) => {\n  return (\n    <Section title=\"About Me\">\n      <div className=\"mb-6 blog-content\">\n        <Markdown remarkPlugins={[remarkGfm]}>{about}</Markdown>\n      </div>\n    </Section>\n  );\n};\n\nexport default SectionAbout;\n","import { Link } from 'gatsby';\nimport React from 'react';\n\nimport Section from '../section';\nimport SummaryItem from '../summary-item';\n\nconst SectionBlog = ({ posts }) => {\n  return (\n    <Section title=\"Latest Posts\">\n      {posts.map((post) => (\n        <SummaryItem\n          key={post.node.fields.slug}\n          name={post.node.frontmatter.title}\n          description={post.node.frontmatter.description}\n          link={post.node.fields.slug}\n          internal\n        />\n      ))}\n      {posts.length >= 5 && (\n        <Link className=\"text-gray-500 text-sm hover:text-black\" to=\"/blog\">\n          View all posts &rarr;\n        </Link>\n      )}\n    </Section>\n  );\n};\n\nexport default SectionBlog;\n","import React from 'react';\n\nimport Section from '../section';\nimport SummaryItem from '../summary-item';\n\nconst SectionExperience = ({ experience }) => {\n  if (!experience.length) return null;\n\n  return (\n    <Section title=\"Experience\">\n      {experience.map((item) => (\n        <SummaryItem\n          key={item.name}\n          name={item.name}\n          description={item.description}\n          link={item.link}\n        />\n      ))}\n    </Section>\n  );\n};\n\nexport default SectionExperience;\n","import React from 'react';\n\nimport Section from '../section';\nimport SummaryItem from '../summary-item';\n\nconst SectionProjects = ({ projects }) => {\n  if (!projects.length) return null;\n\n  return (\n    <Section title=\"Projects\">\n      {projects.map((project) => (\n        <SummaryItem\n          key={project.name}\n          name={project.name}\n          description={project.description}\n          link={project.link}\n        />\n      ))}\n    </Section>\n  );\n};\n\nexport default SectionProjects;\n","import React from 'react';\n\nimport Section from '../section';\nimport SummaryItem from '../summary-item';\n\nconst SectionSkills = ({ skills }) => {\n  return (\n    <Section title=\"Skills\">\n      {skills.map((skill) => (\n        <SummaryItem\n          key={skill.name}\n          name={skill.name}\n          description={skill.description}\n        />\n      ))}\n    </Section>\n  );\n};\n\nexport default SectionSkills;\n","import { graphql } from 'gatsby';\nimport get from 'lodash/get';\nimport React from 'react';\n\nimport Header from '../components/header';\nimport Layout from '../components/layout';\nimport SectionAbout from '../components/section-about';\nimport SectionBlog from '../components/section-blog';\nimport SectionExperience from '../components/section-experience';\nimport SectionProjects from '../components/section-projects';\nimport SectionSkills from '../components/section-skills';\nimport SEO from '../components/seo';\n\nconst Index = ({ data }) => {\n  const about = get(data, 'site.siteMetadata.about', false);\n  const projects = get(data, 'site.siteMetadata.projects', false);\n  const posts = data.allMarkdownRemark.edges;\n  const experience = get(data, 'site.siteMetadata.experience', false);\n  const skills = get(data, 'site.siteMetadata.skills', false);\n  const noBlog = !posts || !posts.length;\n\n  return (\n    <Layout>\n      <SEO />\n      <Header metadata={data.site.siteMetadata} noBlog={noBlog} />\n      {about && <SectionAbout about={about} />}\n      {projects && projects.length && <SectionProjects projects={projects} />}\n      {experience && experience.length && (\n        <SectionExperience experience={experience} />\n      )}\n      {skills && skills.length && <SectionSkills skills={skills} />}\n      {!noBlog && <SectionBlog posts={posts} />}\n    </Layout>\n  );\n};\n\nexport default Index;\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        name\n        title\n        description\n        about\n        author\n        github\n        linkedin\n        projects {\n          name\n          description\n          link\n        }\n        experience {\n          name\n          description\n          link\n        }\n        skills {\n          name\n          description\n        }\n      }\n    }\n    allMarkdownRemark(\n      sort: { fields: [frontmatter___date], order: DESC }\n      limit: 5\n    ) {\n      edges {\n        node {\n          excerpt\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n            description\n          }\n        }\n      }\n    }\n  }\n`;\n","// http://www.w3.org/TR/CSS21/grammar.html\n// https://github.com/visionmedia/css-parse/pull/49#issuecomment-30088027\nvar COMMENT_REGEX = /\\/\\*[^*]*\\*+([^/*][^*]*\\*+)*\\//g;\n\nvar NEWLINE_REGEX = /\\n/g;\nvar WHITESPACE_REGEX = /^\\s*/;\n\n// declaration\nvar PROPERTY_REGEX = /^(\\*?[-#/*\\\\\\w]+(\\[[0-9a-z_-]+\\])?)\\s*/;\nvar COLON_REGEX = /^:\\s*/;\nvar VALUE_REGEX = /^((?:'(?:\\\\'|.)*?'|\"(?:\\\\\"|.)*?\"|\\([^)]*?\\)|[^};])+)/;\nvar SEMICOLON_REGEX = /^[;\\s]*/;\n\n// https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String/Trim#Polyfill\nvar TRIM_REGEX = /^\\s+|\\s+$/g;\n\n// strings\nvar NEWLINE = '\\n';\nvar FORWARD_SLASH = '/';\nvar ASTERISK = '*';\nvar EMPTY_STRING = '';\n\n// types\nvar TYPE_COMMENT = 'comment';\nvar TYPE_DECLARATION = 'declaration';\n\n/**\n * @param {String} style\n * @param {Object} [options]\n * @return {Object[]}\n * @throws {TypeError}\n * @throws {Error}\n */\nmodule.exports = function(style, options) {\n  if (typeof style !== 'string') {\n    throw new TypeError('First argument must be a string');\n  }\n\n  if (!style) return [];\n\n  options = options || {};\n\n  /**\n   * Positional.\n   */\n  var lineno = 1;\n  var column = 1;\n\n  /**\n   * Update lineno and column based on `str`.\n   *\n   * @param {String} str\n   */\n  function updatePosition(str) {\n    var lines = str.match(NEWLINE_REGEX);\n    if (lines) lineno += lines.length;\n    var i = str.lastIndexOf(NEWLINE);\n    column = ~i ? str.length - i : column + str.length;\n  }\n\n  /**\n   * Mark position and patch `node.position`.\n   *\n   * @return {Function}\n   */\n  function position() {\n    var start = { line: lineno, column: column };\n    return function(node) {\n      node.position = new Position(start);\n      whitespace();\n      return node;\n    };\n  }\n\n  /**\n   * Store position information for a node.\n   *\n   * @constructor\n   * @property {Object} start\n   * @property {Object} end\n   * @property {undefined|String} source\n   */\n  function Position(start) {\n    this.start = start;\n    this.end = { line: lineno, column: column };\n    this.source = options.source;\n  }\n\n  /**\n   * Non-enumerable source string.\n   */\n  Position.prototype.content = style;\n\n  var errorsList = [];\n\n  /**\n   * Error `msg`.\n   *\n   * @param {String} msg\n   * @throws {Error}\n   */\n  function error(msg) {\n    var err = new Error(\n      options.source + ':' + lineno + ':' + column + ': ' + msg\n    );\n    err.reason = msg;\n    err.filename = options.source;\n    err.line = lineno;\n    err.column = column;\n    err.source = style;\n\n    if (options.silent) {\n      errorsList.push(err);\n    } else {\n      throw err;\n    }\n  }\n\n  /**\n   * Match `re` and return captures.\n   *\n   * @param {RegExp} re\n   * @return {undefined|Array}\n   */\n  function match(re) {\n    var m = re.exec(style);\n    if (!m) return;\n    var str = m[0];\n    updatePosition(str);\n    style = style.slice(str.length);\n    return m;\n  }\n\n  /**\n   * Parse whitespace.\n   */\n  function whitespace() {\n    match(WHITESPACE_REGEX);\n  }\n\n  /**\n   * Parse comments.\n   *\n   * @param {Object[]} [rules]\n   * @return {Object[]}\n   */\n  function comments(rules) {\n    var c;\n    rules = rules || [];\n    while ((c = comment())) {\n      if (c !== false) {\n        rules.push(c);\n      }\n    }\n    return rules;\n  }\n\n  /**\n   * Parse comment.\n   *\n   * @return {Object}\n   * @throws {Error}\n   */\n  function comment() {\n    var pos = position();\n    if (FORWARD_SLASH != style.charAt(0) || ASTERISK != style.charAt(1)) return;\n\n    var i = 2;\n    while (\n      EMPTY_STRING != style.charAt(i) &&\n      (ASTERISK != style.charAt(i) || FORWARD_SLASH != style.charAt(i + 1))\n    ) {\n      ++i;\n    }\n    i += 2;\n\n    if (EMPTY_STRING === style.charAt(i - 1)) {\n      return error('End of comment missing');\n    }\n\n    var str = style.slice(2, i - 2);\n    column += 2;\n    updatePosition(str);\n    style = style.slice(i);\n    column += 2;\n\n    return pos({\n      type: TYPE_COMMENT,\n      comment: str\n    });\n  }\n\n  /**\n   * Parse declaration.\n   *\n   * @return {Object}\n   * @throws {Error}\n   */\n  function declaration() {\n    var pos = position();\n\n    // prop\n    var prop = match(PROPERTY_REGEX);\n    if (!prop) return;\n    comment();\n\n    // :\n    if (!match(COLON_REGEX)) return error(\"property missing ':'\");\n\n    // val\n    var val = match(VALUE_REGEX);\n\n    var ret = pos({\n      type: TYPE_DECLARATION,\n      property: trim(prop[0].replace(COMMENT_REGEX, EMPTY_STRING)),\n      value: val\n        ? trim(val[0].replace(COMMENT_REGEX, EMPTY_STRING))\n        : EMPTY_STRING\n    });\n\n    // ;\n    match(SEMICOLON_REGEX);\n\n    return ret;\n  }\n\n  /**\n   * Parse declarations.\n   *\n   * @return {Object[]}\n   */\n  function declarations() {\n    var decls = [];\n\n    comments(decls);\n\n    // declarations\n    var decl;\n    while ((decl = declaration())) {\n      if (decl !== false) {\n        decls.push(decl);\n        comments(decls);\n      }\n    }\n\n    return decls;\n  }\n\n  whitespace();\n  return declarations();\n};\n\n/**\n * Trim `str`.\n *\n * @param {String} str\n * @return {String}\n */\nfunction trim(str) {\n  return str ? str.replace(TRIM_REGEX, EMPTY_STRING) : EMPTY_STRING;\n}\n","/*!\n * Determine if an object is a Buffer\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n\nmodule.exports = function isBuffer (obj) {\n  return obj != null && obj.constructor != null &&\n    typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)\n}\n","/**\n * @license React\n * react-is.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';var b=Symbol.for(\"react.element\"),c=Symbol.for(\"react.portal\"),d=Symbol.for(\"react.fragment\"),e=Symbol.for(\"react.strict_mode\"),f=Symbol.for(\"react.profiler\"),g=Symbol.for(\"react.provider\"),h=Symbol.for(\"react.context\"),k=Symbol.for(\"react.server_context\"),l=Symbol.for(\"react.forward_ref\"),m=Symbol.for(\"react.suspense\"),n=Symbol.for(\"react.suspense_list\"),p=Symbol.for(\"react.memo\"),q=Symbol.for(\"react.lazy\"),t=Symbol.for(\"react.offscreen\"),u;u=Symbol.for(\"react.module.reference\");\nfunction v(a){if(\"object\"===typeof a&&null!==a){var r=a.$$typeof;switch(r){case b:switch(a=a.type,a){case d:case f:case e:case m:case n:return a;default:switch(a=a&&a.$$typeof,a){case k:case h:case l:case q:case p:case g:return a;default:return r}}case c:return r}}}exports.ContextConsumer=h;exports.ContextProvider=g;exports.Element=b;exports.ForwardRef=l;exports.Fragment=d;exports.Lazy=q;exports.Memo=p;exports.Portal=c;exports.Profiler=f;exports.StrictMode=e;exports.Suspense=m;\nexports.SuspenseList=n;exports.isAsyncMode=function(){return!1};exports.isConcurrentMode=function(){return!1};exports.isContextConsumer=function(a){return v(a)===h};exports.isContextProvider=function(a){return v(a)===g};exports.isElement=function(a){return\"object\"===typeof a&&null!==a&&a.$$typeof===b};exports.isForwardRef=function(a){return v(a)===l};exports.isFragment=function(a){return v(a)===d};exports.isLazy=function(a){return v(a)===q};exports.isMemo=function(a){return v(a)===p};\nexports.isPortal=function(a){return v(a)===c};exports.isProfiler=function(a){return v(a)===f};exports.isStrictMode=function(a){return v(a)===e};exports.isSuspense=function(a){return v(a)===m};exports.isSuspenseList=function(a){return v(a)===n};\nexports.isValidElementType=function(a){return\"string\"===typeof a||\"function\"===typeof a||a===d||a===f||a===e||a===m||a===n||a===t||\"object\"===typeof a&&null!==a&&(a.$$typeof===q||a.$$typeof===p||a.$$typeof===g||a.$$typeof===h||a.$$typeof===l||a.$$typeof===u||void 0!==a.getModuleId)?!0:!1};exports.typeOf=v;\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react-is.production.min.js');\n} else {\n  module.exports = require('./cjs/react-is.development.js');\n}\n","var parse = require('inline-style-parser');\n\n/**\n * Parses inline style to object.\n *\n * @example\n * // returns { 'line-height': '42' }\n * StyleToObject('line-height: 42;');\n *\n * @param  {String}      style      - The inline style.\n * @param  {Function}    [iterator] - The iterator function.\n * @return {null|Object}\n */\nfunction StyleToObject(style, iterator) {\n  var output = null;\n  if (!style || typeof style !== 'string') {\n    return output;\n  }\n\n  var declaration;\n  var declarations = parse(style);\n  var hasIterator = typeof iterator === 'function';\n  var property;\n  var value;\n\n  for (var i = 0, len = declarations.length; i < len; i++) {\n    declaration = declarations[i];\n    property = declaration.property;\n    value = declaration.value;\n\n    if (hasIterator) {\n      iterator(property, value, declaration);\n    } else if (value) {\n      output || (output = {});\n      output[property] = value;\n    }\n  }\n\n  return output;\n}\n\nmodule.exports = StyleToObject;\nmodule.exports.default = StyleToObject; // ESM support\n"],"names":["hasOwn","Object","prototype","hasOwnProperty","toStr","toString","defineProperty","gOPD","getOwnPropertyDescriptor","isArray","arr","Array","call","isPlainObject","obj","key","hasOwnConstructor","hasIsPrototypeOf","constructor","setProperty","target","options","name","enumerable","configurable","value","newValue","writable","getProperty","module","exports","extend","src","copy","copyIsArray","clone","arguments","i","length","deep","classes","_ref","title","children","React","className","linkContent","description","link","internal","Link","to","href","stringifyPosition","position","point","index","line","column","pos","start","end","VFileMessage","Error","reason","place","origin","parts","super","undefined","indexOf","slice","this","message","stack","fatal","source","ruleId","file","actual","expected","url","note","path","basename","ext","TypeError","assertPath","seenNonSlash","charCodeAt","firstNonSlashEnd","extIndex","dirname","unmatchedSlash","extname","startPart","startDot","preDotState","code","join","segments","joined","absolute","allowAboveRoot","lastSlashIndex","result","lastSegmentLength","lastSlash","dots","lastIndexOf","normalizeString","normalize","sep","JSON","stringify","proc","cwd","isUrl","fileUrlOrPath","urlToPath","URL","error","protocol","hostname","pathname","third","decodeURIComponent","getPathFromURLPosix","order","VFile","buffer","data","messages","history","stored","map","prop","includes","assertNonEmpty","push","assertPart","stem","encoding","info","fail","part","bail","getPrototypeOf","Symbol","toStringTag","iterator","trough","fns","pipeline","run","values","middlewareIndex","callback","pop","next","output","fn","middleware","called","wrapped","parameters","fnExpectsCallback","done","apply","Promise","then","wrap","use","middelware","unified","base","transformers","attachers","frozen","namespace","freezeIndex","processor","assertUnfrozen","own","Parser","Compiler","freeze","attacher","transformer","Number","POSITIVE_INFINITY","settings","addPlugin","addList","addPreset","assign","add","plugin","plugins","entry","parse","doc","vfile","assertParser","newable","String","node","assertCompiler","assertNode","compile","executor","resolve","reject","tree","runSync","complete","assertDone","process","processSync","destination","keys","type","asyncName","Boolean","looksLikeAVFile","emptyOptions","one","includeImageAlt","includeHtml","alt","splice","list","remove","items","chunkStart","from","unshift","syntaxExtension","all","extension","hook","left","right","constructs","existing","before","asciiAlpha","regexCheck","asciiAlphanumeric","asciiAtext","asciiControl","asciiDigit","asciiHexDigit","asciiPunctuation","markdownLineEnding","markdownLineEndingOrSpace","markdownSpace","unicodePunctuation","unicodeWhitespace","regex","test","fromCharCode","factorySpace","effects","ok","max","limit","size","enter","prefix","consume","exit","content","tokenize","contentStart","attempt","parser","contentInitial","lineStart","previous","token","contentType","self","childFlow","childToken","lineStartOffset","continued","item","containerState","continuation","documentContinue","checkNewContainers","_closeFlow","closeFlow","indexBeforeExits","events","indexBeforeFlow","exitContainers","documentContinued","currentConstruct","concrete","flowStart","interrupt","_gfmTableDynamicInterruptHack","check","containerConstruct","thereIsANewContainer","thereIsNoNewContainer","lazy","now","offset","containerContinue","flow","_tokenizer","flowContinue","writeToChild","eof","stream","sliceStream","defineSkip","write","seen","nok","document","disable","null","blankLine","after","partial","subtokenize","jumps","event","lineIndex","otherIndex","otherEvent","subevents","more","_isInFirstContentOfListItem","subcontent","_container","eventIndex","context","startPosition","startPositions","tokenizer","childEvents","gaps","current","adjust","breaks","_gfmTasklistFirstContentOfListItem","chunkInside","contentEnd","continuationConstruct","contentContinue","prefixed","tail","sliceSerialize","initial","flowInitial","afterConstruct","resolver","resolveAll","createResolver","string","initializeFactory","field","text","notText","atBreak","resolveAllLineSuffixes","extraResolver","chunks","tabs","bufferIndex","chunk","_index","_bufferIndex","createTokenizer","initialize","columnStart","resolveAllConstructs","consumed","accountForPotentialSkip","fields","constructFactory","construct","addResult","onsuccessfulcheck","expandTabs","atTab","serializeChunks","main","expectedCode","state","startIndex","startBufferIndex","endIndex","endBufferIndex","view","head","shift","sliceChunks","chunkIndex","go","_","restore","onreturn","returnState","bogusState","listOfConstructs","constructIndex","handleListOfConstructs","def","handleMapOfConstructs","handleConstruct","startPoint","startPrevious","startCurrentConstruct","startEventsIndex","startStack","store","create","resolveTo","thematicBreak","marker","sequence","initialSize","kind","atMarker","inside","onBlank","listItemPrefixWhitespaceConstruct","endOfPrefix","otherPrefix","initialBlankLine","notBlank","furtherBlankLines","notInCurrentItem","indentConstruct","blockQuote","open","contBefore","factoryDestination","literalType","literalMarkerType","rawType","stringType","balance","enclosedBefore","raw","enclosed","enclosedEscape","rawEscape","factoryLabel","markerType","labelInside","labelEscape","factoryTitle","begin","escape","factoryWhitespace","normalizeIdentifier","replace","toLowerCase","toUpperCase","definition","identifier","labelAfter","markerAfter","destinationBefore","destinationAfter","titleBefore","afterWhitespace","defined","beforeMarker","titleAfter","titleAfterOptionalWhitespace","codeIndented","afterPrefix","furtherStart","headingAtx","sequenceOpen","sequenceFurther","setextUnderline","paragraph","heading","htmlBlockNames","htmlRawNames","htmlFlow","closingTag","markerB","declarationOpen","tagCloseStart","continuationDeclarationInside","tagName","commentOpenInside","cdataOpenInside","slash","basicSelfClosing","completeClosingTagAfter","completeAttributeNameBefore","completeEnd","completeAttributeName","completeAttributeNameAfter","completeAttributeValueBefore","completeAttributeValueQuoted","completeAttributeValueUnquoted","completeAttributeValueQuotedAfter","completeAfter","continuationCommentInside","continuationRawTagOpen","continuationClose","continuationCdataInside","continuationStart","blankLineBefore","continuationAfter","nonLazyContinuationStart","continuationStartNonLazy","continuationBefore","continuationRawEndTag","nonLazyContinuation","codeFenced","closeStart","startBefore","beforeSequenceClose","sequenceClose","sizeOpen","sequenceCloseAfter","initialPrefix","beforeSequenceOpen","infoBefore","atNonLazyBreak","metaBefore","meta","contentBefore","beforeContentChunk","contentChunk","createElement","decodeNamedCharacterReference","characterReference","innerHTML","char","textContent","numeric","characterEscape","lineEnding","labelEnd","labelStart","_balanced","_inactive","labelEndNok","resourceConstruct","labelEndOk","referenceFullConstruct","referenceNotFull","referenceCollapsedConstruct","close","media","group","label","insideSpan","resourceBefore","resourceOpen","resourceEnd","resourceDestinationAfter","resourceDestinationMissing","resourceBetween","resourceTitleAfter","referenceFullAfter","referenceFullMissing","referenceCollapsedOpen","labelStartImage","classifyCharacter","attention","attentionMarkers","_open","_close","openingSequence","closingSequence","nextEvents","movePoint","autolink","schemeOrEmailAtext","emailAtext","schemeInsideOrEmailAtext","urlInside","emailAtSignOrDot","emailLabel","emailValue","htmlText","instruction","tagOpen","declaration","commentEnd","comment","commentClose","lineEndingBefore","cdata","cdataClose","cdataEnd","instructionClose","tagClose","tagCloseBetween","tagOpenBetween","tagOpenAttributeName","tagOpenAttributeNameAfter","tagOpenAttributeValueBefore","tagOpenAttributeValueQuoted","tagOpenAttributeValueUnquoted","tagOpenAttributeValueQuotedAfter","lineEndingAfter","lineEndingAfterPrefix","labelStartLink","hardBreakEscape","codeText","between","tailExitIndex","headEnterIndex","extensions","combineExtensions","search","decodeNumericCharacterReference","parseInt","characterEscapeOrReference","decode","$0","$1","$2","hex","fromMarkdown","config","transforms","canContainEols","opener","autolinkProtocol","onenterdata","autolinkEmail","atxHeading","codeFlow","codeFencedFenceInfo","codeFencedFenceMeta","codeTextData","codeFlowValue","definitionDestinationString","definitionLabelString","definitionTitleString","emphasis","hardBreak","hardBreakTrailing","html","htmlFlowData","htmlTextData","image","listItem","listItemValue","onenterlistitemvalue","listOrdered","onenterlistordered","listUnordered","reference","onenterreference","referenceString","resourceDestinationString","resourceTitleString","setextHeading","strong","closer","atxHeadingSequence","onexitatxheadingsequence","onexitautolinkemail","onexitautolinkprotocol","characterEscapeValue","onexitdata","characterReferenceMarkerHexadecimal","onexitcharacterreferencemarker","characterReferenceMarkerNumeric","characterReferenceValue","onexitcharacterreferencevalue","onexitcodefenced","codeFencedFence","onexitcodefencedfence","onexitcodefencedfenceinfo","onexitcodefencedfencemeta","onexitcodeindented","onexitcodetext","onexitdefinitiondestinationstring","onexitdefinitionlabelstring","onexitdefinitiontitlestring","onexithardbreak","onexithtmlflow","onexithtmltext","onexitimage","onexitlabel","labelText","onexitlabeltext","onexitlineending","onexitlink","onexitreferencestring","onexitresourcedestinationstring","onexitresourcetitlestring","resource","onexitresource","onexitsetextheading","setextHeadingLineSequence","onexitsetextheadinglinesequence","setextHeadingText","onexitsetextheadingtext","configure","mdastExtensions","tokenStack","resume","setData","getData","listStack","prepareList","handler","defaultOnError","firstBlankLineIndex","containerBalance","listSpread","tailIndex","tailEvent","_spread","and","errorHandler","onExitError","lang","depth","referenceType","ancestor","decodeString","fragment","ordered","spread","checked","compiler","postprocess","atCarriageReturn","match","endPosition","lastIndex","exec","Math","ceil","preprocess","d","combined","remarkParse","normalizeUri","skip","encodeURIComponent","convert","castFactory","typeFactory","tests","checks","any","anyFactory","propsFactory","visitParents","visitor","reverse","is","step","factory","parents","visit","subresult","grandparents","toResult","concat","parent","pointStart","pointEnd","clean","footnoteReference","id","safeId","footnoteOrder","counter","footnoteCounts","reuseCounter","properties","clobberPrefix","dataFootnoteRef","ariaDescribedBy","patch","sup","applyData","revert","subtype","suffix","contents","listItemLoose","tab","space","trimLines","last","lines","trimLine","codePointAt","handlers","blockquote","break","delete","footnote","footnoteById","no","dangerous","imageReference","inlineCode","linkReference","results","loose","listLoose","disabled","child","root","table","rows","firstRow","tableContent","body","tableCell","tableRow","siblings","align","cellIndex","cells","cell","alignValue","toml","ignore","yaml","footnoteDefinition","createState","allowDangerousHtml","footnoteLabel","footnoteLabelTagName","footnoteLabelProperties","footnoteBackLabel","unknownHandler","passThrough","cache","definitions","augment","hName","hProperties","hChildren","ctx","generated","props","defaultUnknownHandler","nodes","toHast","foot","listItems","referenceIndex","backReferences","backReference","dataFootnoteBackref","ariaLabel","tailTail","dataFootnotes","footer","bridge","mutate","Schema","property","normal","merge","Info","attribute","boolean","booleanish","overloadedBoolean","number","commaSeparated","spaceSeparated","commaOrSpaceSeparated","mustUseProperty","powers","increment","DefinedInfo","mask","mark","transform","attributes","xlink","xLinkActuate","xLinkArcRole","xLinkHref","xLinkRole","xLinkShow","xLinkTitle","xLinkType","xml","xmlLang","xmlBase","xmlSpace","caseSensitiveTransform","caseInsensitiveTransform","xmlns","xmlnsxlink","xmlnsXLink","aria","ariaActiveDescendant","ariaAtomic","ariaAutoComplete","ariaBusy","ariaChecked","ariaColCount","ariaColIndex","ariaColSpan","ariaControls","ariaCurrent","ariaDetails","ariaDisabled","ariaDropEffect","ariaErrorMessage","ariaExpanded","ariaFlowTo","ariaGrabbed","ariaHasPopup","ariaHidden","ariaInvalid","ariaKeyShortcuts","ariaLabelledBy","ariaLevel","ariaLive","ariaModal","ariaMultiLine","ariaMultiSelectable","ariaOrientation","ariaOwns","ariaPlaceholder","ariaPosInSet","ariaPressed","ariaReadOnly","ariaRelevant","ariaRequired","ariaRoleDescription","ariaRowCount","ariaRowIndex","ariaRowSpan","ariaSelected","ariaSetSize","ariaSort","ariaValueMax","ariaValueMin","ariaValueNow","ariaValueText","role","acceptcharset","classname","htmlfor","httpequiv","abbr","accept","acceptCharset","accessKey","action","allow","allowFullScreen","allowPaymentRequest","allowUserMedia","as","async","autoCapitalize","autoComplete","autoFocus","autoPlay","blocking","capture","charSet","cite","cols","colSpan","contentEditable","controls","controlsList","coords","crossOrigin","dateTime","decoding","default","defer","dir","dirName","download","draggable","encType","enterKeyHint","fetchPriority","form","formAction","formEncType","formMethod","formNoValidate","formTarget","headers","height","hidden","high","hrefLang","htmlFor","httpEquiv","imageSizes","imageSrcSet","inert","inputMode","integrity","isMap","itemId","itemProp","itemRef","itemScope","itemType","language","loading","loop","low","manifest","maxLength","method","min","minLength","multiple","muted","nonce","noModule","noValidate","onAbort","onAfterPrint","onAuxClick","onBeforeMatch","onBeforePrint","onBeforeToggle","onBeforeUnload","onBlur","onCancel","onCanPlay","onCanPlayThrough","onChange","onClick","onClose","onContextLost","onContextMenu","onContextRestored","onCopy","onCueChange","onCut","onDblClick","onDrag","onDragEnd","onDragEnter","onDragExit","onDragLeave","onDragOver","onDragStart","onDrop","onDurationChange","onEmptied","onEnded","onError","onFocus","onFormData","onHashChange","onInput","onInvalid","onKeyDown","onKeyPress","onKeyUp","onLanguageChange","onLoad","onLoadedData","onLoadedMetadata","onLoadEnd","onLoadStart","onMessage","onMessageError","onMouseDown","onMouseEnter","onMouseLeave","onMouseMove","onMouseOut","onMouseOver","onMouseUp","onOffline","onOnline","onPageHide","onPageShow","onPaste","onPause","onPlay","onPlaying","onPopState","onProgress","onRateChange","onRejectionHandled","onReset","onResize","onScroll","onScrollEnd","onSecurityPolicyViolation","onSeeked","onSeeking","onSelect","onSlotChange","onStalled","onStorage","onSubmit","onSuspend","onTimeUpdate","onToggle","onUnhandledRejection","onUnload","onVolumeChange","onWaiting","onWheel","optimum","pattern","ping","placeholder","playsInline","popover","popoverTarget","popoverTargetAction","poster","preload","readOnly","referrerPolicy","rel","required","reversed","rowSpan","sandbox","scope","scoped","seamless","selected","shadowRootDelegatesFocus","shadowRootMode","shape","sizes","slot","span","spellCheck","srcDoc","srcLang","srcSet","style","tabIndex","translate","typeMustMatch","useMap","width","aLink","archive","axis","background","bgColor","border","borderColor","bottomMargin","cellPadding","cellSpacing","charOff","classId","clear","codeBase","codeType","color","compact","declare","face","frame","frameBorder","hSpace","leftMargin","longDesc","lowSrc","marginHeight","marginWidth","noResize","noHref","noShade","noWrap","object","profile","prompt","rev","rightMargin","rules","scheme","scrolling","standby","summary","topMargin","valueType","version","vAlign","vLink","vSpace","allowTransparency","autoCorrect","autoSave","disablePictureInPicture","disableRemotePlayback","security","unselectable","svg","accentHeight","alignmentBaseline","arabicForm","baselineShift","capHeight","clipPath","clipRule","colorInterpolation","colorInterpolationFilters","colorProfile","colorRendering","dataType","dominantBaseline","enableBackground","fillOpacity","fillRule","floodColor","floodOpacity","fontFamily","fontSize","fontSizeAdjust","fontStretch","fontStyle","fontVariant","fontWeight","glyphName","glyphOrientationHorizontal","glyphOrientationVertical","horizAdvX","horizOriginX","horizOriginY","imageRendering","letterSpacing","lightingColor","markerEnd","markerMid","markerStart","navDown","navDownLeft","navDownRight","navLeft","navNext","navPrev","navRight","navUp","navUpLeft","navUpRight","onActivate","onBegin","onEnd","onFocusIn","onFocusOut","onMouseWheel","onRepeat","onShow","onZoom","overlinePosition","overlineThickness","paintOrder","panose1","pointerEvents","renderingIntent","shapeRendering","stopColor","stopOpacity","strikethroughPosition","strikethroughThickness","strokeDashArray","strokeDashOffset","strokeLineCap","strokeLineJoin","strokeMiterLimit","strokeOpacity","strokeWidth","textAnchor","textDecoration","textRendering","transformOrigin","typeOf","underlinePosition","underlineThickness","unicodeBidi","unicodeRange","unitsPerEm","vAlphabetic","vHanging","vIdeographic","vMathematical","vectorEffect","vertAdvY","vertOriginX","vertOriginY","wordSpacing","writingMode","xHeight","playbackOrder","timelineBegin","about","accumulate","additive","alphabetic","amplitude","ascent","attributeName","attributeType","azimuth","bandwidth","baseFrequency","baseProfile","bbox","bias","by","calcMode","clip","clipPathUnits","contentScriptType","contentStyleType","cursor","cx","cy","defaultAction","descent","diffuseConstant","direction","display","dur","divisor","dx","dy","edgeMode","editable","elevation","exponent","externalResourcesRequired","fill","filter","filterRes","filterUnits","focusable","focusHighlight","format","fr","fx","fy","g1","g2","glyphRef","gradientTransform","gradientUnits","hanging","hatchContentUnits","hatchUnits","ideographic","initialVisibility","in","in2","intercept","k","k1","k2","k3","k4","kernelMatrix","kernelUnitLength","keyPoints","keySplines","keyTimes","kerning","lengthAdjust","limitingConeAngle","local","markerHeight","markerUnits","markerWidth","maskContentUnits","maskUnits","mathematical","mediaCharacterEncoding","mediaContentEncodings","mediaSize","mediaTime","mode","numOctaves","observer","opacity","operator","orient","orientation","overflow","overlay","pathLength","patternContentUnits","patternTransform","patternUnits","phase","pitch","points","pointsAtX","pointsAtY","pointsAtZ","preserveAlpha","preserveAspectRatio","primitiveUnits","propagate","r","radius","refX","refY","repeatCount","repeatDur","requiredExtensions","requiredFeatures","requiredFonts","requiredFormats","restart","rotate","rx","ry","scale","seed","side","slope","snapshotTime","specularConstant","specularExponent","spreadMethod","spacing","startOffset","stdDeviation","stemh","stemv","stitchTiles","stroke","surfaceScale","syncBehavior","syncBehaviorDefault","syncMaster","syncTolerance","syncToleranceDefault","systemLanguage","tableValues","targetX","targetY","textLength","transformBehavior","u1","u2","unicode","viewBox","viewTarget","visibility","widths","x","x1","x2","xChannelSelector","y","y1","y2","yChannelSelector","z","zoomAndPan","rehypeFilter","allowedElements","disallowedElements","allowElement","parent_","unwrapDisallowed","whitespace","thing","valid","dash","cap","kebab","camelcase","charAt","hastToReact","protocols","uriTransformer","uri","trim","first","colon","tableElements","Set","childrenToReact","childIndex","toReact","has","skipHtml","transformLinkUri","parentSchema","schema","addProperty","listDepth","component","components","basic","linkTarget","inline","level","transformImageUri","input","getInputElement","getElementsBeforeCount","textAlign","isHeader","sourcePos","rawSourcePos","sourcePosition","includeElementIndex","siblingCount","count","Type","rest","dashes","find","padRight","padLeft","v","styleReplacer","parseStyle","deprecated","renderers","astPlugins","escapeHtml","allowNode","allowedTypes","disallowedTypes","includeNodeIndex","ReactMarkdown","deprecation","console","warn","remarkPlugins","remarkRehypeOptions","rehypePlugins","hastNode","ccount","character","propTypes","unicodePunctuationInternal","checkAsRecord","nodeAsRecord","testFunction","looksLikeANode","empty","nodeAsParent","findAndReplace","ignored","pairs","tupleOrList","tuple","toExpression","toFunction","toPairs","pairIndex","grandparent","change","matchObject","global","RegExp","inConstruct","notInConstruct","enterLiteralAutolink","enterLiteralAutolinkValue","exitLiteralAutolinkHttp","exitLiteralAutolinkWww","exitLiteralAutolinkEmail","exitLiteralAutolink","transformGfmAutolinkLiterals","findUrl","findEmail","domain","split","isCorrectDomain","trailExec","trail","closingParenIndex","openingParens","closingParens","splitUrl","atext","email","enterFootnoteDefinition","enterFootnoteDefinitionLabelString","exitFootnoteDefinitionLabelString","exitFootnoteDefinition","enterFootnoteCall","enterFootnoteCallString","exitFootnoteCallString","exitFootnoteCall","tracker","createTracker","move","subexit","safe","associationId","indentLines","containerFlow","blank","peek","constructsWithoutStrikethrough","enterStrikethrough","exitStrikethrough","handleDelete","containerPhrasing","defaultStringLength","toAlignment","listInScope","none","_1","unsafe","checkQuote","quote","checkEmphasis","formatHeadingAsSetext","literalWithBreak","testOrVisitor","visitorOrReverse","maybeReverse","setext","expression","compilePattern","formatLinkAsAutolink","resourceLink","checkBullet","bullet","checkRule","rule","phrasing","checkStrong","handle","fence","checkFence","fences","formatCodeAsIndented","repeat","substring","longestStreak","encode","rank","closeAtx","bulletCurrent","bulletOrdered","checkBulletOrdered","bulletOther","checkBulletOther","useDifferentMarker","bulletLastUsed","firstListItem","indexStack","listItemIndent","checkListItemIndent","incrementListMarker","some","ruleSpaces","repetition","ruleRepetition","checkRuleRepetition","enterTable","_align","inTable","exitTable","enterRow","enterCell","exitCodeText","gfmTableToMarkdown","padding","tableCellPadding","alignDelimiters","tablePipeAlign","stringLength","around","serializeData","handleTableRowAsData","handleTableAsData","handleTableCell","row","matrix","alignments","cellMatrix","sizeMatrix","longestCellByColumn","mostCellsPerRow","rowIndex","columnIndex","delimiterStart","delimiterEnd","markdownTable","exitCheck","exitParagraphWithTaskListItem","firstParaghraph","sibling","listItemWithTaskListItem","checkable","checkbox","wwwPrefix","wwwPrefixInside","wwwPrefixAfter","underscoreInLastSegment","underscoreInLastLastSegment","domainInside","domainAfter","domainAtPunctuation","sizeClose","pathInside","pathAtPunctuation","trailCharRefStart","trailBracketAfter","trailCharRefInside","emailDomainDotTrail","wwwAutolink","previousWww","previousUnbalanced","wwwAfter","protocolAutolink","previousProtocol","fromCodePoint","protocolPrefixInside","protocolSlashesInside","afterProtocol","protocolAfter","emailAutolink","dot","gfmAtext","previousEmail","emailDomain","emailDomainAfter","emailDomainDot","_gfmAutolinkLiteralWalkedInto","indent","tokenizePotentialGfmFootnoteCall","gfmFootnotes","resolveToPotentialGfmFootnoteCall","replacement","tokenizeGfmFootnoteCall","callStart","callData","callEscape","tokenizeDefinitionStart","labelAtMarker","whitespaceAfter","tokenizeDefinitionContinuation","gfmFootnoteDefinitionEnd","gfmStrikethrough","single","singleTilde","strikethrough","EditMap","editMap","at","addImpl","sort","a","b","vecs","gfmTableAlign","inDelimiterRow","alignIndex","tokenizeTable","sizeB","bodyRowStart","headRowBefore","headRowBreak","headRowStart","headDelimiterStart","headRowData","headRowEscape","headDelimiterBefore","headDelimiterValueBefore","headDelimiterCellBefore","headDelimiterNok","headDelimiterLeftAlignmentAfter","headDelimiterCellAfter","headDelimiterFiller","headDelimiterRightAlignmentAfter","bodyRowBreak","bodyRowData","bodyRowEscape","resolveTable","currentTable","currentBody","currentCell","inFirstCellAwaitingPipe","rowKind","lastCell","afterHeadAwaitingFirstBodyRow","lastTableEnd","flushTableEnd","flushCell","range","rowEnd","previousCell","groupName","getPoint","relatedStart","relatedEnd","valueToken","tableBody","exits","related","tasklistCheck","spaceThenNonSpace","gfm","remarkGfm","micromarkExtensions","fromMarkdownExtensions","toMarkdownExtensions","literalAutolink","literalAutolinkEmail","literalAutolinkHttp","literalAutolinkWww","gfmFootnoteDefinition","gfmFootnoteDefinitionLabelString","gfmFootnoteCall","gfmFootnoteCallString","tableData","tableHeader","taskListCheckValueChecked","taskListCheckValueUnchecked","gfmToMarkdown","Section","Markdown","posts","post","SummaryItem","slug","frontmatter","experience","projects","project","skills","skill","get","allMarkdownRemark","edges","noBlog","Layout","SEO","Header","metadata","site","siteMetadata","SectionAbout","SectionProjects","SectionExperience","SectionSkills","SectionBlog","COMMENT_REGEX","NEWLINE_REGEX","WHITESPACE_REGEX","PROPERTY_REGEX","COLON_REGEX","VALUE_REGEX","SEMICOLON_REGEX","TRIM_REGEX","EMPTY_STRING","str","lineno","updatePosition","Position","errorsList","msg","err","filename","silent","re","m","comments","c","val","ret","decl","decls","declarations","isBuffer","u","for","e","f","g","h","l","n","p","q","t","$$typeof","ContextConsumer","ContextProvider","Element","ForwardRef","Fragment","Lazy","Memo","Portal","Profiler","StrictMode","Suspense","SuspenseList","isAsyncMode","isConcurrentMode","isContextConsumer","isContextProvider","isElement","isForwardRef","isFragment","isLazy","isMemo","isPortal","isProfiler","isStrictMode","isSuspense","isSuspenseList","isValidElementType","getModuleId","StyleToObject","hasIterator","len"],"sourceRoot":""}